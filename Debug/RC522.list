
RC522.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009374  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  08009514  08009514  00019514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c84  08009c84  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009c84  08009c84  00019c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c8c  08009c8c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c8c  08009c8c  00019c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c90  08009c90  00019c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001970  200001fc  08009e90  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b6c  08009e90  00021b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018988  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000367b  00000000  00000000  00038bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f50  00000000  00000000  0003c230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  0003d180  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019672  00000000  00000000  0003df50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001005b  00000000  00000000  000575c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a40e  00000000  00000000  0006761d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1a2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004094  00000000  00000000  000f1aa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094fc 	.word	0x080094fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	080094fc 	.word	0x080094fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <DWT_Delay_us>:

#if (SYSDELAY == 1 & HWTIMER == 0)
uint32_t DWT_Delay_Init(void);
// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <DWT_Delay_us+0x44>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800059e:	f004 f9db 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 80005a2:	4602      	mov	r2, r0
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <DWT_Delay_us+0x48>)
 80005a6:	fba3 2302 	umull	r2, r3, r3, r2
 80005aa:	0c9b      	lsrs	r3, r3, #18
 80005ac:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	fb02 f303 	mul.w	r3, r2, r3
 80005b6:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80005b8:	bf00      	nop
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <DWT_Delay_us+0x44>)
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	1ad2      	subs	r2, r2, r3
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1acb      	subs	r3, r1, r3
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3f6      	bcc.n	80005ba <DWT_Delay_us+0x2a>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	e0001000 	.word	0xe0001000
 80005d8:	431bde83 	.word	0x431bde83

080005dc <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <DWT_Delay_ms+0x40>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 80005ea:	f004 f9b5 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <DWT_Delay_ms+0x44>)
 80005f2:	fba3 2302 	umull	r2, r3, r3, r2
 80005f6:	099b      	lsrs	r3, r3, #6
 80005f8:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000604:	bf00      	nop
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <DWT_Delay_ms+0x40>)
 8000608:	685a      	ldr	r2, [r3, #4]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	1ad2      	subs	r2, r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	d3f8      	bcc.n	8000606 <DWT_Delay_ms+0x2a>
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	e0001000 	.word	0xe0001000
 8000620:	10624dd3 	.word	0x10624dd3

08000624 <MFRC522>:
// Functions for setting up the Arduino
/////////////////////////////////////////////////////////////////////////////////////
/**
 * Constructor.
 */
void MFRC522(){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
//	Serial_Init();
//	Spi_Init();
	PCD_Init();
 8000628:	f000 f9a6 	bl	8000978 <PCD_Init>
} // End constructor
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <PCD_WriteRegister>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void PCD_WriteRegister(	PCD_Register reg,	///< The register to write to. One of the PCD_Register enums.
									byte value			///< The value to write.
								) {
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	460a      	mov	r2, r1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]
	CS_LOW;		// Select slave
 8000640:	2200      	movs	r2, #0
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <PCD_WriteRegister+0x4c>)
 8000646:	f002 fbe3 	bl	8002e10 <HAL_GPIO_WritePin>
	SPI.transfer(&hspi1,&reg,1,500);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <PCD_WriteRegister+0x50>)
 800064c:	681c      	ldr	r4, [r3, #0]
 800064e:	1df9      	adds	r1, r7, #7
 8000650:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000654:	2201      	movs	r2, #1
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <PCD_WriteRegister+0x54>)
 8000658:	47a0      	blx	r4
	SPI.transfer(&hspi1,&value,1,500);
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <PCD_WriteRegister+0x50>)
 800065c:	681c      	ldr	r4, [r3, #0]
 800065e:	1db9      	adds	r1, r7, #6
 8000660:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000664:	2201      	movs	r2, #1
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <PCD_WriteRegister+0x54>)
 8000668:	47a0      	blx	r4
	CS_HIGH;		// Release slave again
 800066a:	2201      	movs	r2, #1
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <PCD_WriteRegister+0x4c>)
 8000670:	f002 fbce 	bl	8002e10 <HAL_GPIO_WritePin>
} // End PCD_WriteRegister()
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}
 800067c:	40020400 	.word	0x40020400
 8000680:	2000000c 	.word	0x2000000c
 8000684:	20000234 	.word	0x20000234

08000688 <PCD_WriteRegisterMany>:
 * The interface is described in the datasheet section 8.1.2.
 */
void PCD_WriteRegisterMany(	PCD_Register reg,	///< The register to write to. One of the PCD_Register enums.
									byte count,			///< The number of bytes to write to the register
									byte *values		///< The values to write. Byte array.
								) {
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	603a      	str	r2, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	460b      	mov	r3, r1
 8000696:	71bb      	strb	r3, [r7, #6]
	CS_LOW;		// Select slave
 8000698:	2200      	movs	r2, #0
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	4813      	ldr	r0, [pc, #76]	; (80006ec <PCD_WriteRegisterMany+0x64>)
 800069e:	f002 fbb7 	bl	8002e10 <HAL_GPIO_WritePin>
	SPI.transfer(&hspi1,&reg,1,500);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <PCD_WriteRegisterMany+0x68>)
 80006a4:	681c      	ldr	r4, [r3, #0]
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006ac:	2201      	movs	r2, #1
 80006ae:	4811      	ldr	r0, [pc, #68]	; (80006f4 <PCD_WriteRegisterMany+0x6c>)
 80006b0:	47a0      	blx	r4
	for (byte index = 0; index < count; index++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	e00c      	b.n	80006d2 <PCD_WriteRegisterMany+0x4a>
		SPI.transfer(&hspi1,&values[index],1,500);
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <PCD_WriteRegisterMany+0x68>)
 80006ba:	681c      	ldr	r4, [r3, #0]
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	18d1      	adds	r1, r2, r3
 80006c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006c6:	2201      	movs	r2, #1
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <PCD_WriteRegisterMany+0x6c>)
 80006ca:	47a0      	blx	r4
	for (byte index = 0; index < count; index++) {
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	3301      	adds	r3, #1
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	7bfa      	ldrb	r2, [r7, #15]
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3ee      	bcc.n	80006b8 <PCD_WriteRegisterMany+0x30>
	}
	CS_HIGH;		// Release slave again
 80006da:	2201      	movs	r2, #1
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <PCD_WriteRegisterMany+0x64>)
 80006e0:	f002 fb96 	bl	8002e10 <HAL_GPIO_WritePin>
} // End PCD_WriteRegister()
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd90      	pop	{r4, r7, pc}
 80006ec:	40020400 	.word	0x40020400
 80006f0:	2000000c 	.word	0x2000000c
 80006f4:	20000234 	.word	0x20000234

080006f8 <PCD_ReadRegister>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte PCD_ReadRegister(	PCD_Register reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	byte value;
	CS_LOW;			// Select slave
 8000702:	2200      	movs	r2, #0
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	4812      	ldr	r0, [pc, #72]	; (8000750 <PCD_ReadRegister+0x58>)
 8000708:	f002 fb82 	bl	8002e10 <HAL_GPIO_WritePin>
	byte rege = 0x80 | reg ;
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000712:	b2db      	uxtb	r3, r3
 8000714:	73bb      	strb	r3, [r7, #14]
	SPI.transfer(&hspi1,&rege,1,500);					// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <PCD_ReadRegister+0x5c>)
 8000718:	681c      	ldr	r4, [r3, #0]
 800071a:	f107 010e 	add.w	r1, r7, #14
 800071e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000722:	2201      	movs	r2, #1
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <PCD_ReadRegister+0x60>)
 8000726:	47a0      	blx	r4
	SPI.recive(&hspi1,&value,1,500);					// Read the value back. Send 0 to stop reading.
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <PCD_ReadRegister+0x5c>)
 800072a:	685c      	ldr	r4, [r3, #4]
 800072c:	f107 010f 	add.w	r1, r7, #15
 8000730:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000734:	2201      	movs	r2, #1
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <PCD_ReadRegister+0x60>)
 8000738:	47a0      	blx	r4
	CS_HIGH;			// Release slave again
 800073a:	2201      	movs	r2, #1
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <PCD_ReadRegister+0x58>)
 8000740:	f002 fb66 	bl	8002e10 <HAL_GPIO_WritePin>
	return value;
 8000744:	7bfb      	ldrb	r3, [r7, #15]
} // End PCD_ReadRegister()
 8000746:	4618      	mov	r0, r3
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	bf00      	nop
 8000750:	40020400 	.word	0x40020400
 8000754:	2000000c 	.word	0x2000000c
 8000758:	20000234 	.word	0x20000234

0800075c <PCD_ReadRegisterMany>:
 */
void PCD_ReadRegisterMany(	PCD_Register reg,	///< The register to read from. One of the PCD_Register enums.
								byte count,			///< The number of bytes to read
								byte *values,		///< Byte array to store the values in.
								byte rxAlign		///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b087      	sub	sp, #28
 8000760:	af02      	add	r7, sp, #8
 8000762:	603a      	str	r2, [r7, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	460b      	mov	r3, r1
 800076c:	71bb      	strb	r3, [r7, #6]
 800076e:	4613      	mov	r3, r2
 8000770:	717b      	strb	r3, [r7, #5]
	if (count == 0) {
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d06f      	beq.n	8000858 <PCD_ReadRegisterMany+0xfc>
		return;
	}
	//Serial.print("Reading ",STR); 	Serial.print(count); Serial.print(" bytes from register.",STR);
	byte address = 0x80 | reg;				// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800077e:	b2db      	uxtb	r3, r3
 8000780:	733b      	strb	r3, [r7, #12]
	byte index = 0;							// Index in values array.
 8000782:	2300      	movs	r3, #0
 8000784:	73fb      	strb	r3, [r7, #15]
	//            SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK, MSBFIRST, SPI_MODE0));	// Set the settings to work with SPI bus
	CS_LOW;		// Select slave
 8000786:	2200      	movs	r2, #0
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	4835      	ldr	r0, [pc, #212]	; (8000860 <PCD_ReadRegisterMany+0x104>)
 800078c:	f002 fb40 	bl	8002e10 <HAL_GPIO_WritePin>
	count--;								// One read is performed outside of the loop
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	3b01      	subs	r3, #1
 8000794:	71bb      	strb	r3, [r7, #6]
	SPI.transfer(&hspi1,&address,1,500);					// Tell MFRC522 which address we want to read
 8000796:	4b33      	ldr	r3, [pc, #204]	; (8000864 <PCD_ReadRegisterMany+0x108>)
 8000798:	681c      	ldr	r4, [r3, #0]
 800079a:	f107 010c 	add.w	r1, r7, #12
 800079e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007a2:	2201      	movs	r2, #1
 80007a4:	4830      	ldr	r0, [pc, #192]	; (8000868 <PCD_ReadRegisterMany+0x10c>)
 80007a6:	47a0      	blx	r4
	if (rxAlign) {		// Only update bit positions rxAlign..7 in values[0]
 80007a8:	797b      	ldrb	r3, [r7, #5]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d03c      	beq.n	8000828 <PCD_ReadRegisterMany+0xcc>
		// Create bit mask for bit positions rxAlign..7
		byte mask = (0xFF << rxAlign) & 0xFF;
 80007ae:	797b      	ldrb	r3, [r7, #5]
 80007b0:	22ff      	movs	r2, #255	; 0xff
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
		// Read value and tell that we want to read the same address again.
		byte value;
		SPI.transmitRecive(&hspi1,&address,&value,2,500);
 80007b8:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <PCD_ReadRegisterMany+0x108>)
 80007ba:	689c      	ldr	r4, [r3, #8]
 80007bc:	f107 020b 	add.w	r2, r7, #11
 80007c0:	f107 010c 	add.w	r1, r7, #12
 80007c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2302      	movs	r3, #2
 80007cc:	4826      	ldr	r0, [pc, #152]	; (8000868 <PCD_ReadRegisterMany+0x10c>)
 80007ce:	47a0      	blx	r4
		// Apply mask to both current value of values[0] and the new data in value.
		values[0] = (values[0] & ~mask) | (value & mask);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b25a      	sxtb	r2, r3
 80007d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007da:	43db      	mvns	r3, r3
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	4013      	ands	r3, r2
 80007e0:	b25a      	sxtb	r2, r3
 80007e2:	7af9      	ldrb	r1, [r7, #11]
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	400b      	ands	r3, r1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	701a      	strb	r2, [r3, #0]
		index++;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	3301      	adds	r3, #1
 80007fa:	73fb      	strb	r3, [r7, #15]
	}
	while (index < count) {
 80007fc:	e014      	b.n	8000828 <PCD_ReadRegisterMany+0xcc>
		byte addressBuff = address;
 80007fe:	7b3b      	ldrb	r3, [r7, #12]
 8000800:	737b      	strb	r3, [r7, #13]

//		SPI.transfer(&hspi1,&address,1,500);
		SPI.recive(&hspi1,&address,1,500);
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <PCD_ReadRegisterMany+0x108>)
 8000804:	685c      	ldr	r4, [r3, #4]
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800080e:	2201      	movs	r2, #1
 8000810:	4815      	ldr	r0, [pc, #84]	; (8000868 <PCD_ReadRegisterMany+0x10c>)
 8000812:	47a0      	blx	r4
		values[index] = address;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	4413      	add	r3, r2
 800081a:	7b3a      	ldrb	r2, [r7, #12]
 800081c:	701a      	strb	r2, [r3, #0]
		address = addressBuff;
 800081e:	7b7b      	ldrb	r3, [r7, #13]
 8000820:	733b      	strb	r3, [r7, #12]
		//SPI.transmitRecive(&hspi1,&address,&values[index],2,500);
		//values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
		index++;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	3301      	adds	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
	while (index < count) {
 8000828:	7bfa      	ldrb	r2, [r7, #15]
 800082a:	79bb      	ldrb	r3, [r7, #6]
 800082c:	429a      	cmp	r2, r3
 800082e:	d3e6      	bcc.n	80007fe <PCD_ReadRegisterMany+0xa2>
	}
//	SPI.transfer(&hspi1,&address,1,500);
	SPI.recive(&hspi1,&address,1,500);
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <PCD_ReadRegisterMany+0x108>)
 8000832:	685c      	ldr	r4, [r3, #4]
 8000834:	f107 010c 	add.w	r1, r7, #12
 8000838:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800083c:	2201      	movs	r2, #1
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <PCD_ReadRegisterMany+0x10c>)
 8000840:	47a0      	blx	r4
	values[index] = address;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	4413      	add	r3, r2
 8000848:	7b3a      	ldrb	r2, [r7, #12]
 800084a:	701a      	strb	r2, [r3, #0]
//	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
	CS_HIGH;			// Release slave again
 800084c:	2201      	movs	r2, #1
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <PCD_ReadRegisterMany+0x104>)
 8000852:	f002 fadd 	bl	8002e10 <HAL_GPIO_WritePin>
 8000856:	e000      	b.n	800085a <PCD_ReadRegisterMany+0xfe>
		return;
 8000858:	bf00      	nop
//            SPI.endTransaction(); // Stop using the SPI bus
} // End PCD_ReadRegister()
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	40020400 	.word	0x40020400
 8000864:	2000000c 	.word	0x2000000c
 8000868:	20000234 	.word	0x20000234

0800086c <PCD_SetRegisterBitMask>:
/**
 * Sets the bits given in mask in register reg.
 */
void PCD_SetRegisterBitMask(	PCD_Register reg,	///< The register to update. One of the PCD_Register enums.
										byte mask			///< The bits to set.
									) { 
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	71bb      	strb	r3, [r7, #6]
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff3a 	bl	80006f8 <PCD_ReadRegister>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 8000888:	7bfa      	ldrb	r2, [r7, #15]
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	4313      	orrs	r3, r2
 800088e:	b2da      	uxtb	r2, r3
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fecb 	bl	8000630 <PCD_WriteRegister>
} // End PCD_SetRegisterBitMask()
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <PCD_ClearRegisterBitMask>:
/**
 * Clears the bits given in mask from register reg.
 */
void PCD_ClearRegisterBitMask(	PCD_Register reg,	///< The register to update. One of the PCD_Register enums.
										byte mask			///< The bits to clear.
									  ) {
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b084      	sub	sp, #16
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	460a      	mov	r2, r1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	4613      	mov	r3, r2
 80008b0:	71bb      	strb	r3, [r7, #6]
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff1f 	bl	80006f8 <PCD_ReadRegister>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80008be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008c2:	43db      	mvns	r3, r3
 80008c4:	b25a      	sxtb	r2, r3
 80008c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ca:	4013      	ands	r3, r2
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff feab 	bl	8000630 <PCD_WriteRegister>
} // End PCD_ClearRegisterBitMask()
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <PCD_CalculateCRC>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
												byte length,	///< In: The number of bytes to transfer.
												byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80008e2:	b590      	push	{r4, r7, lr}
 80008e4:	b087      	sub	sp, #28
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	460b      	mov	r3, r1
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	72fb      	strb	r3, [r7, #11]
	PCD_WriteRegister(CommandReg, PCD_Idle);		// Stop any active command.
 80008f0:	2100      	movs	r1, #0
 80008f2:	2002      	movs	r0, #2
 80008f4:	f7ff fe9c 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegister(DivIrqReg, 0x04);				// Clear the CRCIRq interrupt request bit
 80008f8:	2104      	movs	r1, #4
 80008fa:	200a      	movs	r0, #10
 80008fc:	f7ff fe98 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegister(FIFOLevelReg, 0x80);			// FlushBuffer = 1, FIFO initialization
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	2014      	movs	r0, #20
 8000904:	f7ff fe94 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegisterMany(FIFODataReg, length, data);	// Write data to the FIFO
 8000908:	7afb      	ldrb	r3, [r7, #11]
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4619      	mov	r1, r3
 800090e:	2012      	movs	r0, #18
 8000910:	f7ff feba 	bl	8000688 <PCD_WriteRegisterMany>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 8000914:	2103      	movs	r1, #3
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff fe8a 	bl	8000630 <PCD_WriteRegister>
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73μs.
	// TODO check/modify for other architectures than Arduino Uno 16bit

	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73us.
	for (uint16_t i = 5000; i > 0; i--) {
 800091c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000920:	82fb      	strh	r3, [r7, #22]
 8000922:	e020      	b.n	8000966 <PCD_CalculateCRC+0x84>
		// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq reserved CRCIRq reserved reserved
		byte n = PCD_ReadRegister(DivIrqReg);
 8000924:	200a      	movs	r0, #10
 8000926:	f7ff fee7 	bl	80006f8 <PCD_ReadRegister>
 800092a:	4603      	mov	r3, r0
 800092c:	757b      	strb	r3, [r7, #21]
		if (n & 0x04) {									// CRCIRq bit set - calculation done
 800092e:	7d7b      	ldrb	r3, [r7, #21]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	2b00      	cmp	r3, #0
 8000936:	d013      	beq.n	8000960 <PCD_CalculateCRC+0x7e>
			PCD_WriteRegister(CommandReg, PCD_Idle);	// Stop calculating CRC for new content in the FIFO.
 8000938:	2100      	movs	r1, #0
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff fe78 	bl	8000630 <PCD_WriteRegister>
			// Transfer the result from the registers to the result buffer
			result[0] = PCD_ReadRegister(CRCResultRegL);
 8000940:	2044      	movs	r0, #68	; 0x44
 8000942:	f7ff fed9 	bl	80006f8 <PCD_ReadRegister>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	701a      	strb	r2, [r3, #0]
			result[1] = PCD_ReadRegister(CRCResultRegH);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	1c5c      	adds	r4, r3, #1
 8000952:	2042      	movs	r0, #66	; 0x42
 8000954:	f7ff fed0 	bl	80006f8 <PCD_ReadRegister>
 8000958:	4603      	mov	r3, r0
 800095a:	7023      	strb	r3, [r4, #0]
			return STATUS_OK;
 800095c:	2300      	movs	r3, #0
 800095e:	e006      	b.n	800096e <PCD_CalculateCRC+0x8c>
	for (uint16_t i = 5000; i > 0; i--) {
 8000960:	8afb      	ldrh	r3, [r7, #22]
 8000962:	3b01      	subs	r3, #1
 8000964:	82fb      	strh	r3, [r7, #22]
 8000966:	8afb      	ldrh	r3, [r7, #22]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1db      	bne.n	8000924 <PCD_CalculateCRC+0x42>
		}
	}
	// 89ms passed and nothing happend. Communication with the MFRC522 might be down.
	return STATUS_TIMEOUT;
 800096c:	2303      	movs	r3, #3
} // End PCD_CalculateCRC()
 800096e:	4618      	mov	r0, r3
 8000970:	371c      	adds	r7, #28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd90      	pop	{r4, r7, pc}
	...

08000978 <PCD_Init>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void PCD_Init() {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
	boolean hardReset = false;
 800097e:	2300      	movs	r3, #0
 8000980:	71fb      	strb	r3, [r7, #7]

	// Set the chipSelectPin as digital output, do not select the slave yet
	CS_OUTPUT;
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	482b      	ldr	r0, [pc, #172]	; (8000a34 <PCD_Init+0xbc>)
 8000986:	f001 fb91 	bl	80020ac <PIN_OUTPUT>
	CS_HIGH;
 800098a:	2201      	movs	r2, #1
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	4829      	ldr	r0, [pc, #164]	; (8000a34 <PCD_Init+0xbc>)
 8000990:	f002 fa3e 	bl	8002e10 <HAL_GPIO_WritePin>
	
	// If a valid pin number has been set, pull device out of power down / reset state.
//	if (_resetPowerDownPin != UNUSED_PIN) {
		// First set the resetPowerDownPin as digital input, to check the MFRC522 power down mode.
		RESET_INPUT;
 8000994:	2140      	movs	r1, #64	; 0x40
 8000996:	4827      	ldr	r0, [pc, #156]	; (8000a34 <PCD_Init+0xbc>)
 8000998:	f001 fb72 	bl	8002080 <PIN_INPUT>
	
		if (RESET_GET_VALUE() == LOW) {	// The MFRC522 chip is in power down mode.
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	4825      	ldr	r0, [pc, #148]	; (8000a34 <PCD_Init+0xbc>)
 80009a0:	f002 fa1e 	bl	8002de0 <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d115      	bne.n	80009d6 <PCD_Init+0x5e>
			RESET_OUTPUT;		// Now set the resetPowerDownPin as digital output.
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	4821      	ldr	r0, [pc, #132]	; (8000a34 <PCD_Init+0xbc>)
 80009ae:	f001 fb7d 	bl	80020ac <PIN_OUTPUT>
			RESET_LOW;		// Make sure we have a clean LOW state.
 80009b2:	2200      	movs	r2, #0
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	481f      	ldr	r0, [pc, #124]	; (8000a34 <PCD_Init+0xbc>)
 80009b8:	f002 fa2a 	bl	8002e10 <HAL_GPIO_WritePin>
			delayMicroseconds(2);				// 8.8.1 Reset timing requirements says about 100ns. Let us be generous: 2μsl
 80009bc:	2002      	movs	r0, #2
 80009be:	f7ff fde7 	bl	8000590 <DWT_Delay_us>
			RESET_HIGH;		// Exit power down mode. This triggers a hard reset.
 80009c2:	2201      	movs	r2, #1
 80009c4:	2140      	movs	r1, #64	; 0x40
 80009c6:	481b      	ldr	r0, [pc, #108]	; (8000a34 <PCD_Init+0xbc>)
 80009c8:	f002 fa22 	bl	8002e10 <HAL_GPIO_WritePin>
			// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74μs. Let us be generous: 50ms.
			delay(50);
 80009cc:	2032      	movs	r0, #50	; 0x32
 80009ce:	f7ff fe05 	bl	80005dc <DWT_Delay_ms>
			hardReset = true;
 80009d2:	2301      	movs	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
		}
//	}

	if (!hardReset) { // Perform a soft reset if we haven't triggered a hard reset above.
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d101      	bne.n	80009e0 <PCD_Init+0x68>
		PCD_Reset();
 80009dc:	f000 f82c 	bl	8000a38 <PCD_Reset>
	}
	
	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
 80009e0:	2100      	movs	r1, #0
 80009e2:	2024      	movs	r0, #36	; 0x24
 80009e4:	f7ff fe24 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegister(RxModeReg, 0x00);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2026      	movs	r0, #38	; 0x26
 80009ec:	f7ff fe20 	bl	8000630 <PCD_WriteRegister>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
 80009f0:	2126      	movs	r1, #38	; 0x26
 80009f2:	2048      	movs	r0, #72	; 0x48
 80009f4:	f7ff fe1c 	bl	8000630 <PCD_WriteRegister>

	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	2054      	movs	r0, #84	; 0x54
 80009fc:	f7ff fe18 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegister(TPrescalerReg, 0xA9);		// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25μs.
 8000a00:	21a9      	movs	r1, #169	; 0xa9
 8000a02:	2056      	movs	r0, #86	; 0x56
 8000a04:	f7ff fe14 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 8000a08:	2103      	movs	r1, #3
 8000a0a:	2058      	movs	r0, #88	; 0x58
 8000a0c:	f7ff fe10 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegister(TReloadRegL, 0xE8);
 8000a10:	21e8      	movs	r1, #232	; 0xe8
 8000a12:	205a      	movs	r0, #90	; 0x5a
 8000a14:	f7ff fe0c 	bl	8000630 <PCD_WriteRegister>
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	202a      	movs	r0, #42	; 0x2a
 8000a1c:	f7ff fe08 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 8000a20:	213d      	movs	r1, #61	; 0x3d
 8000a22:	2022      	movs	r0, #34	; 0x22
 8000a24:	f7ff fe04 	bl	8000630 <PCD_WriteRegister>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 8000a28:	f000 f824 	bl	8000a74 <PCD_AntennaOn>
} // End PCD_Init()
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40020400 	.word	0x40020400

08000a38 <PCD_Reset>:

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void PCD_Reset() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 8000a3e:	210f      	movs	r1, #15
 8000a40:	2002      	movs	r0, #2
 8000a42:	f7ff fdf5 	bl	8000630 <PCD_WriteRegister>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74μs. Let us be generous: 50ms.
	uint8_t count = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]
	do {
		// Wait for the PowerDown bit in CommandReg to be cleared (max 3x50ms)
		delay(50);
 8000a4a:	2032      	movs	r0, #50	; 0x32
 8000a4c:	f7ff fdc6 	bl	80005dc <DWT_Delay_ms>
	} while ((PCD_ReadRegister(CommandReg) & (1 << 4)) && (++count) < 3);
 8000a50:	2002      	movs	r0, #2
 8000a52:	f7ff fe51 	bl	80006f8 <PCD_ReadRegister>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d005      	beq.n	8000a6c <PCD_Reset+0x34>
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	3301      	adds	r3, #1
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d9ee      	bls.n	8000a4a <PCD_Reset+0x12>
} // End PCD_Reset()
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <PCD_AntennaOn>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins are disabled.
 */
void PCD_AntennaOn() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	byte value = PCD_ReadRegister(TxControlReg);
 8000a7a:	2028      	movs	r0, #40	; 0x28
 8000a7c:	f7ff fe3c 	bl	80006f8 <PCD_ReadRegister>
 8000a80:	4603      	mov	r3, r0
 8000a82:	71fb      	strb	r3, [r7, #7]
	if ((value & 0x03) != 0x03) {
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d007      	beq.n	8000a9e <PCD_AntennaOn+0x2a>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f043 0303 	orr.w	r3, r3, #3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4619      	mov	r1, r3
 8000a98:	2028      	movs	r0, #40	; 0x28
 8000a9a:	f7ff fdc9 	bl	8000630 <PCD_WriteRegister>
	}
} // End PCD_AntennaOn()
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <PCD_TransceiveData>:
													byte *backData,		///< nullptr or pointer to buffer if data should be read back after executing the command.
													byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
													byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits. Default nullptr.
													byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
													boolean checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
								 ) {
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b08c      	sub	sp, #48	; 0x30
 8000aaa:	af06      	add	r7, sp, #24
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	72fb      	strb	r3, [r7, #11]
	byte waitIRq = 0x30;		// RxIRq and IdleIRq
 8000ab6:	2330      	movs	r3, #48	; 0x30
 8000ab8:	75fb      	strb	r3, [r7, #23]
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 8000aba:	7afa      	ldrb	r2, [r7, #11]
 8000abc:	7df9      	ldrb	r1, [r7, #23]
 8000abe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ac2:	9304      	str	r3, [sp, #16]
 8000ac4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ac8:	9303      	str	r3, [sp, #12]
 8000aca:	6a3b      	ldr	r3, [r7, #32]
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	200c      	movs	r0, #12
 8000adc:	f000 f805 	bl	8000aea <PCD_CommunicateWithPICC>
 8000ae0:	4603      	mov	r3, r0
} // End PCD_TransceiveData()
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <PCD_CommunicateWithPICC>:
														byte *backData,		///< nullptr or pointer to buffer if data should be read back after executing the command.
														byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
														byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
														byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
														boolean checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	603a      	str	r2, [r7, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	460b      	mov	r3, r1
 8000afa:	71bb      	strb	r3, [r7, #6]
 8000afc:	4613      	mov	r3, r2
 8000afe:	717b      	strb	r3, [r7, #5]
	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 8000b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <PCD_CommunicateWithPICC+0x22>
 8000b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	e000      	b.n	8000b0e <PCD_CommunicateWithPICC+0x24>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	753b      	strb	r3, [r7, #20]
	byte bitFraming = (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8000b10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	7d3b      	ldrb	r3, [r7, #20]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	74fb      	strb	r3, [r7, #19]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2002      	movs	r0, #2
 8000b22:	f7ff fd85 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 8000b26:	217f      	movs	r1, #127	; 0x7f
 8000b28:	2008      	movs	r0, #8
 8000b2a:	f7ff fd81 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegister(FIFOLevelReg, 0x80);				// FlushBuffer = 1, FIFO initialization
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	2014      	movs	r0, #20
 8000b32:	f7ff fd7d 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegisterMany(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 8000b36:	797b      	ldrb	r3, [r7, #5]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	2012      	movs	r0, #18
 8000b3e:	f7ff fda3 	bl	8000688 <PCD_WriteRegisterMany>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 8000b42:	7cfb      	ldrb	r3, [r7, #19]
 8000b44:	4619      	mov	r1, r3
 8000b46:	201a      	movs	r0, #26
 8000b48:	f7ff fd72 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegister(CommandReg, command);				// Execute the command
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	2002      	movs	r0, #2
 8000b52:	f7ff fd6d 	bl	8000630 <PCD_WriteRegister>
	if (command == PCD_Transceive) {
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b0c      	cmp	r3, #12
 8000b5a:	d103      	bne.n	8000b64 <PCD_CommunicateWithPICC+0x7a>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	201a      	movs	r0, #26
 8000b60:	f7ff fe84 	bl	800086c <PCD_SetRegisterBitMask>
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86μs.
	// TODO check/modify for other architectures than Arduino Uno 16bit
	uint16_t i;
	for (i = 2000; i > 0; i--) {
 8000b64:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b68:	82fb      	strh	r3, [r7, #22]
 8000b6a:	e014      	b.n	8000b96 <PCD_CommunicateWithPICC+0xac>
		byte n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 8000b6c:	2008      	movs	r0, #8
 8000b6e:	f7ff fdc3 	bl	80006f8 <PCD_ReadRegister>
 8000b72:	4603      	mov	r3, r0
 8000b74:	74bb      	strb	r3, [r7, #18]
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 8000b76:	7cba      	ldrb	r2, [r7, #18]
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10d      	bne.n	8000b9e <PCD_CommunicateWithPICC+0xb4>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 8000b82:	7cbb      	ldrb	r3, [r7, #18]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <PCD_CommunicateWithPICC+0xa6>
			return STATUS_TIMEOUT;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	e08c      	b.n	8000caa <PCD_CommunicateWithPICC+0x1c0>
	for (i = 2000; i > 0; i--) {
 8000b90:	8afb      	ldrh	r3, [r7, #22]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	82fb      	strh	r3, [r7, #22]
 8000b96:	8afb      	ldrh	r3, [r7, #22]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1e7      	bne.n	8000b6c <PCD_CommunicateWithPICC+0x82>
 8000b9c:	e000      	b.n	8000ba0 <PCD_CommunicateWithPICC+0xb6>
			break;
 8000b9e:	bf00      	nop
		}
	}
	// 35.7ms and nothing happend. Communication with the MFRC522 might be down.
	if (i == 0) {
 8000ba0:	8afb      	ldrh	r3, [r7, #22]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <PCD_CommunicateWithPICC+0xc0>
		return STATUS_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e07f      	b.n	8000caa <PCD_CommunicateWithPICC+0x1c0>
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl CollErr CRCErr ParityErr ProtocolErr
 8000baa:	200c      	movs	r0, #12
 8000bac:	f7ff fda4 	bl	80006f8 <PCD_ReadRegister>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	747b      	strb	r3, [r7, #17]
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 8000bb4:	7c7b      	ldrb	r3, [r7, #17]
 8000bb6:	f003 0313 	and.w	r3, r3, #19
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <PCD_CommunicateWithPICC+0xd8>
		return STATUS_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e073      	b.n	8000caa <PCD_CommunicateWithPICC+0x1c0>
	}
  
	byte _validBits = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	757b      	strb	r3, [r7, #21]
	
	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d025      	beq.n	8000c18 <PCD_CommunicateWithPICC+0x12e>
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d022      	beq.n	8000c18 <PCD_CommunicateWithPICC+0x12e>
		byte n = PCD_ReadRegister(FIFOLevelReg);	// Number of bytes in the FIFO
 8000bd2:	2014      	movs	r0, #20
 8000bd4:	f7ff fd90 	bl	80006f8 <PCD_ReadRegister>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	743b      	strb	r3, [r7, #16]
		if (n > *backLen) {
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	7c3a      	ldrb	r2, [r7, #16]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d901      	bls.n	8000bea <PCD_CommunicateWithPICC+0x100>
			return STATUS_NO_ROOM;
 8000be6:	2304      	movs	r3, #4
 8000be8:	e05f      	b.n	8000caa <PCD_CommunicateWithPICC+0x1c0>
		}
		*backLen = n;											// Number of bytes returned
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	7c3a      	ldrb	r2, [r7, #16]
 8000bee:	701a      	strb	r2, [r3, #0]
		PCD_ReadRegisterMany(FIFODataReg, n, backData, rxAlign);	// Get received data from FIFO
 8000bf0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bf4:	7c39      	ldrb	r1, [r7, #16]
 8000bf6:	6a3a      	ldr	r2, [r7, #32]
 8000bf8:	2012      	movs	r0, #18
 8000bfa:	f7ff fdaf 	bl	800075c <PCD_ReadRegisterMany>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;		// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
 8000bfe:	2018      	movs	r0, #24
 8000c00:	f7ff fd7a 	bl	80006f8 <PCD_ReadRegister>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	757b      	strb	r3, [r7, #21]
		if (validBits) {
 8000c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <PCD_CommunicateWithPICC+0x12e>
			*validBits = _validBits;
 8000c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c14:	7d7a      	ldrb	r2, [r7, #21]
 8000c16:	701a      	strb	r2, [r3, #0]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) {		// CollErr
 8000c18:	7c7b      	ldrb	r3, [r7, #17]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <PCD_CommunicateWithPICC+0x13c>
		return STATUS_COLLISION;
 8000c22:	2302      	movs	r3, #2
 8000c24:	e041      	b.n	8000caa <PCD_CommunicateWithPICC+0x1c0>
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d03d      	beq.n	8000ca8 <PCD_CommunicateWithPICC+0x1be>
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d03a      	beq.n	8000ca8 <PCD_CommunicateWithPICC+0x1be>
 8000c32:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d036      	beq.n	8000ca8 <PCD_CommunicateWithPICC+0x1be>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d104      	bne.n	8000c4c <PCD_CommunicateWithPICC+0x162>
 8000c42:	7d7b      	ldrb	r3, [r7, #21]
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d101      	bne.n	8000c4c <PCD_CommunicateWithPICC+0x162>
			return STATUS_MIFARE_NACK;
 8000c48:	23ff      	movs	r3, #255	; 0xff
 8000c4a:	e02e      	b.n	8000caa <PCD_CommunicateWithPICC+0x1c0>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d902      	bls.n	8000c5a <PCD_CommunicateWithPICC+0x170>
 8000c54:	7d7b      	ldrb	r3, [r7, #21]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <PCD_CommunicateWithPICC+0x174>
			return STATUS_CRC_WRONG;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	e025      	b.n	8000caa <PCD_CommunicateWithPICC+0x1c0>
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2];
		StatusCode status = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	3b02      	subs	r3, #2
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f107 020c 	add.w	r2, r7, #12
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	6a38      	ldr	r0, [r7, #32]
 8000c6e:	f7ff fe38 	bl	80008e2 <PCD_CalculateCRC>
 8000c72:	4603      	mov	r3, r0
 8000c74:	73fb      	strb	r3, [r7, #15]
		if (status != STATUS_OK) {
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <PCD_CommunicateWithPICC+0x196>
			return status;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	e014      	b.n	8000caa <PCD_CommunicateWithPICC+0x1c0>
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3b02      	subs	r3, #2
 8000c86:	6a3a      	ldr	r2, [r7, #32]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	7b3b      	ldrb	r3, [r7, #12]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d108      	bne.n	8000ca4 <PCD_CommunicateWithPICC+0x1ba>
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6a3a      	ldr	r2, [r7, #32]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d001      	beq.n	8000ca8 <PCD_CommunicateWithPICC+0x1be>
			return STATUS_CRC_WRONG;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	e000      	b.n	8000caa <PCD_CommunicateWithPICC+0x1c0>
		}
	}
	
	return STATUS_OK;
 8000ca8:	2300      	movs	r3, #0
} // End PCD_CommunicateWithPICC()
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <PICC_RequestA>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode PICC_RequestA(	byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2026      	movs	r0, #38	; 0x26
 8000cc2:	f000 f805 	bl	8000cd0 <PICC_REQA_or_WUPA>
 8000cc6:	4603      	mov	r3, r0
} // End PICC_RequestA()
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <PICC_REQA_or_WUPA>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
StatusCode PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
												byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
												byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
											) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af04      	add	r7, sp, #16
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	73fb      	strb	r3, [r7, #15]
	byte validBits;
	StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <PICC_REQA_or_WUPA+0x1c>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d801      	bhi.n	8000cf0 <PICC_REQA_or_WUPA+0x20>
		return STATUS_NO_ROOM;
 8000cec:	2304      	movs	r3, #4
 8000cee:	e024      	b.n	8000d3a <PICC_REQA_or_WUPA+0x6a>
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	201c      	movs	r0, #28
 8000cf4:	f7ff fdd5 	bl	80008a2 <PCD_ClearRegisterBitMask>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	75bb      	strb	r3, [r7, #22]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits,0,false);
 8000cfc:	f107 000f 	add.w	r0, r7, #15
 8000d00:	2300      	movs	r3, #0
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	2300      	movs	r3, #0
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	f107 0316 	add.w	r3, r7, #22
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	2101      	movs	r1, #1
 8000d14:	f7ff fec7 	bl	8000aa6 <PCD_TransceiveData>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	75fb      	strb	r3, [r7, #23]
	if (status != STATUS_OK) {
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <PICC_REQA_or_WUPA+0x56>
		return status;
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
 8000d24:	e009      	b.n	8000d3a <PICC_REQA_or_WUPA+0x6a>
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d102      	bne.n	8000d34 <PICC_REQA_or_WUPA+0x64>
 8000d2e:	7dbb      	ldrb	r3, [r7, #22]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <PICC_REQA_or_WUPA+0x68>
		return STATUS_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <PICC_REQA_or_WUPA+0x6a>
	}
	return STATUS_OK;
 8000d38:	2300      	movs	r3, #0
} // End PICC_REQA_or_WUPA()
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <PICC_Select>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
											byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
										 ) {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b090      	sub	sp, #64	; 0x40
 8000d46:	af04      	add	r7, sp, #16
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	70fb      	strb	r3, [r7, #3]
	boolean uidComplete;
	boolean selectDone;
	boolean useCascadeTag;
	byte cascadeLevel = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	2b50      	cmp	r3, #80	; 0x50
 8000d58:	d901      	bls.n	8000d5e <PICC_Select+0x1c>
		return STATUS_INVALID;
 8000d5a:	2306      	movs	r3, #6
 8000d5c:	e22d      	b.n	80011ba <PICC_Select+0x478>
	}
	
	// Prepare MFRC522
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	201c      	movs	r0, #28
 8000d62:	f7ff fd9e 	bl	80008a2 <PCD_ClearRegisterBitMask>
	
	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while (!uidComplete) {
 8000d6c:	e215      	b.n	800119a <PICC_Select+0x458>
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
 8000d6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d015      	beq.n	8000da2 <PICC_Select+0x60>
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d025      	beq.n	8000dc6 <PICC_Select+0x84>
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d12c      	bne.n	8000dd8 <PICC_Select+0x96>
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
 8000d7e:	2393      	movs	r3, #147	; 0x93
 8000d80:	743b      	strb	r3, [r7, #16]
				uidIndex = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <PICC_Select+0x58>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d901      	bls.n	8000d9a <PICC_Select+0x58>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <PICC_Select+0x5a>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				break;
 8000da0:	e01c      	b.n	8000ddc <PICC_Select+0x9a>
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
 8000da2:	2395      	movs	r3, #149	; 0x95
 8000da4:	743b      	strb	r3, [r7, #16]
				uidIndex = 3;
 8000da6:	2303      	movs	r3, #3
 8000da8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <PICC_Select+0x7c>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b07      	cmp	r3, #7
 8000db8:	d901      	bls.n	8000dbe <PICC_Select+0x7c>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <PICC_Select+0x7e>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				break;
 8000dc4:	e00a      	b.n	8000ddc <PICC_Select+0x9a>
			
			case 3:
				buffer[0] = PICC_CMD_SEL_CL3;
 8000dc6:	2397      	movs	r3, #151	; 0x97
 8000dc8:	743b      	strb	r3, [r7, #16]
				uidIndex = 6;
 8000dca:	2306      	movs	r3, #6
 8000dcc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				useCascadeTag = false;						// Never used in CL3.
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				break;
 8000dd6:	e001      	b.n	8000ddc <PICC_Select+0x9a>
			
			default:
				return STATUS_INTERNAL_ERROR;
 8000dd8:	2305      	movs	r3, #5
 8000dda:	e1ee      	b.n	80011ba <PICC_Select+0x478>
				break;
		}
		
		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
 8000ddc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	78fa      	ldrb	r2, [r7, #3]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		if (currentLevelKnownBits < 0) {
 8000dee:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da02      	bge.n	8000dfc <PICC_Select+0xba>
			currentLevelKnownBits = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		if (useCascadeTag) {
 8000e02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00a      	beq.n	8000e20 <PICC_Select+0xde>
			buffer[index++] = PICC_CMD_CT;
 8000e0a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
 8000e14:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e18:	4413      	add	r3, r2
 8000e1a:	2288      	movs	r2, #136	; 0x88
 8000e1c:	f803 2c20 	strb.w	r2, [r3, #-32]
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 8000e20:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da00      	bge.n	8000e2a <PICC_Select+0xe8>
 8000e28:	3307      	adds	r3, #7
 8000e2a:	10db      	asrs	r3, r3, #3
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e34:	f002 0207 	and.w	r2, r2, #7
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	2a00      	cmp	r2, #0
 8000e3c:	bf14      	ite	ne
 8000e3e:	2201      	movne	r2, #1
 8000e40:	2200      	moveq	r2, #0
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	4413      	add	r3, r2
 8000e46:	77fb      	strb	r3, [r7, #31]
		if (bytesToCopy) {
 8000e48:	7ffb      	ldrb	r3, [r7, #31]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d02e      	beq.n	8000eac <PICC_Select+0x16a>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 8000e4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <PICC_Select+0x118>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e000      	b.n	8000e5c <PICC_Select+0x11a>
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	777b      	strb	r3, [r7, #29]
			if (bytesToCopy > maxBytes) {
 8000e5e:	7ffa      	ldrb	r2, [r7, #31]
 8000e60:	7f7b      	ldrb	r3, [r7, #29]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d901      	bls.n	8000e6a <PICC_Select+0x128>
				bytesToCopy = maxBytes;
 8000e66:	7f7b      	ldrb	r3, [r7, #29]
 8000e68:	77fb      	strb	r3, [r7, #31]
			}
			for (count = 0; count < bytesToCopy; count++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000e70:	e017      	b.n	8000ea2 <PICC_Select+0x160>
				buffer[index++] = uid->uidByte[uidIndex + count];
 8000e72:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000e76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e7a:	441a      	add	r2, r3
 8000e7c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e80:	1c59      	adds	r1, r3, #1
 8000e82:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
 8000e86:	4619      	mov	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	785a      	ldrb	r2, [r3, #1]
 8000e8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e92:	440b      	add	r3, r1
 8000e94:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (count = 0; count < bytesToCopy; count++) {
 8000e98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000ea2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000ea6:	7ffb      	ldrb	r3, [r7, #31]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d3e2      	bcc.n	8000e72 <PICC_Select+0x130>
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
 8000eac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d005      	beq.n	8000ec0 <PICC_Select+0x17e>
			currentLevelKnownBits += 8;
 8000eb4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000eb8:	3308      	adds	r3, #8
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		}
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		while (!selectDone) {
 8000ec6:	e0fa      	b.n	80010be <PICC_Select+0x37c>
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 8000ec8:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8000ecc:	2b1f      	cmp	r3, #31
 8000ece:	dd28      	ble.n	8000f22 <PICC_Select+0x1e0>
				//Serial.print("SELECT: currentLevelKnownBits=",STR); Serial.print(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 8000ed0:	2370      	movs	r3, #112	; 0x70
 8000ed2:	747b      	strb	r3, [r7, #17]
				// Calculate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 8000ed4:	7cba      	ldrb	r2, [r7, #18]
 8000ed6:	7cfb      	ldrb	r3, [r7, #19]
 8000ed8:	4053      	eors	r3, r2
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	7d3b      	ldrb	r3, [r7, #20]
 8000ede:	4053      	eors	r3, r2
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	7d7b      	ldrb	r3, [r7, #21]
 8000ee4:	4053      	eors	r3, r2
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	75bb      	strb	r3, [r7, #22]
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	1dda      	adds	r2, r3, #7
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fcf3 	bl	80008e2 <PCD_CalculateCRC>
 8000efc:	4603      	mov	r3, r0
 8000efe:	773b      	strb	r3, [r7, #28]
				if (result != STATUS_OK) {
 8000f00:	7f3b      	ldrb	r3, [r7, #28]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <PICC_Select+0x1c8>
					return result;
 8000f06:	7f3b      	ldrb	r3, [r7, #28]
 8000f08:	e157      	b.n	80011ba <PICC_Select+0x478>
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
				bufferUsed		= 9;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	3306      	adds	r3, #6
 8000f1a:	623b      	str	r3, [r7, #32]
				responseLength	= 3;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	73bb      	strb	r3, [r7, #14]
 8000f20:	e039      	b.n	8000f96 <PICC_Select+0x254>
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits=",STR); Serial.print(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 8000f22:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8000f26:	425a      	negs	r2, r3
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	f002 0207 	and.w	r2, r2, #7
 8000f30:	bf58      	it	pl
 8000f32:	4253      	negpl	r3, r2
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	73fb      	strb	r3, [r7, #15]
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
 8000f3a:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da00      	bge.n	8000f44 <PICC_Select+0x202>
 8000f42:	3307      	adds	r3, #7
 8000f44:	10db      	asrs	r3, r3, #3
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 8000f4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f50:	3302      	adds	r3, #2
 8000f52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 8000f56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	4413      	add	r3, r2
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	747b      	strb	r3, [r7, #17]
				bufferUsed		= index + (txLastBits ? 1 : 0);
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bf14      	ite	ne
 8000f6c:	2301      	movne	r3, #1
 8000f6e:	2300      	moveq	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f78:	4413      	add	r3, r2
 8000f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
 8000f7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f82:	f107 0210 	add.w	r2, r7, #16
 8000f86:	4413      	add	r3, r2
 8000f88:	623b      	str	r3, [r7, #32]
				responseLength	= sizeof(buffer) - index;
 8000f8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f8e:	f1c3 0309 	rsb	r3, r3, #9
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	73bb      	strb	r3, [r7, #14]
			}
			
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a separate variable is overkill. But it makes the next line easier to read.
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	76fb      	strb	r3, [r7, #27]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8000f9a:	7efb      	ldrb	r3, [r7, #27]
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	201a      	movs	r0, #26
 8000faa:	f7ff fb41 	bl	8000630 <PCD_WriteRegister>
			
			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign,false);
 8000fae:	f107 020e 	add.w	r2, r7, #14
 8000fb2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8000fb6:	f107 0010 	add.w	r0, r7, #16
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	7efb      	ldrb	r3, [r7, #27]
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	f107 030f 	add.w	r3, r7, #15
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	6a3a      	ldr	r2, [r7, #32]
 8000fcc:	f7ff fd6b 	bl	8000aa6 <PCD_TransceiveData>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	773b      	strb	r3, [r7, #28]
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 8000fd4:	7f3b      	ldrb	r3, [r7, #28]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d161      	bne.n	800109e <PICC_Select+0x35c>
				byte valueOfCollReg = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 8000fda:	201c      	movs	r0, #28
 8000fdc:	f7ff fb8c 	bl	80006f8 <PCD_ReadRegister>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	76bb      	strb	r3, [r7, #26]
				if (valueOfCollReg & 0x20) { // CollPosNotValid
 8000fe4:	7ebb      	ldrb	r3, [r7, #26]
 8000fe6:	f003 0320 	and.w	r3, r3, #32
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <PICC_Select+0x2b0>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e0e3      	b.n	80011ba <PICC_Select+0x478>
				}
				byte collisionPos = valueOfCollReg & 0x1F; // Values 0-31, 0 means bit 32.
 8000ff2:	7ebb      	ldrb	r3, [r7, #26]
 8000ff4:	f003 031f 	and.w	r3, r3, #31
 8000ff8:	77bb      	strb	r3, [r7, #30]
				if (collisionPos == 0) {
 8000ffa:	7fbb      	ldrb	r3, [r7, #30]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <PICC_Select+0x2c2>
					collisionPos = 32;
 8001000:	2320      	movs	r3, #32
 8001002:	77bb      	strb	r3, [r7, #30]
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 8001004:	7fba      	ldrb	r2, [r7, #30]
 8001006:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 800100a:	429a      	cmp	r2, r3
 800100c:	dc01      	bgt.n	8001012 <PICC_Select+0x2d0>
					return STATUS_INTERNAL_ERROR;
 800100e:	2305      	movs	r3, #5
 8001010:	e0d3      	b.n	80011ba <PICC_Select+0x478>
				}
				// Choose the PICC with the bit set.
				currentLevelKnownBits	= collisionPos;
 8001012:	7fbb      	ldrb	r3, [r7, #30]
 8001014:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				count			= currentLevelKnownBits % 8; // The bit to modify
 8001018:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 800101c:	425a      	negs	r2, r3
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	f002 0207 	and.w	r2, r2, #7
 8001026:	bf58      	it	pl
 8001028:	4253      	negpl	r3, r2
 800102a:	b25b      	sxtb	r3, r3
 800102c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				checkBit		= (currentLevelKnownBits - 1) % 8;
 8001030:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001034:	3b01      	subs	r3, #1
 8001036:	425a      	negs	r2, r3
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	f002 0207 	and.w	r2, r2, #7
 8001040:	bf58      	it	pl
 8001042:	4253      	negpl	r3, r2
 8001044:	767b      	strb	r3, [r7, #25]
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
 8001046:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 800104a:	2b00      	cmp	r3, #0
 800104c:	da00      	bge.n	8001050 <PICC_Select+0x30e>
 800104e:	3307      	adds	r3, #7
 8001050:	10db      	asrs	r3, r3, #3
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800105a:	2a00      	cmp	r2, #0
 800105c:	bf14      	ite	ne
 800105e:	2201      	movne	r2, #1
 8001060:	2200      	moveq	r2, #0
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	4413      	add	r3, r2
 8001066:	b2db      	uxtb	r3, r3
 8001068:	3301      	adds	r3, #1
 800106a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				buffer[index]	|= (1 << checkBit);
 800106e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001072:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001076:	4413      	add	r3, r2
 8001078:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800107c:	b25a      	sxtb	r2, r3
 800107e:	7e7b      	ldrb	r3, [r7, #25]
 8001080:	2101      	movs	r1, #1
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	b25b      	sxtb	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b25a      	sxtb	r2, r3
 800108c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001096:	440b      	add	r3, r1
 8001098:	f803 2c20 	strb.w	r2, [r3, #-32]
 800109c:	e00f      	b.n	80010be <PICC_Select+0x37c>
			}
			else if (result != STATUS_OK) {
 800109e:	7f3b      	ldrb	r3, [r7, #28]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <PICC_Select+0x366>
				return result;
 80010a4:	7f3b      	ldrb	r3, [r7, #28]
 80010a6:	e088      	b.n	80011ba <PICC_Select+0x478>
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80010a8:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 80010ac:	2b1f      	cmp	r3, #31
 80010ae:	dd03      	ble.n	80010b8 <PICC_Select+0x376>
					selectDone = true; // No more anticollision 
 80010b0:	2301      	movs	r3, #1
 80010b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80010b6:	e002      	b.n	80010be <PICC_Select+0x37c>
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
 80010b8:	2320      	movs	r3, #32
 80010ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		while (!selectDone) {
 80010be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f43f af00 	beq.w	8000ec8 <PICC_Select+0x186>
		} // End of while (!selectDone)
		
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80010c8:	7cbb      	ldrb	r3, [r7, #18]
 80010ca:	2b88      	cmp	r3, #136	; 0x88
 80010cc:	d101      	bne.n	80010d2 <PICC_Select+0x390>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e000      	b.n	80010d4 <PICC_Select+0x392>
 80010d2:	2302      	movs	r3, #2
 80010d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80010d8:	7cbb      	ldrb	r3, [r7, #18]
 80010da:	2b88      	cmp	r3, #136	; 0x88
 80010dc:	d101      	bne.n	80010e2 <PICC_Select+0x3a0>
 80010de:	2303      	movs	r3, #3
 80010e0:	e000      	b.n	80010e4 <PICC_Select+0x3a2>
 80010e2:	2304      	movs	r3, #4
 80010e4:	77fb      	strb	r3, [r7, #31]
		for (count = 0; count < bytesToCopy; count++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010ec:	e018      	b.n	8001120 <PICC_Select+0x3de>
			uid->uidByte[uidIndex + count] = buffer[index++];
 80010ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
 80010f8:	4619      	mov	r1, r3
 80010fa:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80010fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001102:	4413      	add	r3, r2
 8001104:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001108:	440a      	add	r2, r1
 800110a:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	460a      	mov	r2, r1
 8001114:	705a      	strb	r2, [r3, #1]
		for (count = 0; count < bytesToCopy; count++) {
 8001116:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800111a:	3301      	adds	r3, #1
 800111c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001120:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001124:	7ffb      	ldrb	r3, [r7, #31]
 8001126:	429a      	cmp	r2, r3
 8001128:	d3e1      	bcc.n	80010ee <PICC_Select+0x3ac>
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) { // SAK must be exactly 24 bits (1 byte + CRC_A).
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d102      	bne.n	8001136 <PICC_Select+0x3f4>
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <PICC_Select+0x3f8>
			return STATUS_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e03f      	b.n	80011ba <PICC_Select+0x478>
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those bytes are not needed anymore.
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	3302      	adds	r3, #2
 8001140:	461a      	mov	r2, r3
 8001142:	2101      	movs	r1, #1
 8001144:	6a38      	ldr	r0, [r7, #32]
 8001146:	f7ff fbcc 	bl	80008e2 <PCD_CalculateCRC>
 800114a:	4603      	mov	r3, r0
 800114c:	773b      	strb	r3, [r7, #28]
		if (result != STATUS_OK) {
 800114e:	7f3b      	ldrb	r3, [r7, #28]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <PICC_Select+0x416>
			return result;
 8001154:	7f3b      	ldrb	r3, [r7, #28]
 8001156:	e030      	b.n	80011ba <PICC_Select+0x478>
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 8001158:	7cba      	ldrb	r2, [r7, #18]
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	3301      	adds	r3, #1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d105      	bne.n	8001170 <PICC_Select+0x42e>
 8001164:	7cfa      	ldrb	r2, [r7, #19]
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	3302      	adds	r3, #2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <PICC_Select+0x432>
			return STATUS_CRC_WRONG;
 8001170:	2307      	movs	r3, #7
 8001172:	e022      	b.n	80011ba <PICC_Select+0x478>
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <PICC_Select+0x44a>
			cascadeLevel++;
 8001180:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001184:	3301      	adds	r3, #1
 8001186:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800118a:	e006      	b.n	800119a <PICC_Select+0x458>
		}
		else {
			uidComplete = true;
 800118c:	2301      	movs	r3, #1
 800118e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uid->sak = responseBuffer[0];
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	72da      	strb	r2, [r3, #11]
	while (!uidComplete) {
 800119a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f43f ade5 	beq.w	8000d6e <PICC_Select+0x2c>
		}
	} // End of while (!uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 80011a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011a8:	461a      	mov	r2, r3
 80011aa:	0052      	lsls	r2, r2, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	3301      	adds	r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
 80011b8:	2300      	movs	r3, #0
} // End PICC_Select()
 80011ba:	4618      	mov	r0, r3
 80011bc:	3730      	adds	r7, #48	; 0x30
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <PICC_HaltA>:
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
StatusCode PICC_HaltA() {
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af04      	add	r7, sp, #16
	StatusCode result;
	byte buffer[4];
	
	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
 80011c8:	2350      	movs	r3, #80	; 0x50
 80011ca:	703b      	strb	r3, [r7, #0]
	buffer[1] = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	707b      	strb	r3, [r7, #1]
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 80011d0:	463b      	mov	r3, r7
 80011d2:	1c9a      	adds	r2, r3, #2
 80011d4:	463b      	mov	r3, r7
 80011d6:	2102      	movs	r1, #2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fb82 	bl	80008e2 <PCD_CalculateCRC>
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	if (result != STATUS_OK) {
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <PICC_HaltA+0x2a>
		return result;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	e018      	b.n	800121e <PICC_HaltA+0x5c>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), nullptr, 0,nullptr,0,false);
 80011ec:	4638      	mov	r0, r7
 80011ee:	2300      	movs	r3, #0
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2300      	movs	r3, #0
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2300      	movs	r3, #0
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2300      	movs	r3, #0
 80011fc:	2200      	movs	r2, #0
 80011fe:	2104      	movs	r1, #4
 8001200:	f7ff fc51 	bl	8000aa6 <PCD_TransceiveData>
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
	if (result == STATUS_TIMEOUT) {
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d101      	bne.n	8001212 <PICC_HaltA+0x50>
		return STATUS_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e005      	b.n	800121e <PICC_HaltA+0x5c>
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <PICC_HaltA+0x5a>
		return STATUS_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <PICC_HaltA+0x5c>
	}
	return result;
 800121c:	79fb      	ldrb	r3, [r7, #7]
} // End PICC_HaltA()
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <PCD_Authenticate>:
 */
StatusCode PCD_Authenticate(byte command,		///< PICC_CMD_MF_AUTH_KEY_A or PICC_CMD_MF_AUTH_KEY_B
											byte blockAddr, 	///< The block number. See numbering in the comments in the .h file.
											MIFARE_Key *key,	///< Pointer to the Crypteo1 key to use (6 bytes)
											Uid *uid			///< Pointer to Uid struct. The first 4 bytes of the UID is used.
											) {
 8001226:	b580      	push	{r7, lr}
 8001228:	b08e      	sub	sp, #56	; 0x38
 800122a:	af06      	add	r7, sp, #24
 800122c:	60ba      	str	r2, [r7, #8]
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	4603      	mov	r3, r0
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	460b      	mov	r3, r1
 8001236:	73bb      	strb	r3, [r7, #14]
	byte waitIRq = 0x10;		// IdleIRq
 8001238:	2310      	movs	r3, #16
 800123a:	777b      	strb	r3, [r7, #29]
	
	// Build command buffer
	byte sendData[12];
	sendData[0] = command;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	743b      	strb	r3, [r7, #16]
	sendData[1] = blockAddr;
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	747b      	strb	r3, [r7, #17]
	for (byte i = 0; i < MF_KEY_SIZE; i++) {	// 6 key bytes
 8001244:	2300      	movs	r3, #0
 8001246:	77fb      	strb	r3, [r7, #31]
 8001248:	e00c      	b.n	8001264 <PCD_Authenticate+0x3e>
		sendData[2+i] = key->keyByte[i];
 800124a:	7ffa      	ldrb	r2, [r7, #31]
 800124c:	7ffb      	ldrb	r3, [r7, #31]
 800124e:	3302      	adds	r3, #2
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	5c8a      	ldrb	r2, [r1, r2]
 8001254:	f107 0120 	add.w	r1, r7, #32
 8001258:	440b      	add	r3, r1
 800125a:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (byte i = 0; i < MF_KEY_SIZE; i++) {	// 6 key bytes
 800125e:	7ffb      	ldrb	r3, [r7, #31]
 8001260:	3301      	adds	r3, #1
 8001262:	77fb      	strb	r3, [r7, #31]
 8001264:	7ffb      	ldrb	r3, [r7, #31]
 8001266:	2b05      	cmp	r3, #5
 8001268:	d9ef      	bls.n	800124a <PCD_Authenticate+0x24>
	}
	// Use the last uid bytes as specified in http://cache.nxp.com/documents/application_note/AN10927.pdf
	// section 3.2.5 "MIFARE Classic Authentication".
	// The only missed case is the MF1Sxxxx shortcut activation,
	// but it requires cascade tag (CT) byte, that is not part of uid.
	for (byte i = 0; i < 4; i++) {				// The last 4 bytes of the UID
 800126a:	2300      	movs	r3, #0
 800126c:	77bb      	strb	r3, [r7, #30]
 800126e:	e011      	b.n	8001294 <PCD_Authenticate+0x6e>
		sendData[8+i] = uid->uidByte[i+uid->size-4];
 8001270:	7fbb      	ldrb	r3, [r7, #30]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	7812      	ldrb	r2, [r2, #0]
 8001276:	4413      	add	r3, r2
 8001278:	1f1a      	subs	r2, r3, #4
 800127a:	7fbb      	ldrb	r3, [r7, #30]
 800127c:	3308      	adds	r3, #8
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	440a      	add	r2, r1
 8001282:	7852      	ldrb	r2, [r2, #1]
 8001284:	f107 0120 	add.w	r1, r7, #32
 8001288:	440b      	add	r3, r1
 800128a:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (byte i = 0; i < 4; i++) {				// The last 4 bytes of the UID
 800128e:	7fbb      	ldrb	r3, [r7, #30]
 8001290:	3301      	adds	r3, #1
 8001292:	77bb      	strb	r3, [r7, #30]
 8001294:	7fbb      	ldrb	r3, [r7, #30]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d9ea      	bls.n	8001270 <PCD_Authenticate+0x4a>
	}
	
	// Start the authentication.
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData),nullptr,nullptr,nullptr,0,false);
 800129a:	f107 0210 	add.w	r2, r7, #16
 800129e:	7f79      	ldrb	r1, [r7, #29]
 80012a0:	2300      	movs	r3, #0
 80012a2:	9304      	str	r3, [sp, #16]
 80012a4:	2300      	movs	r3, #0
 80012a6:	9303      	str	r3, [sp, #12]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	2300      	movs	r3, #0
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	2300      	movs	r3, #0
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	230c      	movs	r3, #12
 80012b6:	200e      	movs	r0, #14
 80012b8:	f7ff fc17 	bl	8000aea <PCD_CommunicateWithPICC>
 80012bc:	4603      	mov	r3, r0
} // End PCD_Authenticate()
 80012be:	4618      	mov	r0, r3
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <PCD_StopCrypto1>:

/**
 * Used to exit the PCD from its authenticated state.
 * Remember to call this function after communicating with an authenticated PICC - otherwise no new communications can start.
 */
void PCD_StopCrypto1() {
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
	// Clear MFCrypto1On bit
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved MFCrypto1On ModemState[2:0]
 80012ca:	2108      	movs	r1, #8
 80012cc:	2010      	movs	r0, #16
 80012ce:	f7ff fae8 	bl	80008a2 <PCD_ClearRegisterBitMask>
} // End PCD_StopCrypto1()
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <MIFARE_Read>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode MIFARE_Read(	byte blockAddr, 	///< MIFARE Classic: The block (0-0xff) number. MIFARE Ultralight: The first page to return data from.
											byte *buffer,		///< The buffer to store the data in
											byte *bufferSize	///< Buffer size, at least 18 bytes. Also number of bytes returned if STATUS_OK.
										) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b08a      	sub	sp, #40	; 0x28
 80012da:	af04      	add	r7, sp, #16
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
	StatusCode result;
	
	// Sanity check
	if (buffer == nullptr || *bufferSize < 18) {
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <MIFARE_Read+0x1c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b11      	cmp	r3, #17
 80012f0:	d801      	bhi.n	80012f6 <MIFARE_Read+0x20>
		return STATUS_NO_ROOM;
 80012f2:	2304      	movs	r3, #4
 80012f4:	e021      	b.n	800133a <MIFARE_Read+0x64>
	}
	
	// Build command buffer
	buffer[0] = PICC_CMD_MF_READ;
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2230      	movs	r2, #48	; 0x30
 80012fa:	701a      	strb	r2, [r3, #0]
	buffer[1] = blockAddr;
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3301      	adds	r3, #1
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	701a      	strb	r2, [r3, #0]
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	3302      	adds	r3, #2
 8001308:	461a      	mov	r2, r3
 800130a:	2102      	movs	r1, #2
 800130c:	68b8      	ldr	r0, [r7, #8]
 800130e:	f7ff fae8 	bl	80008e2 <PCD_CalculateCRC>
 8001312:	4603      	mov	r3, r0
 8001314:	75fb      	strb	r3, [r7, #23]
	if (result != STATUS_OK) {
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MIFARE_Read+0x4a>
		return result;
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	e00c      	b.n	800133a <MIFARE_Read+0x64>
	}
	
	// Transmit the buffer and receive the response, validate CRC_A.
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, nullptr, 0, true);
 8001320:	2301      	movs	r3, #1
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2300      	movs	r3, #0
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	2300      	movs	r3, #0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	2104      	movs	r1, #4
 8001332:	68b8      	ldr	r0, [r7, #8]
 8001334:	f7ff fbb7 	bl	8000aa6 <PCD_TransceiveData>
 8001338:	4603      	mov	r3, r0
} // End MIFARE_Read()
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <GetStatusCodeName>:
 * Returns a __FlashStringHelper pointer to a status code name.
 * 
 * @return const __FlashStringHelper *
 */
const char *GetStatusCodeName(StatusCode code	///< One of the StatusCode enums.
										) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	switch (code) {
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b04      	cmp	r3, #4
 8001352:	d01e      	beq.n	8001392 <GetStatusCodeName+0x4e>
 8001354:	2b04      	cmp	r3, #4
 8001356:	dc0b      	bgt.n	8001370 <GetStatusCodeName+0x2c>
 8001358:	2b01      	cmp	r3, #1
 800135a:	d014      	beq.n	8001386 <GetStatusCodeName+0x42>
 800135c:	2b01      	cmp	r3, #1
 800135e:	dc02      	bgt.n	8001366 <GetStatusCodeName+0x22>
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00e      	beq.n	8001382 <GetStatusCodeName+0x3e>
 8001364:	e01f      	b.n	80013a6 <GetStatusCodeName+0x62>
 8001366:	2b02      	cmp	r3, #2
 8001368:	d00f      	beq.n	800138a <GetStatusCodeName+0x46>
 800136a:	2b03      	cmp	r3, #3
 800136c:	d00f      	beq.n	800138e <GetStatusCodeName+0x4a>
 800136e:	e01a      	b.n	80013a6 <GetStatusCodeName+0x62>
 8001370:	2b06      	cmp	r3, #6
 8001372:	d012      	beq.n	800139a <GetStatusCodeName+0x56>
 8001374:	2b06      	cmp	r3, #6
 8001376:	db0e      	blt.n	8001396 <GetStatusCodeName+0x52>
 8001378:	2b07      	cmp	r3, #7
 800137a:	d010      	beq.n	800139e <GetStatusCodeName+0x5a>
 800137c:	2bff      	cmp	r3, #255	; 0xff
 800137e:	d010      	beq.n	80013a2 <GetStatusCodeName+0x5e>
 8001380:	e011      	b.n	80013a6 <GetStatusCodeName+0x62>
		case STATUS_OK:				return F("Success.");
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <GetStatusCodeName+0x70>)
 8001384:	e010      	b.n	80013a8 <GetStatusCodeName+0x64>
		case STATUS_ERROR:			return F("Error in communication.");
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <GetStatusCodeName+0x74>)
 8001388:	e00e      	b.n	80013a8 <GetStatusCodeName+0x64>
		case STATUS_COLLISION:		return F("Collision detected.");
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <GetStatusCodeName+0x78>)
 800138c:	e00c      	b.n	80013a8 <GetStatusCodeName+0x64>
		case STATUS_TIMEOUT:		return F("Timeout in communication.");
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <GetStatusCodeName+0x7c>)
 8001390:	e00a      	b.n	80013a8 <GetStatusCodeName+0x64>
		case STATUS_NO_ROOM:		return F("A buffer is not big enough.");
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <GetStatusCodeName+0x80>)
 8001394:	e008      	b.n	80013a8 <GetStatusCodeName+0x64>
		case STATUS_INTERNAL_ERROR:	return F("Internal error in the code. Should not happen.");
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <GetStatusCodeName+0x84>)
 8001398:	e006      	b.n	80013a8 <GetStatusCodeName+0x64>
		case STATUS_INVALID:		return F("Invalid argument.");
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <GetStatusCodeName+0x88>)
 800139c:	e004      	b.n	80013a8 <GetStatusCodeName+0x64>
		case STATUS_CRC_WRONG:		return F("The CRC_A does not match.");
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <GetStatusCodeName+0x8c>)
 80013a0:	e002      	b.n	80013a8 <GetStatusCodeName+0x64>
		case STATUS_MIFARE_NACK:	return F("A MIFARE PICC responded with NAK.");
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <GetStatusCodeName+0x90>)
 80013a4:	e000      	b.n	80013a8 <GetStatusCodeName+0x64>
		default:					return F("Unknown error");
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <GetStatusCodeName+0x94>)
	}
} // End GetStatusCodeName()
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	08009514 	.word	0x08009514
 80013b8:	08009520 	.word	0x08009520
 80013bc:	08009538 	.word	0x08009538
 80013c0:	0800954c 	.word	0x0800954c
 80013c4:	08009568 	.word	0x08009568
 80013c8:	08009584 	.word	0x08009584
 80013cc:	080095b4 	.word	0x080095b4
 80013d0:	080095c8 	.word	0x080095c8
 80013d4:	080095e4 	.word	0x080095e4
 80013d8:	08009608 	.word	0x08009608

080013dc <PICC_GetType>:
 * Translates the SAK (Select Acknowledge) to a PICC type.
 * 
 * @return PICC_Type
 */
PICC_Type PICC_GetType(byte sak		///< The SAK byte returned from PICC_Select().
										) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	// http://www.nxp.com/documents/application_note/AN10833.pdf 
	// 3.2 Coding of Select Acknowledge (SAK)
	// ignore 8-bit (iso14443 starts with LSBit = bit 1)
	// fixes wrong type for manufacturer Infineon (http://nfc-tools.org/index.php?title=ISO14443A)
	sak &= 0x7F;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ec:	71fb      	strb	r3, [r7, #7]
	switch (sak) {
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b40      	cmp	r3, #64	; 0x40
 80013f2:	f200 8097 	bhi.w	8001524 <PICC_GetType+0x148>
 80013f6:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <PICC_GetType+0x20>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	08001511 	.word	0x08001511
 8001400:	08001519 	.word	0x08001519
 8001404:	08001525 	.word	0x08001525
 8001408:	08001525 	.word	0x08001525
 800140c:	08001501 	.word	0x08001501
 8001410:	08001525 	.word	0x08001525
 8001414:	08001525 	.word	0x08001525
 8001418:	08001525 	.word	0x08001525
 800141c:	08001509 	.word	0x08001509
 8001420:	08001505 	.word	0x08001505
 8001424:	08001525 	.word	0x08001525
 8001428:	08001525 	.word	0x08001525
 800142c:	08001525 	.word	0x08001525
 8001430:	08001525 	.word	0x08001525
 8001434:	08001525 	.word	0x08001525
 8001438:	08001525 	.word	0x08001525
 800143c:	08001515 	.word	0x08001515
 8001440:	08001515 	.word	0x08001515
 8001444:	08001525 	.word	0x08001525
 8001448:	08001525 	.word	0x08001525
 800144c:	08001525 	.word	0x08001525
 8001450:	08001525 	.word	0x08001525
 8001454:	08001525 	.word	0x08001525
 8001458:	08001525 	.word	0x08001525
 800145c:	0800150d 	.word	0x0800150d
 8001460:	08001525 	.word	0x08001525
 8001464:	08001525 	.word	0x08001525
 8001468:	08001525 	.word	0x08001525
 800146c:	08001525 	.word	0x08001525
 8001470:	08001525 	.word	0x08001525
 8001474:	08001525 	.word	0x08001525
 8001478:	08001525 	.word	0x08001525
 800147c:	0800151d 	.word	0x0800151d
 8001480:	08001525 	.word	0x08001525
 8001484:	08001525 	.word	0x08001525
 8001488:	08001525 	.word	0x08001525
 800148c:	08001525 	.word	0x08001525
 8001490:	08001525 	.word	0x08001525
 8001494:	08001525 	.word	0x08001525
 8001498:	08001525 	.word	0x08001525
 800149c:	08001525 	.word	0x08001525
 80014a0:	08001525 	.word	0x08001525
 80014a4:	08001525 	.word	0x08001525
 80014a8:	08001525 	.word	0x08001525
 80014ac:	08001525 	.word	0x08001525
 80014b0:	08001525 	.word	0x08001525
 80014b4:	08001525 	.word	0x08001525
 80014b8:	08001525 	.word	0x08001525
 80014bc:	08001525 	.word	0x08001525
 80014c0:	08001525 	.word	0x08001525
 80014c4:	08001525 	.word	0x08001525
 80014c8:	08001525 	.word	0x08001525
 80014cc:	08001525 	.word	0x08001525
 80014d0:	08001525 	.word	0x08001525
 80014d4:	08001525 	.word	0x08001525
 80014d8:	08001525 	.word	0x08001525
 80014dc:	08001525 	.word	0x08001525
 80014e0:	08001525 	.word	0x08001525
 80014e4:	08001525 	.word	0x08001525
 80014e8:	08001525 	.word	0x08001525
 80014ec:	08001525 	.word	0x08001525
 80014f0:	08001525 	.word	0x08001525
 80014f4:	08001525 	.word	0x08001525
 80014f8:	08001525 	.word	0x08001525
 80014fc:	08001521 	.word	0x08001521
		case 0x04:	return PICC_TYPE_NOT_COMPLETE;	// UID not complete
 8001500:	23ff      	movs	r3, #255	; 0xff
 8001502:	e010      	b.n	8001526 <PICC_GetType+0x14a>
		case 0x09:	return PICC_TYPE_MIFARE_MINI;
 8001504:	2303      	movs	r3, #3
 8001506:	e00e      	b.n	8001526 <PICC_GetType+0x14a>
		case 0x08:	return PICC_TYPE_MIFARE_1K;
 8001508:	2304      	movs	r3, #4
 800150a:	e00c      	b.n	8001526 <PICC_GetType+0x14a>
		case 0x18:	return PICC_TYPE_MIFARE_4K;
 800150c:	2305      	movs	r3, #5
 800150e:	e00a      	b.n	8001526 <PICC_GetType+0x14a>
		case 0x00:	return PICC_TYPE_MIFARE_UL;
 8001510:	2306      	movs	r3, #6
 8001512:	e008      	b.n	8001526 <PICC_GetType+0x14a>
		case 0x10:
		case 0x11:	return PICC_TYPE_MIFARE_PLUS;
 8001514:	2307      	movs	r3, #7
 8001516:	e006      	b.n	8001526 <PICC_GetType+0x14a>
		case 0x01:	return PICC_TYPE_TNP3XXX;
 8001518:	2309      	movs	r3, #9
 800151a:	e004      	b.n	8001526 <PICC_GetType+0x14a>
		case 0x20:	return PICC_TYPE_ISO_14443_4;
 800151c:	2301      	movs	r3, #1
 800151e:	e002      	b.n	8001526 <PICC_GetType+0x14a>
		case 0x40:	return PICC_TYPE_ISO_18092;
 8001520:	2302      	movs	r3, #2
 8001522:	e000      	b.n	8001526 <PICC_GetType+0x14a>
		default:	return PICC_TYPE_UNKNOWN;
 8001524:	2300      	movs	r3, #0
	}
} // End PICC_GetType()
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <PICC_GetTypeName>:
 * Returns a __FlashStringHelper pointer to the PICC type name.
 * 
 * @return const __FlashStringHelper *
 */
const char *PICC_GetTypeName(PICC_Type piccType	///< One of the PICC_Type enums.
													) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	switch (piccType) {
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d023      	beq.n	800158c <PICC_GetTypeName+0x58>
 8001544:	2b05      	cmp	r3, #5
 8001546:	dc0b      	bgt.n	8001560 <PICC_GetTypeName+0x2c>
 8001548:	2b02      	cmp	r3, #2
 800154a:	d019      	beq.n	8001580 <PICC_GetTypeName+0x4c>
 800154c:	2b02      	cmp	r3, #2
 800154e:	dc02      	bgt.n	8001556 <PICC_GetTypeName+0x22>
 8001550:	2b01      	cmp	r3, #1
 8001552:	d013      	beq.n	800157c <PICC_GetTypeName+0x48>
 8001554:	e026      	b.n	80015a4 <PICC_GetTypeName+0x70>
 8001556:	2b03      	cmp	r3, #3
 8001558:	d014      	beq.n	8001584 <PICC_GetTypeName+0x50>
 800155a:	2b04      	cmp	r3, #4
 800155c:	d014      	beq.n	8001588 <PICC_GetTypeName+0x54>
 800155e:	e021      	b.n	80015a4 <PICC_GetTypeName+0x70>
 8001560:	2b08      	cmp	r3, #8
 8001562:	d019      	beq.n	8001598 <PICC_GetTypeName+0x64>
 8001564:	2b08      	cmp	r3, #8
 8001566:	dc04      	bgt.n	8001572 <PICC_GetTypeName+0x3e>
 8001568:	2b06      	cmp	r3, #6
 800156a:	d011      	beq.n	8001590 <PICC_GetTypeName+0x5c>
 800156c:	2b07      	cmp	r3, #7
 800156e:	d011      	beq.n	8001594 <PICC_GetTypeName+0x60>
 8001570:	e018      	b.n	80015a4 <PICC_GetTypeName+0x70>
 8001572:	2b09      	cmp	r3, #9
 8001574:	d012      	beq.n	800159c <PICC_GetTypeName+0x68>
 8001576:	2bff      	cmp	r3, #255	; 0xff
 8001578:	d012      	beq.n	80015a0 <PICC_GetTypeName+0x6c>
 800157a:	e013      	b.n	80015a4 <PICC_GetTypeName+0x70>
		case PICC_TYPE_ISO_14443_4:		return F("PICC compliant with ISO/IEC 14443-4");
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <PICC_GetTypeName+0x80>)
 800157e:	e012      	b.n	80015a6 <PICC_GetTypeName+0x72>
		case PICC_TYPE_ISO_18092:		return F("PICC compliant with ISO/IEC 18092 (NFC)");
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <PICC_GetTypeName+0x84>)
 8001582:	e010      	b.n	80015a6 <PICC_GetTypeName+0x72>
		case PICC_TYPE_MIFARE_MINI:		return F("MIFARE Mini, 320 bytes");
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <PICC_GetTypeName+0x88>)
 8001586:	e00e      	b.n	80015a6 <PICC_GetTypeName+0x72>
		case PICC_TYPE_MIFARE_1K:		return F("MIFARE 1KB");
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <PICC_GetTypeName+0x8c>)
 800158a:	e00c      	b.n	80015a6 <PICC_GetTypeName+0x72>
		case PICC_TYPE_MIFARE_4K:		return F("MIFARE 4KB");
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <PICC_GetTypeName+0x90>)
 800158e:	e00a      	b.n	80015a6 <PICC_GetTypeName+0x72>
		case PICC_TYPE_MIFARE_UL:		return F("MIFARE Ultralight or Ultralight C");
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <PICC_GetTypeName+0x94>)
 8001592:	e008      	b.n	80015a6 <PICC_GetTypeName+0x72>
		case PICC_TYPE_MIFARE_PLUS:		return F("MIFARE Plus");
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <PICC_GetTypeName+0x98>)
 8001596:	e006      	b.n	80015a6 <PICC_GetTypeName+0x72>
		case PICC_TYPE_MIFARE_DESFIRE:	return F("MIFARE DESFire");
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <PICC_GetTypeName+0x9c>)
 800159a:	e004      	b.n	80015a6 <PICC_GetTypeName+0x72>
		case PICC_TYPE_TNP3XXX:			return F("MIFARE TNP3XXX");
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <PICC_GetTypeName+0xa0>)
 800159e:	e002      	b.n	80015a6 <PICC_GetTypeName+0x72>
		case PICC_TYPE_NOT_COMPLETE:	return F("SAK indicates UID is not complete.");
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <PICC_GetTypeName+0xa4>)
 80015a2:	e000      	b.n	80015a6 <PICC_GetTypeName+0x72>
		case PICC_TYPE_UNKNOWN:
		default:						return F("Unknown type");
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <PICC_GetTypeName+0xa8>)
	}
} // End PICC_GetTypeName()
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	08009618 	.word	0x08009618
 80015b8:	0800963c 	.word	0x0800963c
 80015bc:	08009664 	.word	0x08009664
 80015c0:	0800967c 	.word	0x0800967c
 80015c4:	08009688 	.word	0x08009688
 80015c8:	08009694 	.word	0x08009694
 80015cc:	080096b8 	.word	0x080096b8
 80015d0:	080096c4 	.word	0x080096c4
 80015d4:	080096d4 	.word	0x080096d4
 80015d8:	080096e4 	.word	0x080096e4
 80015dc:	08009708 	.word	0x08009708

080015e0 <PCD_DumpVersionToSerial>:

/**
 * Dumps debug info about the connected PCD to Serial.
 * Shows all known firmware versions
 */
void PCD_DumpVersionToSerial() {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	// Get the MFRC522 firmware version
	byte v = PCD_ReadRegister(VersionReg);
 80015e6:	206e      	movs	r0, #110	; 0x6e
 80015e8:	f7ff f886 	bl	80006f8 <PCD_ReadRegister>
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
	Serial.print("Firmware Version: 0x",STR);
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <PCD_DumpVersionToSerial+0xa8>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2100      	movs	r1, #0
 80015f6:	4825      	ldr	r0, [pc, #148]	; (800168c <PCD_DumpVersionToSerial+0xac>)
 80015f8:	4798      	blx	r3
	Serial.print(F(v), HEX);
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <PCD_DumpVersionToSerial+0xa8>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	2101      	movs	r1, #1
 8001602:	4610      	mov	r0, r2
 8001604:	4798      	blx	r3
	// Lookup which version
	switch(v) {
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b90      	cmp	r3, #144	; 0x90
 800160a:	d011      	beq.n	8001630 <PCD_DumpVersionToSerial+0x50>
 800160c:	2b90      	cmp	r3, #144	; 0x90
 800160e:	dc04      	bgt.n	800161a <PCD_DumpVersionToSerial+0x3a>
 8001610:	2b12      	cmp	r3, #18
 8001612:	d01f      	beq.n	8001654 <PCD_DumpVersionToSerial+0x74>
 8001614:	2b88      	cmp	r3, #136	; 0x88
 8001616:	d005      	beq.n	8001624 <PCD_DumpVersionToSerial+0x44>
 8001618:	e022      	b.n	8001660 <PCD_DumpVersionToSerial+0x80>
 800161a:	2b91      	cmp	r3, #145	; 0x91
 800161c:	d00e      	beq.n	800163c <PCD_DumpVersionToSerial+0x5c>
 800161e:	2b92      	cmp	r3, #146	; 0x92
 8001620:	d012      	beq.n	8001648 <PCD_DumpVersionToSerial+0x68>
 8001622:	e01d      	b.n	8001660 <PCD_DumpVersionToSerial+0x80>
		case 0x88: Serial.println(" = (clone)",STR);  break;
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <PCD_DumpVersionToSerial+0xa8>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2100      	movs	r1, #0
 800162a:	4819      	ldr	r0, [pc, #100]	; (8001690 <PCD_DumpVersionToSerial+0xb0>)
 800162c:	4798      	blx	r3
 800162e:	e01c      	b.n	800166a <PCD_DumpVersionToSerial+0x8a>
		case 0x90: Serial.println(" = v0.0",STR);     break;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <PCD_DumpVersionToSerial+0xa8>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2100      	movs	r1, #0
 8001636:	4817      	ldr	r0, [pc, #92]	; (8001694 <PCD_DumpVersionToSerial+0xb4>)
 8001638:	4798      	blx	r3
 800163a:	e016      	b.n	800166a <PCD_DumpVersionToSerial+0x8a>
		case 0x91: Serial.println(" = v1.0",STR);     break;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <PCD_DumpVersionToSerial+0xa8>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2100      	movs	r1, #0
 8001642:	4815      	ldr	r0, [pc, #84]	; (8001698 <PCD_DumpVersionToSerial+0xb8>)
 8001644:	4798      	blx	r3
 8001646:	e010      	b.n	800166a <PCD_DumpVersionToSerial+0x8a>
		case 0x92: Serial.println(" = v2.0",STR);     break;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <PCD_DumpVersionToSerial+0xa8>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2100      	movs	r1, #0
 800164e:	4813      	ldr	r0, [pc, #76]	; (800169c <PCD_DumpVersionToSerial+0xbc>)
 8001650:	4798      	blx	r3
 8001652:	e00a      	b.n	800166a <PCD_DumpVersionToSerial+0x8a>
		case 0x12: Serial.println(" = counterfeit chip",STR);     break;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <PCD_DumpVersionToSerial+0xa8>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2100      	movs	r1, #0
 800165a:	4811      	ldr	r0, [pc, #68]	; (80016a0 <PCD_DumpVersionToSerial+0xc0>)
 800165c:	4798      	blx	r3
 800165e:	e004      	b.n	800166a <PCD_DumpVersionToSerial+0x8a>
		default:   Serial.println(" = (unknown)",STR);
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <PCD_DumpVersionToSerial+0xa8>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2100      	movs	r1, #0
 8001666:	480f      	ldr	r0, [pc, #60]	; (80016a4 <PCD_DumpVersionToSerial+0xc4>)
 8001668:	4798      	blx	r3
	}
	// When 0x00 or 0xFF is returned, communication probably failed
	if ((v == 0x00) || (v == 0xFF))
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <PCD_DumpVersionToSerial+0x96>
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2bff      	cmp	r3, #255	; 0xff
 8001674:	d104      	bne.n	8001680 <PCD_DumpVersionToSerial+0xa0>
		Serial.println("WARNING: Communication failure, is the MFRC522 properly connected?",STR);
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <PCD_DumpVersionToSerial+0xa8>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2100      	movs	r1, #0
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <PCD_DumpVersionToSerial+0xc8>)
 800167e:	4798      	blx	r3
} // End PCD_DumpVersionToSerial()
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000000 	.word	0x20000000
 800168c:	08009718 	.word	0x08009718
 8001690:	08009730 	.word	0x08009730
 8001694:	0800973c 	.word	0x0800973c
 8001698:	08009744 	.word	0x08009744
 800169c:	0800974c 	.word	0x0800974c
 80016a0:	08009754 	.word	0x08009754
 80016a4:	08009768 	.word	0x08009768
 80016a8:	08009778 	.word	0x08009778

080016ac <PICC_DumpToSerial>:
 * Dumps debug info about the selected PICC to Serial.
 * On success the PICC is halted after dumping the data.
 * For MIFARE Classic the factory default key of 0xFFFFFFFFFFFF is tried.  
 */
void PICC_DumpToSerial(Uid *uid	///< Pointer to Uid struct returned from a successful PICC_Select().
								) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	MIFARE_Key key;
	
	// Dump UID, SAK and Type
	PICC_DumpDetailsToSerial(uid);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f855 	bl	8001764 <PICC_DumpDetailsToSerial>
	
	// Dump contents
	PICC_Type piccType = PICC_GetType(uid->sak);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7adb      	ldrb	r3, [r3, #11]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fe8c 	bl	80013dc <PICC_GetType>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73bb      	strb	r3, [r7, #14]
	switch (piccType) {
 80016c8:	7bbb      	ldrb	r3, [r7, #14]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d836      	bhi.n	800173e <PICC_DumpToSerial+0x92>
 80016d0:	a201      	add	r2, pc, #4	; (adr r2, 80016d8 <PICC_DumpToSerial+0x2c>)
 80016d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d6:	bf00      	nop
 80016d8:	08001733 	.word	0x08001733
 80016dc:	08001733 	.word	0x08001733
 80016e0:	080016fd 	.word	0x080016fd
 80016e4:	080016fd 	.word	0x080016fd
 80016e8:	080016fd 	.word	0x080016fd
 80016ec:	0800172d 	.word	0x0800172d
 80016f0:	08001733 	.word	0x08001733
 80016f4:	08001733 	.word	0x08001733
 80016f8:	08001733 	.word	0x08001733
		case PICC_TYPE_MIFARE_MINI:
		case PICC_TYPE_MIFARE_1K:
		case PICC_TYPE_MIFARE_4K:
			// All keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
			for (byte i = 0; i < 6; i++) {
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e009      	b.n	8001716 <PICC_DumpToSerial+0x6a>
				key.keyByte[i] = 0xFF;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	f107 0210 	add.w	r2, r7, #16
 8001708:	4413      	add	r3, r2
 800170a:	22ff      	movs	r2, #255	; 0xff
 800170c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (byte i = 0; i < 6; i++) {
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	3301      	adds	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d9f2      	bls.n	8001702 <PICC_DumpToSerial+0x56>
			}
			PICC_DumpMifareClassicToSerial(uid, piccType, &key);
 800171c:	f107 0208 	add.w	r2, r7, #8
 8001720:	7bbb      	ldrb	r3, [r7, #14]
 8001722:	4619      	mov	r1, r3
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f88f 	bl	8001848 <PICC_DumpMifareClassicToSerial>
			break;
 800172a:	e009      	b.n	8001740 <PICC_DumpToSerial+0x94>
			
		case PICC_TYPE_MIFARE_UL:
			PICC_DumpMifareUltralightToSerial();
 800172c:	f000 fb7a 	bl	8001e24 <PICC_DumpMifareUltralightToSerial>
			break;
 8001730:	e006      	b.n	8001740 <PICC_DumpToSerial+0x94>
		case PICC_TYPE_ISO_14443_4:
		case PICC_TYPE_MIFARE_DESFIRE:
		case PICC_TYPE_ISO_18092:
		case PICC_TYPE_MIFARE_PLUS:
		case PICC_TYPE_TNP3XXX:
			Serial.println("Dumping memory contents not implemented for that PICC type.",STR);
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <PICC_DumpToSerial+0xac>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2100      	movs	r1, #0
 8001738:	4808      	ldr	r0, [pc, #32]	; (800175c <PICC_DumpToSerial+0xb0>)
 800173a:	4798      	blx	r3
			break;
 800173c:	e000      	b.n	8001740 <PICC_DumpToSerial+0x94>
			
		case PICC_TYPE_UNKNOWN:
		case PICC_TYPE_NOT_COMPLETE:
		default:
			break; // No memory dump here
 800173e:	bf00      	nop
	}
	
	Serial.println("",STR);
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <PICC_DumpToSerial+0xac>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2100      	movs	r1, #0
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <PICC_DumpToSerial+0xb4>)
 8001748:	4798      	blx	r3
	PICC_HaltA(); // Already done if it was a MIFARE Classic PICC.
 800174a:	f7ff fd3a 	bl	80011c2 <PICC_HaltA>
} // End PICC_DumpToSerial()
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000000 	.word	0x20000000
 800175c:	080097bc 	.word	0x080097bc
 8001760:	080097f8 	.word	0x080097f8

08001764 <PICC_DumpDetailsToSerial>:

/**
 * Dumps card info (UID,SAK,Type) about the selected PICC to Serial.
 */
void PICC_DumpDetailsToSerial(Uid *uid	///< Pointer to Uid struct returned from a successful PICC_Select().
									) {
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	// UID
	Serial.print("Card UID:",STR);
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <PICC_DumpDetailsToSerial+0xc4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2100      	movs	r1, #0
 8001772:	482e      	ldr	r0, [pc, #184]	; (800182c <PICC_DumpDetailsToSerial+0xc8>)
 8001774:	4798      	blx	r3
	for (byte i = 0; i < uid->size; i++) {
 8001776:	2300      	movs	r3, #0
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	e01c      	b.n	80017b6 <PICC_DumpDetailsToSerial+0x52>
		if(uid->uidByte[i] < 0x10)
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	785b      	ldrb	r3, [r3, #1]
 8001784:	2b0f      	cmp	r3, #15
 8001786:	d805      	bhi.n	8001794 <PICC_DumpDetailsToSerial+0x30>
			Serial.print(" 0",STR);
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <PICC_DumpDetailsToSerial+0xc4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2100      	movs	r1, #0
 800178e:	4828      	ldr	r0, [pc, #160]	; (8001830 <PICC_DumpDetailsToSerial+0xcc>)
 8001790:	4798      	blx	r3
 8001792:	e004      	b.n	800179e <PICC_DumpDetailsToSerial+0x3a>
		else
			Serial.print(" ",STR);
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <PICC_DumpDetailsToSerial+0xc4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2100      	movs	r1, #0
 800179a:	4826      	ldr	r0, [pc, #152]	; (8001834 <PICC_DumpDetailsToSerial+0xd0>)
 800179c:	4798      	blx	r3
		Serial.print(F(uid->uidByte[i]), HEX);
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <PICC_DumpDetailsToSerial+0xc4>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	440a      	add	r2, r1
 80017a8:	7852      	ldrb	r2, [r2, #1]
 80017aa:	2101      	movs	r1, #1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4798      	blx	r3
	for (byte i = 0; i < uid->size; i++) {
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	3301      	adds	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d3dd      	bcc.n	800177c <PICC_DumpDetailsToSerial+0x18>
	} 
	Serial.println("",STR);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <PICC_DumpDetailsToSerial+0xc4>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2100      	movs	r1, #0
 80017c6:	481c      	ldr	r0, [pc, #112]	; (8001838 <PICC_DumpDetailsToSerial+0xd4>)
 80017c8:	4798      	blx	r3
	
	// SAK
	Serial.print("Card SAK: ",STR);
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <PICC_DumpDetailsToSerial+0xc4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2100      	movs	r1, #0
 80017d0:	481a      	ldr	r0, [pc, #104]	; (800183c <PICC_DumpDetailsToSerial+0xd8>)
 80017d2:	4798      	blx	r3
	if(uid->sak < 0x10)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7adb      	ldrb	r3, [r3, #11]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d804      	bhi.n	80017e6 <PICC_DumpDetailsToSerial+0x82>
		Serial.print("0",STR);
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <PICC_DumpDetailsToSerial+0xc4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2100      	movs	r1, #0
 80017e2:	4817      	ldr	r0, [pc, #92]	; (8001840 <PICC_DumpDetailsToSerial+0xdc>)
 80017e4:	4798      	blx	r3
	Serial.println(F(uid->sak), HEX);
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <PICC_DumpDetailsToSerial+0xc4>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	7ad2      	ldrb	r2, [r2, #11]
 80017ee:	2101      	movs	r1, #1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4798      	blx	r3
	
	// (suggested) PICC type
	PICC_Type piccType = PICC_GetType(uid->sak);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7adb      	ldrb	r3, [r3, #11]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fdef 	bl	80013dc <PICC_GetType>
 80017fe:	4603      	mov	r3, r0
 8001800:	73bb      	strb	r3, [r7, #14]
	Serial.print("PICC type: ",STR);
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <PICC_DumpDetailsToSerial+0xc4>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2100      	movs	r1, #0
 8001808:	480e      	ldr	r0, [pc, #56]	; (8001844 <PICC_DumpDetailsToSerial+0xe0>)
 800180a:	4798      	blx	r3
	Serial.println(PICC_GetTypeName(piccType),STR);
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <PICC_DumpDetailsToSerial+0xc4>)
 800180e:	689c      	ldr	r4, [r3, #8]
 8001810:	7bbb      	ldrb	r3, [r7, #14]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fe8e 	bl	8001534 <PICC_GetTypeName>
 8001818:	4603      	mov	r3, r0
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	47a0      	blx	r4
} // End PICC_DumpDetailsToSerial()
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bd90      	pop	{r4, r7, pc}
 8001828:	20000000 	.word	0x20000000
 800182c:	080097fc 	.word	0x080097fc
 8001830:	08009808 	.word	0x08009808
 8001834:	0800980c 	.word	0x0800980c
 8001838:	080097f8 	.word	0x080097f8
 800183c:	08009810 	.word	0x08009810
 8001840:	0800981c 	.word	0x0800981c
 8001844:	08009820 	.word	0x08009820

08001848 <PICC_DumpMifareClassicToSerial>:
 * On success the PICC is halted after dumping the data.
 */
void PICC_DumpMifareClassicToSerial(	Uid *uid,			///< Pointer to Uid struct returned from a successful PICC_Select().
												PICC_Type piccType,	///< One of the PICC_Type enums.
												MIFARE_Key *key		///< Key A used for all sectors.
											) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	460b      	mov	r3, r1
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	72fb      	strb	r3, [r7, #11]
	byte no_of_sectors = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]
	switch (piccType) {
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	2b04      	cmp	r3, #4
 800185e:	d007      	beq.n	8001870 <PICC_DumpMifareClassicToSerial+0x28>
 8001860:	2b05      	cmp	r3, #5
 8001862:	d008      	beq.n	8001876 <PICC_DumpMifareClassicToSerial+0x2e>
 8001864:	2b03      	cmp	r3, #3
 8001866:	d000      	beq.n	800186a <PICC_DumpMifareClassicToSerial+0x22>
			// Has (32 sectors * 4 blocks/sector + 8 sectors * 16 blocks/sector) * 16 bytes/block = 4096 bytes.
			no_of_sectors = 40;
			break;
			
		default: // Should not happen. Ignore.
			break;
 8001868:	e008      	b.n	800187c <PICC_DumpMifareClassicToSerial+0x34>
			no_of_sectors = 5;
 800186a:	2305      	movs	r3, #5
 800186c:	75fb      	strb	r3, [r7, #23]
			break;
 800186e:	e005      	b.n	800187c <PICC_DumpMifareClassicToSerial+0x34>
			no_of_sectors = 16;
 8001870:	2310      	movs	r3, #16
 8001872:	75fb      	strb	r3, [r7, #23]
			break;
 8001874:	e002      	b.n	800187c <PICC_DumpMifareClassicToSerial+0x34>
			no_of_sectors = 40;
 8001876:	2328      	movs	r3, #40	; 0x28
 8001878:	75fb      	strb	r3, [r7, #23]
			break;
 800187a:	bf00      	nop
	}
	
	// Dump sectors, highest address first.
	if (no_of_sectors) {
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d019      	beq.n	80018b6 <PICC_DumpMifareClassicToSerial+0x6e>
		Serial.println("Sector Block   0  1  2  3   4  5  6  7   8  9 10 11  12 13 14 15  AccessBits",STR);
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <PICC_DumpMifareClassicToSerial+0x80>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2100      	movs	r1, #0
 8001888:	4810      	ldr	r0, [pc, #64]	; (80018cc <PICC_DumpMifareClassicToSerial+0x84>)
 800188a:	4798      	blx	r3
		for (int8_t i = no_of_sectors - 1; i >= 0; i--) {
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	3b01      	subs	r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	75bb      	strb	r3, [r7, #22]
 8001894:	e00b      	b.n	80018ae <PICC_DumpMifareClassicToSerial+0x66>
			PICC_DumpMifareClassicSectorToSerial(uid, key, i);
 8001896:	7dbb      	ldrb	r3, [r7, #22]
 8001898:	461a      	mov	r2, r3
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f817 	bl	80018d0 <PICC_DumpMifareClassicSectorToSerial>
		for (int8_t i = no_of_sectors - 1; i >= 0; i--) {
 80018a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	75bb      	strb	r3, [r7, #22]
 80018ae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	daef      	bge.n	8001896 <PICC_DumpMifareClassicToSerial+0x4e>
		}
	}
	PICC_HaltA(); // Halt the PICC before stopping the encrypted session.
 80018b6:	f7ff fc84 	bl	80011c2 <PICC_HaltA>
	PCD_StopCrypto1();
 80018ba:	f7ff fd04 	bl	80012c6 <PCD_StopCrypto1>
} // End PICC_DumpMifareClassicToSerial()
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000000 	.word	0x20000000
 80018cc:	0800982c 	.word	0x0800982c

080018d0 <PICC_DumpMifareClassicSectorToSerial>:
 * Always uses PICC_CMD_MF_AUTH_KEY_A because only Key A can always read the sector trailer access bits.
 */
void PICC_DumpMifareClassicSectorToSerial(Uid *uid,			///< Pointer to Uid struct returned from a successful PICC_Select().
													MIFARE_Key *key,	///< Key A for the sector.
													byte sector			///< The sector to dump, 0..39.
													) {
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b091      	sub	sp, #68	; 0x44
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	4613      	mov	r3, r2
 80018dc:	71fb      	strb	r3, [r7, #7]
	byte g[4];				// Access bits for each of the four groups.
	byte group;				// 0-3 - active group for access bits
	boolean firstInGroup;		// True for the first block dumped in the group
	
	// Determine position and size of sector.
	if (sector < 32) { // Sectors 0..31 has 4 blocks each
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b1f      	cmp	r3, #31
 80018e2:	d80a      	bhi.n	80018fa <PICC_DumpMifareClassicSectorToSerial+0x2a>
		no_of_blocks = 4;
 80018e4:	2304      	movs	r3, #4
 80018e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		firstBlock = sector * no_of_blocks;
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018f0:	fb12 f303 	smulbb	r3, r2, r3
 80018f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80018f8:	e011      	b.n	800191e <PICC_DumpMifareClassicSectorToSerial+0x4e>
	}
	else if (sector < 40) { // Sectors 32-39 has 16 blocks each
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b27      	cmp	r3, #39	; 0x27
 80018fe:	f200 827a 	bhi.w	8001df6 <PICC_DumpMifareClassicSectorToSerial+0x526>
		no_of_blocks = 16;
 8001902:	2310      	movs	r3, #16
 8001904:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		firstBlock = 128 + (sector - 32) * no_of_blocks;
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	3b20      	subs	r3, #32
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001912:	fb12 f303 	smulbb	r3, r2, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	3b80      	subs	r3, #128	; 0x80
 800191a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		
	// Dump blocks, highest address first.
	byte byteCount;
	byte buffer[18];
	byte blockAddr;
	isSectorTrailer = true;
 800191e:	2301      	movs	r3, #1
 8001920:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	invertedError = false;	// Avoid "unused variable" warning.
 8001924:	2300      	movs	r3, #0
 8001926:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	for (int8_t blockOffset = no_of_blocks - 1; blockOffset >= 0; blockOffset--) {
 800192a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800192e:	3b01      	subs	r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001936:	e257      	b.n	8001de8 <PICC_DumpMifareClassicSectorToSerial+0x518>
		blockAddr = firstBlock + blockOffset;
 8001938:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800193c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001940:	4413      	add	r3, r2
 8001942:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		// Sector number - only on first line
		if (isSectorTrailer) {
 8001946:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800194a:	2b00      	cmp	r3, #0
 800194c:	d019      	beq.n	8001982 <PICC_DumpMifareClassicSectorToSerial+0xb2>
			if(sector < 10)
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b09      	cmp	r3, #9
 8001952:	d805      	bhi.n	8001960 <PICC_DumpMifareClassicSectorToSerial+0x90>
				Serial.print("   ",STR); // Pad with spaces
 8001954:	4b84      	ldr	r3, [pc, #528]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2100      	movs	r1, #0
 800195a:	4884      	ldr	r0, [pc, #528]	; (8001b6c <PICC_DumpMifareClassicSectorToSerial+0x29c>)
 800195c:	4798      	blx	r3
 800195e:	e004      	b.n	800196a <PICC_DumpMifareClassicSectorToSerial+0x9a>
			else
				Serial.print("  ",STR); // Pad with spaces
 8001960:	4b81      	ldr	r3, [pc, #516]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2100      	movs	r1, #0
 8001966:	4882      	ldr	r0, [pc, #520]	; (8001b70 <PICC_DumpMifareClassicSectorToSerial+0x2a0>)
 8001968:	4798      	blx	r3
			Serial.print(F(sector),DEC);
 800196a:	4b7f      	ldr	r3, [pc, #508]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	79fa      	ldrb	r2, [r7, #7]
 8001970:	2102      	movs	r1, #2
 8001972:	4610      	mov	r0, r2
 8001974:	4798      	blx	r3
			Serial.print("   ",STR);
 8001976:	4b7c      	ldr	r3, [pc, #496]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2100      	movs	r1, #0
 800197c:	487b      	ldr	r0, [pc, #492]	; (8001b6c <PICC_DumpMifareClassicSectorToSerial+0x29c>)
 800197e:	4798      	blx	r3
 8001980:	e004      	b.n	800198c <PICC_DumpMifareClassicSectorToSerial+0xbc>
		}
		else {
			Serial.print("       ",STR);
 8001982:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2100      	movs	r1, #0
 8001988:	487a      	ldr	r0, [pc, #488]	; (8001b74 <PICC_DumpMifareClassicSectorToSerial+0x2a4>)
 800198a:	4798      	blx	r3
		}
		// Block number
		if(blockAddr < 10)
 800198c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001990:	2b09      	cmp	r3, #9
 8001992:	d805      	bhi.n	80019a0 <PICC_DumpMifareClassicSectorToSerial+0xd0>
			Serial.print("   ",STR); // Pad with spaces
 8001994:	4b74      	ldr	r3, [pc, #464]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2100      	movs	r1, #0
 800199a:	4874      	ldr	r0, [pc, #464]	; (8001b6c <PICC_DumpMifareClassicSectorToSerial+0x29c>)
 800199c:	4798      	blx	r3
 800199e:	e00e      	b.n	80019be <PICC_DumpMifareClassicSectorToSerial+0xee>
		else {
			if(blockAddr < 100)
 80019a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019a4:	2b63      	cmp	r3, #99	; 0x63
 80019a6:	d805      	bhi.n	80019b4 <PICC_DumpMifareClassicSectorToSerial+0xe4>
				Serial.print("  ",STR); // Pad with spaces
 80019a8:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2100      	movs	r1, #0
 80019ae:	4870      	ldr	r0, [pc, #448]	; (8001b70 <PICC_DumpMifareClassicSectorToSerial+0x2a0>)
 80019b0:	4798      	blx	r3
 80019b2:	e004      	b.n	80019be <PICC_DumpMifareClassicSectorToSerial+0xee>
			else
				Serial.print(" ",STR); // Pad with spaces
 80019b4:	4b6c      	ldr	r3, [pc, #432]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2100      	movs	r1, #0
 80019ba:	486f      	ldr	r0, [pc, #444]	; (8001b78 <PICC_DumpMifareClassicSectorToSerial+0x2a8>)
 80019bc:	4798      	blx	r3
		}
		Serial.print(F(blockAddr),DEC);
 80019be:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80019c6:	2102      	movs	r1, #2
 80019c8:	4610      	mov	r0, r2
 80019ca:	4798      	blx	r3
		Serial.print("  ",STR);
 80019cc:	4b66      	ldr	r3, [pc, #408]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2100      	movs	r1, #0
 80019d2:	4867      	ldr	r0, [pc, #412]	; (8001b70 <PICC_DumpMifareClassicSectorToSerial+0x2a0>)
 80019d4:	4798      	blx	r3
		// Establish encrypted communications before reading the first block
		if (isSectorTrailer) {
 80019d6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d01e      	beq.n	8001a1c <PICC_DumpMifareClassicSectorToSerial+0x14c>
			status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_A, firstBlock, key, uid);
 80019de:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	2060      	movs	r0, #96	; 0x60
 80019e8:	f7ff fc1d 	bl	8001226 <PCD_Authenticate>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			if (status != STATUS_OK) {
 80019f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d010      	beq.n	8001a1c <PICC_DumpMifareClassicSectorToSerial+0x14c>
				Serial.print("PCD_Authenticate() failed: ",STR);
 80019fa:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2100      	movs	r1, #0
 8001a00:	485e      	ldr	r0, [pc, #376]	; (8001b7c <PICC_DumpMifareClassicSectorToSerial+0x2ac>)
 8001a02:	4798      	blx	r3
				Serial.println(GetStatusCodeName(status),STR);
 8001a04:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001a06:	689c      	ldr	r4, [r3, #8]
 8001a08:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fc99 	bl	8001344 <GetStatusCodeName>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	47a0      	blx	r4
				return;
 8001a1a:	e1ed      	b.n	8001df8 <PICC_DumpMifareClassicSectorToSerial+0x528>
			}
		}
		// Read block
		byteCount = sizeof(buffer);
 8001a1c:	2312      	movs	r3, #18
 8001a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = MIFARE_Read(blockAddr, buffer, &byteCount);
 8001a22:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001a26:	f107 0114 	add.w	r1, r7, #20
 8001a2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fc51 	bl	80012d6 <MIFARE_Read>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (status != STATUS_OK) {
 8001a3a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d010      	beq.n	8001a64 <PICC_DumpMifareClassicSectorToSerial+0x194>
			Serial.print("MIFARE_Read() failed: ",STR);
 8001a42:	4b49      	ldr	r3, [pc, #292]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2100      	movs	r1, #0
 8001a48:	484d      	ldr	r0, [pc, #308]	; (8001b80 <PICC_DumpMifareClassicSectorToSerial+0x2b0>)
 8001a4a:	4798      	blx	r3
			Serial.println(GetStatusCodeName(status),STR);
 8001a4c:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001a4e:	689c      	ldr	r4, [r3, #8]
 8001a50:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fc75 	bl	8001344 <GetStatusCodeName>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	47a0      	blx	r4
			continue;
 8001a62:	e1ba      	b.n	8001dda <PICC_DumpMifareClassicSectorToSerial+0x50a>
		}
		// Dump data
		for (byte index = 0; index < 16; index++) {
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001a6a:	e03c      	b.n	8001ae6 <PICC_DumpMifareClassicSectorToSerial+0x216>
			if(buffer[index] < 0x10){
 8001a6c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a70:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001a74:	4413      	add	r3, r2
 8001a76:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001a7a:	2b0f      	cmp	r3, #15
 8001a7c:	d811      	bhi.n	8001aa2 <PICC_DumpMifareClassicSectorToSerial+0x1d2>
				Serial.print(" 0",STR);
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2100      	movs	r1, #0
 8001a84:	483f      	ldr	r0, [pc, #252]	; (8001b84 <PICC_DumpMifareClassicSectorToSerial+0x2b4>)
 8001a86:	4798      	blx	r3
				Serial.print(buffer[index], HEX);
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001a90:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001a94:	440a      	add	r2, r1
 8001a96:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4798      	blx	r3
 8001aa0:	e010      	b.n	8001ac4 <PICC_DumpMifareClassicSectorToSerial+0x1f4>
			}
			else{

				Serial.print(" ",STR);
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4833      	ldr	r0, [pc, #204]	; (8001b78 <PICC_DumpMifareClassicSectorToSerial+0x2a8>)
 8001aaa:	4798      	blx	r3
				Serial.print(buffer[index] & 0xFF, HEX);
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001ab4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001ab8:	440a      	add	r2, r1
 8001aba:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4798      	blx	r3
			}
			if ((index % 4) == 3) {
 8001ac4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d104      	bne.n	8001adc <PICC_DumpMifareClassicSectorToSerial+0x20c>
				Serial.print(" ",STR);
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <PICC_DumpMifareClassicSectorToSerial+0x298>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4827      	ldr	r0, [pc, #156]	; (8001b78 <PICC_DumpMifareClassicSectorToSerial+0x2a8>)
 8001ada:	4798      	blx	r3
		for (byte index = 0; index < 16; index++) {
 8001adc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001ae6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001aea:	2b0f      	cmp	r3, #15
 8001aec:	d9be      	bls.n	8001a6c <PICC_DumpMifareClassicSectorToSerial+0x19c>
			}
		}
		// Parse sector trailer data
		if (isSectorTrailer) {
 8001aee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80b8 	beq.w	8001c68 <PICC_DumpMifareClassicSectorToSerial+0x398>
			c1  = buffer[7] >> 4;
 8001af8:	7efb      	ldrb	r3, [r7, #27]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			c2  = buffer[8] & 0xF;
 8001b00:	7f3b      	ldrb	r3, [r7, #28]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			c3  = buffer[8] >> 4;
 8001b0a:	7f3b      	ldrb	r3, [r7, #28]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			c1_ = buffer[6] & 0xF;
 8001b12:	7ebb      	ldrb	r3, [r7, #26]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			c2_ = buffer[6] >> 4;
 8001b1c:	7ebb      	ldrb	r3, [r7, #26]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			c3_ = buffer[7] & 0xF;
 8001b24:	7efb      	ldrb	r3, [r7, #27]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			invertedError = (c1 != (~c1_ & 0xF)) || (c2 != (~c2_ & 0xF)) || (c3 != (~c3_ & 0xF));
 8001b2e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001b32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001b36:	43db      	mvns	r3, r3
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d111      	bne.n	8001b64 <PICC_DumpMifareClassicSectorToSerial+0x294>
 8001b40:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001b44:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d108      	bne.n	8001b64 <PICC_DumpMifareClassicSectorToSerial+0x294>
 8001b52:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001b56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d011      	beq.n	8001b88 <PICC_DumpMifareClassicSectorToSerial+0x2b8>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e010      	b.n	8001b8a <PICC_DumpMifareClassicSectorToSerial+0x2ba>
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	0800987c 	.word	0x0800987c
 8001b70:	08009880 	.word	0x08009880
 8001b74:	08009884 	.word	0x08009884
 8001b78:	0800980c 	.word	0x0800980c
 8001b7c:	0800988c 	.word	0x0800988c
 8001b80:	080098a8 	.word	0x080098a8
 8001b84:	08009808 	.word	0x08009808
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			g[0] = ((c1 & 1) << 2) | ((c2 & 1) << 1) | ((c3 & 1) << 0);
 8001b8e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	b25b      	sxtb	r3, r3
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	b25a      	sxtb	r2, r3
 8001b9c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b25a      	sxtb	r2, r3
 8001bae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			g[1] = ((c1 & 2) << 1) | ((c2 & 2) << 0) | ((c3 & 2) >> 1);
 8001bc2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	b25a      	sxtb	r2, r3
 8001bd0:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	b25a      	sxtb	r2, r3
 8001bde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001be2:	105b      	asrs	r3, r3, #1
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b25b      	sxtb	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			g[2] = ((c1 & 4) << 0) | ((c2 & 4) >> 1) | ((c3 & 4) >> 2);
 8001bf6:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	b25a      	sxtb	r2, r3
 8001c00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c04:	105b      	asrs	r3, r3, #1
 8001c06:	b25b      	sxtb	r3, r3
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b25a      	sxtb	r2, r3
 8001c12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c16:	109b      	asrs	r3, r3, #2
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	b25b      	sxtb	r3, r3
 8001c20:	4313      	orrs	r3, r2
 8001c22:	b25b      	sxtb	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			g[3] = ((c1 & 8) >> 1) | ((c2 & 8) >> 2) | ((c3 & 8) >> 3);
 8001c2a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c2e:	105b      	asrs	r3, r3, #1
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	b25a      	sxtb	r2, r3
 8001c38:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c3c:	109b      	asrs	r3, r3, #2
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	4313      	orrs	r3, r2
 8001c48:	b25a      	sxtb	r2, r3
 8001c4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c4e:	10db      	asrs	r3, r3, #3
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			isSectorTrailer = false;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		}
		
		// Which access group is this block in?
		if (no_of_blocks == 4) {
 8001c68:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d107      	bne.n	8001c80 <PICC_DumpMifareClassicSectorToSerial+0x3b0>
			group = blockOffset;
 8001c70:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001c74:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			firstInGroup = true;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001c7e:	e020      	b.n	8001cc2 <PICC_DumpMifareClassicSectorToSerial+0x3f2>
		}
		else {
			group = blockOffset / 5;
 8001c80:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001c84:	4a5e      	ldr	r2, [pc, #376]	; (8001e00 <PICC_DumpMifareClassicSectorToSerial+0x530>)
 8001c86:	fb82 1203 	smull	r1, r2, r2, r3
 8001c8a:	1052      	asrs	r2, r2, #1
 8001c8c:	17db      	asrs	r3, r3, #31
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			firstInGroup = (group == 3) || (group != (blockOffset + 1) / 5);
 8001c96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d00c      	beq.n	8001cb8 <PICC_DumpMifareClassicSectorToSerial+0x3e8>
 8001c9e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001ca2:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	4955      	ldr	r1, [pc, #340]	; (8001e00 <PICC_DumpMifareClassicSectorToSerial+0x530>)
 8001caa:	fb81 0103 	smull	r0, r1, r1, r3
 8001cae:	1049      	asrs	r1, r1, #1
 8001cb0:	17db      	asrs	r3, r3, #31
 8001cb2:	1acb      	subs	r3, r1, r3
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <PICC_DumpMifareClassicSectorToSerial+0x3ec>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <PICC_DumpMifareClassicSectorToSerial+0x3ee>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		}
		
		if (firstInGroup) {
 8001cc2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d04a      	beq.n	8001d60 <PICC_DumpMifareClassicSectorToSerial+0x490>
			// Print access bits
			Serial.print(" [ ",STR);
 8001cca:	4b4e      	ldr	r3, [pc, #312]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2100      	movs	r1, #0
 8001cd0:	484d      	ldr	r0, [pc, #308]	; (8001e08 <PICC_DumpMifareClassicSectorToSerial+0x538>)
 8001cd2:	4798      	blx	r3
			Serial.print((const char*)((g[group] >> 2) & 1), DEC);
 8001cd4:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001cdc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001ce0:	440a      	add	r2, r1
 8001ce2:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001ce6:	0892      	lsrs	r2, r2, #2
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	f002 0201 	and.w	r2, r2, #1
 8001cee:	2102      	movs	r1, #2
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4798      	blx	r3
			Serial.print(" ",STR);
 8001cf4:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4844      	ldr	r0, [pc, #272]	; (8001e0c <PICC_DumpMifareClassicSectorToSerial+0x53c>)
 8001cfc:	4798      	blx	r3
			Serial.print((const char*)((g[group] >> 1) & 1), DEC);
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001d06:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001d0a:	440a      	add	r2, r1
 8001d0c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001d10:	0852      	lsrs	r2, r2, #1
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f002 0201 	and.w	r2, r2, #1
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4798      	blx	r3
			Serial.print(" ",STR);
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2100      	movs	r1, #0
 8001d24:	4839      	ldr	r0, [pc, #228]	; (8001e0c <PICC_DumpMifareClassicSectorToSerial+0x53c>)
 8001d26:	4798      	blx	r3
			Serial.print((const char*)((g[group] >> 0) & 1), DEC);
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001d30:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001d34:	440a      	add	r2, r1
 8001d36:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001d3a:	f002 0201 	and.w	r2, r2, #1
 8001d3e:	2102      	movs	r1, #2
 8001d40:	4610      	mov	r0, r2
 8001d42:	4798      	blx	r3
			Serial.print(" ] ",STR);
 8001d44:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4831      	ldr	r0, [pc, #196]	; (8001e10 <PICC_DumpMifareClassicSectorToSerial+0x540>)
 8001d4c:	4798      	blx	r3
			if (invertedError) {
 8001d4e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <PICC_DumpMifareClassicSectorToSerial+0x490>
				Serial.print(" Inverted access bits did not match! ",STR);
 8001d56:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	482d      	ldr	r0, [pc, #180]	; (8001e14 <PICC_DumpMifareClassicSectorToSerial+0x544>)
 8001d5e:	4798      	blx	r3
			}
		}
		
		if (group != 3 && (g[group] == 1 || g[group] == 6)) { // Not a sector trailer, a value block
 8001d60:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d033      	beq.n	8001dd0 <PICC_DumpMifareClassicSectorToSerial+0x500>
 8001d68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d70:	4413      	add	r3, r2
 8001d72:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d008      	beq.n	8001d8c <PICC_DumpMifareClassicSectorToSerial+0x4bc>
 8001d7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d7e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d82:	4413      	add	r3, r2
 8001d84:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d88:	2b06      	cmp	r3, #6
 8001d8a:	d121      	bne.n	8001dd0 <PICC_DumpMifareClassicSectorToSerial+0x500>
			int32_t value = (((int32_t)buffer[3])<<24) | (((int32_t)buffer[2])<<16) | (((int32_t)buffer[1])<<8) | ((int32_t)buffer[0]);
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	061a      	lsls	r2, r3, #24
 8001d90:	7dbb      	ldrb	r3, [r7, #22]
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	431a      	orrs	r2, r3
 8001d96:	7d7b      	ldrb	r3, [r7, #21]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	7d3a      	ldrb	r2, [r7, #20]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
			Serial.print(" Value=0x",STR);
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2100      	movs	r1, #0
 8001da8:	481b      	ldr	r0, [pc, #108]	; (8001e18 <PICC_DumpMifareClassicSectorToSerial+0x548>)
 8001daa:	4798      	blx	r3
			Serial.print(F(value), HEX);
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db2:	2101      	movs	r1, #1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4798      	blx	r3
			Serial.print(" Adr=0x",STR);
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4817      	ldr	r0, [pc, #92]	; (8001e1c <PICC_DumpMifareClassicSectorToSerial+0x54c>)
 8001dc0:	4798      	blx	r3
			Serial.print(F(buffer[12]), HEX);
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dca:	2101      	movs	r1, #1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4798      	blx	r3
		}
		Serial.println("",STR);
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <PICC_DumpMifareClassicSectorToSerial+0x534>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4812      	ldr	r0, [pc, #72]	; (8001e20 <PICC_DumpMifareClassicSectorToSerial+0x550>)
 8001dd8:	4798      	blx	r3
	for (int8_t blockOffset = no_of_blocks - 1; blockOffset >= 0; blockOffset--) {
 8001dda:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001de8:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f6bf ada3 	bge.w	8001938 <PICC_DumpMifareClassicSectorToSerial+0x68>
	}
	
	return;
 8001df2:	bf00      	nop
 8001df4:	e000      	b.n	8001df8 <PICC_DumpMifareClassicSectorToSerial+0x528>
		return;
 8001df6:	bf00      	nop
} // End PICC_DumpMifareClassicSectorToSerial()
 8001df8:	3744      	adds	r7, #68	; 0x44
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	66666667 	.word	0x66666667
 8001e04:	20000000 	.word	0x20000000
 8001e08:	080098c0 	.word	0x080098c0
 8001e0c:	0800980c 	.word	0x0800980c
 8001e10:	080098c4 	.word	0x080098c4
 8001e14:	080098c8 	.word	0x080098c8
 8001e18:	080098f0 	.word	0x080098f0
 8001e1c:	080098fc 	.word	0x080098fc
 8001e20:	080097f8 	.word	0x080097f8

08001e24 <PICC_DumpMifareUltralightToSerial>:

/**
 * Dumps memory contents of a MIFARE Ultralight PICC.
 */
void PICC_DumpMifareUltralightToSerial() {
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
	StatusCode status;
	byte byteCount;
	byte buffer[18];
	byte i;
	
	Serial.println("Page  0  1  2  3",STR);
 8001e2a:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <PICC_DumpMifareUltralightToSerial+0x11c>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4844      	ldr	r0, [pc, #272]	; (8001f44 <PICC_DumpMifareUltralightToSerial+0x120>)
 8001e32:	4798      	blx	r3
	// Try the mpages of the original Ultralight. Ultralight C has more pages.
	for (byte page = 0; page < 16; page +=4) { // Read returns data for 4 pages at a time.
 8001e34:	2300      	movs	r3, #0
 8001e36:	77fb      	strb	r3, [r7, #31]
 8001e38:	e07a      	b.n	8001f30 <PICC_DumpMifareUltralightToSerial+0x10c>
		// Read pages
		byteCount = sizeof(buffer);
 8001e3a:	2312      	movs	r3, #18
 8001e3c:	76fb      	strb	r3, [r7, #27]
		status = MIFARE_Read(page, buffer, &byteCount);
 8001e3e:	f107 021b 	add.w	r2, r7, #27
 8001e42:	f107 0108 	add.w	r1, r7, #8
 8001e46:	7ffb      	ldrb	r3, [r7, #31]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fa44 	bl	80012d6 <MIFARE_Read>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	773b      	strb	r3, [r7, #28]
		if (status != STATUS_OK) {
 8001e52:	7f3b      	ldrb	r3, [r7, #28]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00f      	beq.n	8001e78 <PICC_DumpMifareUltralightToSerial+0x54>
			Serial.print("MIFARE_Read() failed: ",STR);
 8001e58:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <PICC_DumpMifareUltralightToSerial+0x11c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	483a      	ldr	r0, [pc, #232]	; (8001f48 <PICC_DumpMifareUltralightToSerial+0x124>)
 8001e60:	4798      	blx	r3
			Serial.println(GetStatusCodeName(status),STR);
 8001e62:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <PICC_DumpMifareUltralightToSerial+0x11c>)
 8001e64:	689c      	ldr	r4, [r3, #8]
 8001e66:	7f3b      	ldrb	r3, [r7, #28]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fa6b 	bl	8001344 <GetStatusCodeName>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	47a0      	blx	r4
			break;
 8001e76:	e05e      	b.n	8001f36 <PICC_DumpMifareUltralightToSerial+0x112>
		}
		// Dump data
		for (byte offset = 0; offset < 4; offset++) {
 8001e78:	2300      	movs	r3, #0
 8001e7a:	77bb      	strb	r3, [r7, #30]
 8001e7c:	e052      	b.n	8001f24 <PICC_DumpMifareUltralightToSerial+0x100>
			i = page + offset;
 8001e7e:	7ffa      	ldrb	r2, [r7, #31]
 8001e80:	7fbb      	ldrb	r3, [r7, #30]
 8001e82:	4413      	add	r3, r2
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	71fb      	strb	r3, [r7, #7]
			if(i < 10)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2b09      	cmp	r3, #9
 8001e8c:	d805      	bhi.n	8001e9a <PICC_DumpMifareUltralightToSerial+0x76>
				Serial.print("  ",STR); // Pad with spaces
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <PICC_DumpMifareUltralightToSerial+0x11c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2100      	movs	r1, #0
 8001e94:	482d      	ldr	r0, [pc, #180]	; (8001f4c <PICC_DumpMifareUltralightToSerial+0x128>)
 8001e96:	4798      	blx	r3
 8001e98:	e004      	b.n	8001ea4 <PICC_DumpMifareUltralightToSerial+0x80>
			else
				Serial.print(" ",STR); // Pad with spaces
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <PICC_DumpMifareUltralightToSerial+0x11c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	482b      	ldr	r0, [pc, #172]	; (8001f50 <PICC_DumpMifareUltralightToSerial+0x12c>)
 8001ea2:	4798      	blx	r3
			Serial.print(F(&i),DEC);
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <PICC_DumpMifareUltralightToSerial+0x11c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	1dfa      	adds	r2, r7, #7
 8001eaa:	2102      	movs	r1, #2
 8001eac:	4610      	mov	r0, r2
 8001eae:	4798      	blx	r3
			Serial.print("  ",STR);
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <PICC_DumpMifareUltralightToSerial+0x11c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4825      	ldr	r0, [pc, #148]	; (8001f4c <PICC_DumpMifareUltralightToSerial+0x128>)
 8001eb8:	4798      	blx	r3
			for (byte index = 0; index < 4; index++) {
 8001eba:	2300      	movs	r3, #0
 8001ebc:	777b      	strb	r3, [r7, #29]
 8001ebe:	e026      	b.n	8001f0e <PICC_DumpMifareUltralightToSerial+0xea>
				i = 4 * offset + index;
 8001ec0:	7fbb      	ldrb	r3, [r7, #30]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	7f7b      	ldrb	r3, [r7, #29]
 8001ec8:	4413      	add	r3, r2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	71fb      	strb	r3, [r7, #7]
				if(buffer[i] < 0x10)
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	f107 0220 	add.w	r2, r7, #32
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	d805      	bhi.n	8001eea <PICC_DumpMifareUltralightToSerial+0xc6>
					Serial.print(" 0",STR);
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <PICC_DumpMifareUltralightToSerial+0x11c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	481b      	ldr	r0, [pc, #108]	; (8001f54 <PICC_DumpMifareUltralightToSerial+0x130>)
 8001ee6:	4798      	blx	r3
 8001ee8:	e004      	b.n	8001ef4 <PICC_DumpMifareUltralightToSerial+0xd0>
				else
					Serial.print(" ",STR);
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <PICC_DumpMifareUltralightToSerial+0x11c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4817      	ldr	r0, [pc, #92]	; (8001f50 <PICC_DumpMifareUltralightToSerial+0x12c>)
 8001ef2:	4798      	blx	r3
				Serial.print(F(&buffer[i]), HEX);
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <PICC_DumpMifareUltralightToSerial+0x11c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	79fa      	ldrb	r2, [r7, #7]
 8001efa:	4611      	mov	r1, r2
 8001efc:	f107 0208 	add.w	r2, r7, #8
 8001f00:	440a      	add	r2, r1
 8001f02:	2101      	movs	r1, #1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4798      	blx	r3
			for (byte index = 0; index < 4; index++) {
 8001f08:	7f7b      	ldrb	r3, [r7, #29]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	777b      	strb	r3, [r7, #29]
 8001f0e:	7f7b      	ldrb	r3, [r7, #29]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d9d5      	bls.n	8001ec0 <PICC_DumpMifareUltralightToSerial+0x9c>
			}
			Serial.println("",STR);
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <PICC_DumpMifareUltralightToSerial+0x11c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2100      	movs	r1, #0
 8001f1a:	480f      	ldr	r0, [pc, #60]	; (8001f58 <PICC_DumpMifareUltralightToSerial+0x134>)
 8001f1c:	4798      	blx	r3
		for (byte offset = 0; offset < 4; offset++) {
 8001f1e:	7fbb      	ldrb	r3, [r7, #30]
 8001f20:	3301      	adds	r3, #1
 8001f22:	77bb      	strb	r3, [r7, #30]
 8001f24:	7fbb      	ldrb	r3, [r7, #30]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d9a9      	bls.n	8001e7e <PICC_DumpMifareUltralightToSerial+0x5a>
	for (byte page = 0; page < 16; page +=4) { // Read returns data for 4 pages at a time.
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	77fb      	strb	r3, [r7, #31]
 8001f30:	7ffb      	ldrb	r3, [r7, #31]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	d981      	bls.n	8001e3a <PICC_DumpMifareUltralightToSerial+0x16>
		}
	}
} // End PICC_DumpMifareUltralightToSerial()
 8001f36:	bf00      	nop
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000
 8001f44:	08009904 	.word	0x08009904
 8001f48:	080098a8 	.word	0x080098a8
 8001f4c:	08009880 	.word	0x08009880
 8001f50:	0800980c 	.word	0x0800980c
 8001f54:	08009808 	.word	0x08009808
 8001f58:	080097f8 	.word	0x080097f8

08001f5c <PICC_IsNewCardPresent>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return boolean
 */
boolean PICC_IsNewCardPresent() {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
 8001f62:	2302      	movs	r3, #2
 8001f64:	70fb      	strb	r3, [r7, #3]

	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
 8001f66:	2100      	movs	r1, #0
 8001f68:	2024      	movs	r0, #36	; 0x24
 8001f6a:	f7fe fb61 	bl	8000630 <PCD_WriteRegister>
	PCD_WriteRegister(RxModeReg, 0x00);
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2026      	movs	r0, #38	; 0x26
 8001f72:	f7fe fb5d 	bl	8000630 <PCD_WriteRegister>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
 8001f76:	2126      	movs	r1, #38	; 0x26
 8001f78:	2048      	movs	r0, #72	; 0x48
 8001f7a:	f7fe fb59 	bl	8000630 <PCD_WriteRegister>

	StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
 8001f7e:	1cfa      	adds	r2, r7, #3
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fe94 	bl	8000cb2 <PICC_RequestA>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
	return (result == STATUS_OK || result == STATUS_COLLISION);
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <PICC_IsNewCardPresent+0x3e>
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d101      	bne.n	8001f9e <PICC_IsNewCardPresent+0x42>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <PICC_IsNewCardPresent+0x44>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
} // End PICC_IsNewCardPresent()
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <PICC_ReadCardSerial>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return boolean
 */
boolean PICC_ReadCardSerial() {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
	StatusCode result = PICC_Select(&uid,0);
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4807      	ldr	r0, [pc, #28]	; (8001fd4 <PICC_ReadCardSerial+0x28>)
 8001fb6:	f7fe fec4 	bl	8000d42 <PICC_Select>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	return (result == STATUS_OK);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
} // End 
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000228 	.word	0x20000228

08001fd8 <DWT_Delay_ms>:
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <DWT_Delay_ms+0x40>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8001fe6:	f002 fcb7 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <DWT_Delay_ms+0x44>)
 8001fee:	fba3 2302 	umull	r2, r3, r3, r2
 8001ff2:	099b      	lsrs	r3, r3, #6
 8001ff4:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8002000:	bf00      	nop
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <DWT_Delay_ms+0x40>)
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad2      	subs	r2, r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	d3f8      	bcc.n	8002002 <DWT_Delay_ms+0x2a>
}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	e0001000 	.word	0xe0001000
 800201c:	10624dd3 	.word	0x10624dd3

08002020 <DWT_Delay_Init>:
volatile uint32_t gu32_ticks = 0;
#endif

#if (SYSDELAY == 1 & HWTIMER == 0)
uint32_t DWT_Delay_Init(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <DWT_Delay_Init+0x58>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a13      	ldr	r2, [pc, #76]	; (8002078 <DWT_Delay_Init+0x58>)
 800202a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800202e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <DWT_Delay_Init+0x58>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a10      	ldr	r2, [pc, #64]	; (8002078 <DWT_Delay_Init+0x58>)
 8002036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <DWT_Delay_Init+0x5c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <DWT_Delay_Init+0x5c>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <DWT_Delay_Init+0x5c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0b      	ldr	r2, [pc, #44]	; (800207c <DWT_Delay_Init+0x5c>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <DWT_Delay_Init+0x5c>)
 8002056:	2200      	movs	r2, #0
 8002058:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800205a:	bf00      	nop
    __ASM volatile ("NOP");
 800205c:	bf00      	nop
    __ASM volatile ("NOP");
 800205e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <DWT_Delay_Init+0x5c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8002068:	2300      	movs	r3, #0
 800206a:	e000      	b.n	800206e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800206c:	2301      	movs	r3, #1
    }
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000edf0 	.word	0xe000edf0
 800207c:	e0001000 	.word	0xe0001000

08002080 <PIN_INPUT>:
}
#endif

/*Pin I/O functions*/
void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = GPIO_Pin;
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002094:	2301      	movs	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	4619      	mov	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fd1c 	bl	8002adc <HAL_GPIO_Init>
}
 80020a4:	bf00      	nop
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fd04 	bl	8002adc <HAL_GPIO_Init>
}
 80020d4:	bf00      	nop
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <print>:

/*Serial functions*/
void print(const char* text, strDef det){
 80020dc:	b5b0      	push	{r4, r5, r7, lr}
 80020de:	b09e      	sub	sp, #120	; 0x78
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]

	DWT_Delay_ms(1);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7ff ff75 	bl	8001fd8 <DWT_Delay_ms>
	if(serialIsConnected()){
 80020ee:	f000 f8ef 	bl	80022d0 <serialIsConnected>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d05f      	beq.n	80021b8 <print+0xdc>
		if(det == STR)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <print+0x36>
		{
			CDC_Transmit_FS((uint8_t*) text, strlen(text));
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7fe f86e 	bl	80001e0 <strlen>
 8002104:	4603      	mov	r3, r0
 8002106:	b29b      	uxth	r3, r3
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f006 f974 	bl	80083f8 <CDC_Transmit_FS>

			sprintf(buff, "%u", (unsigned int)text);
			CDC_Transmit_FS((uint8_t*) buff, strlen(buff));
		}
	}
}
 8002110:	e052      	b.n	80021b8 <print+0xdc>
		else if(det == HEX)
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d114      	bne.n	8002142 <print+0x66>
			sprintf(buff, "%X", (unsigned int)text);
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	4928      	ldr	r1, [pc, #160]	; (80021c0 <print+0xe4>)
 8002120:	4618      	mov	r0, r3
 8002122:	f006 fea7 	bl	8008e74 <siprintf>
			CDC_Transmit_FS((uint8_t*) buff, strlen(buff));
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe f858 	bl	80001e0 <strlen>
 8002130:	4603      	mov	r3, r0
 8002132:	b29a      	uxth	r2, r3
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f006 f95c 	bl	80083f8 <CDC_Transmit_FS>
}
 8002140:	e03a      	b.n	80021b8 <print+0xdc>
		else if(det == DEC){
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d137      	bne.n	80021b8 <print+0xdc>
 8002148:	466b      	mov	r3, sp
 800214a:	461d      	mov	r5, r3
			char buff[strlen(text)];
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7fe f847 	bl	80001e0 <strlen>
 8002152:	4603      	mov	r3, r0
 8002154:	3b01      	subs	r3, #1
 8002156:	677b      	str	r3, [r7, #116]	; 0x74
 8002158:	4601      	mov	r1, r0
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	f04f 0400 	mov.w	r4, #0
 8002166:	00d4      	lsls	r4, r2, #3
 8002168:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800216c:	00cb      	lsls	r3, r1, #3
 800216e:	4601      	mov	r1, r0
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	f04f 0400 	mov.w	r4, #0
 800217c:	00d4      	lsls	r4, r2, #3
 800217e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002182:	00cb      	lsls	r3, r1, #3
 8002184:	1dc3      	adds	r3, r0, #7
 8002186:	08db      	lsrs	r3, r3, #3
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	ebad 0d03 	sub.w	sp, sp, r3
 800218e:	466b      	mov	r3, sp
 8002190:	3300      	adds	r3, #0
 8002192:	673b      	str	r3, [r7, #112]	; 0x70
			sprintf(buff, "%u", (unsigned int)text);
 8002194:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	490a      	ldr	r1, [pc, #40]	; (80021c4 <print+0xe8>)
 800219a:	4618      	mov	r0, r3
 800219c:	f006 fe6a 	bl	8008e74 <siprintf>
			CDC_Transmit_FS((uint8_t*) buff, strlen(buff));
 80021a0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80021a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f81b 	bl	80001e0 <strlen>
 80021aa:	4603      	mov	r3, r0
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	4619      	mov	r1, r3
 80021b0:	4620      	mov	r0, r4
 80021b2:	f006 f921 	bl	80083f8 <CDC_Transmit_FS>
 80021b6:	46ad      	mov	sp, r5
}
 80021b8:	bf00      	nop
 80021ba:	3778      	adds	r7, #120	; 0x78
 80021bc:	46bd      	mov	sp, r7
 80021be:	bdb0      	pop	{r4, r5, r7, pc}
 80021c0:	08009bd8 	.word	0x08009bd8
 80021c4:	08009bdc 	.word	0x08009bdc

080021c8 <println>:

void println(const char* text, strDef det){
 80021c8:	b5b0      	push	{r4, r5, r7, lr}
 80021ca:	b09e      	sub	sp, #120	; 0x78
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]

	DWT_Delay_ms(1);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff feff 	bl	8001fd8 <DWT_Delay_ms>
	if(serialIsConnected()){
 80021da:	f000 f879 	bl	80022d0 <serialIsConnected>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d06a      	beq.n	80022ba <println+0xf2>
		if(det == STR)
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d114      	bne.n	8002214 <println+0x4c>
		{
			char buff[100];

			sprintf(buff, "%s\r\n",text);
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4934      	ldr	r1, [pc, #208]	; (80022c4 <println+0xfc>)
 80021f2:	4618      	mov	r0, r3
 80021f4:	f006 fe3e 	bl	8008e74 <siprintf>
			CDC_Transmit_FS((uint8_t*) buff, strlen(buff));
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fd ffef 	bl	80001e0 <strlen>
 8002202:	4603      	mov	r3, r0
 8002204:	b29a      	uxth	r2, r3
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f006 f8f3 	bl	80083f8 <CDC_Transmit_FS>

			sprintf(buff, "%u\r\n", (unsigned int)text);
			CDC_Transmit_FS((uint8_t*) buff, strlen(buff));
		}
	}
}
 8002212:	e052      	b.n	80022ba <println+0xf2>
		else if(det == HEX)
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d114      	bne.n	8002244 <println+0x7c>
			sprintf(buff, "%02X\r\n", (unsigned int)text);
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	4929      	ldr	r1, [pc, #164]	; (80022c8 <println+0x100>)
 8002222:	4618      	mov	r0, r3
 8002224:	f006 fe26 	bl	8008e74 <siprintf>
			CDC_Transmit_FS((uint8_t*) buff, strlen(buff));
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4618      	mov	r0, r3
 800222e:	f7fd ffd7 	bl	80001e0 <strlen>
 8002232:	4603      	mov	r3, r0
 8002234:	b29a      	uxth	r2, r3
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f006 f8db 	bl	80083f8 <CDC_Transmit_FS>
}
 8002242:	e03a      	b.n	80022ba <println+0xf2>
		else if(det == DEC){
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d137      	bne.n	80022ba <println+0xf2>
 800224a:	466b      	mov	r3, sp
 800224c:	461d      	mov	r5, r3
			char buff[strlen(text)];
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fd ffc6 	bl	80001e0 <strlen>
 8002254:	4603      	mov	r3, r0
 8002256:	3b01      	subs	r3, #1
 8002258:	677b      	str	r3, [r7, #116]	; 0x74
 800225a:	4601      	mov	r1, r0
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	f04f 0400 	mov.w	r4, #0
 8002268:	00d4      	lsls	r4, r2, #3
 800226a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800226e:	00cb      	lsls	r3, r1, #3
 8002270:	4601      	mov	r1, r0
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	f04f 0400 	mov.w	r4, #0
 800227e:	00d4      	lsls	r4, r2, #3
 8002280:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002284:	00cb      	lsls	r3, r1, #3
 8002286:	1dc3      	adds	r3, r0, #7
 8002288:	08db      	lsrs	r3, r3, #3
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	ebad 0d03 	sub.w	sp, sp, r3
 8002290:	466b      	mov	r3, sp
 8002292:	3300      	adds	r3, #0
 8002294:	673b      	str	r3, [r7, #112]	; 0x70
			sprintf(buff, "%u\r\n", (unsigned int)text);
 8002296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	490c      	ldr	r1, [pc, #48]	; (80022cc <println+0x104>)
 800229c:	4618      	mov	r0, r3
 800229e:	f006 fde9 	bl	8008e74 <siprintf>
			CDC_Transmit_FS((uint8_t*) buff, strlen(buff));
 80022a2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80022a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fd ff9a 	bl	80001e0 <strlen>
 80022ac:	4603      	mov	r3, r0
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	4619      	mov	r1, r3
 80022b2:	4620      	mov	r0, r4
 80022b4:	f006 f8a0 	bl	80083f8 <CDC_Transmit_FS>
 80022b8:	46ad      	mov	sp, r5
}
 80022ba:	bf00      	nop
 80022bc:	3778      	adds	r7, #120	; 0x78
 80022be:	46bd      	mov	sp, r7
 80022c0:	bdb0      	pop	{r4, r5, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	08009be0 	.word	0x08009be0
 80022c8:	08009be8 	.word	0x08009be8
 80022cc:	08009bf0 	.word	0x08009bf0

080022d0 <serialIsConnected>:

boolean serialIsConnected()
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
	if(hUsbDeviceFS.dev_state == CDC_SET_CONTROL_LINE_STATE)
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <serialIsConnected+0x2c>)
 80022d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80022da:	2b22      	cmp	r3, #34	; 0x22
 80022dc:	d104      	bne.n	80022e8 <serialIsConnected+0x18>
//    	else
//    	{
//    		Serial.isConnected = FALSE;
//    		return FALSE;
//    	}
		Serial.isConnected = TRUE;
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <serialIsConnected+0x30>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e003      	b.n	80022f0 <serialIsConnected+0x20>
	}
	Serial.isConnected = FALSE;
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <serialIsConnected+0x30>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
	return FALSE;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000290 	.word	0x20000290
 8002300:	20000000 	.word	0x20000000

08002304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <MX_GPIO_Init+0xb4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <MX_GPIO_Init+0xb4>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <MX_GPIO_Init+0xb4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <MX_GPIO_Init+0xb4>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <MX_GPIO_Init+0xb4>)
 8002340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <MX_GPIO_Init+0xb4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <MX_GPIO_Init+0xb4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <MX_GPIO_Init+0xb4>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <MX_GPIO_Init+0xb4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_GPIO_Init+0xb4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <MX_GPIO_Init+0xb4>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_GPIO_Init+0xb4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RC522_Reset_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	21c0      	movs	r1, #192	; 0xc0
 800238e:	480b      	ldr	r0, [pc, #44]	; (80023bc <MX_GPIO_Init+0xb8>)
 8002390:	f000 fd3e 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RC522_Reset_Pin|RC522_CS_Pin;
 8002394:	23c0      	movs	r3, #192	; 0xc0
 8002396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002398:	2301      	movs	r3, #1
 800239a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	4804      	ldr	r0, [pc, #16]	; (80023bc <MX_GPIO_Init+0xb8>)
 80023ac:	f000 fb96 	bl	8002adc <HAL_GPIO_Init>

}
 80023b0:	bf00      	nop
 80023b2:	3728      	adds	r7, #40	; 0x28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020400 	.word	0x40020400

080023c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023c4:	f000 f9e4 	bl	8002790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023c8:	f000 f826 	bl	8002418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023cc:	f7ff ff9a 	bl	8002304 <MX_GPIO_Init>
  MX_SPI1_Init();
 80023d0:	f000 f88e 	bl	80024f0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80023d4:	f005 ff52 	bl	800827c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  while(DWT_Delay_Init());
 80023d8:	bf00      	nop
 80023da:	f7ff fe21 	bl	8002020 <DWT_Delay_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1fa      	bne.n	80023da <main+0x1a>
  MFRC522();
 80023e4:	f7fe f91e 	bl	8000624 <MFRC522>
  while(serialIsConnected());
 80023e8:	bf00      	nop
 80023ea:	f7ff ff71 	bl	80022d0 <serialIsConnected>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1fa      	bne.n	80023ea <main+0x2a>
  PCD_DumpVersionToSerial();
 80023f4:	f7ff f8f4 	bl	80015e0 <PCD_DumpVersionToSerial>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.
		if (PICC_IsNewCardPresent()) {
 80023f8:	f7ff fdb0 	bl	8001f5c <PICC_IsNewCardPresent>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0fa      	beq.n	80023f8 <main+0x38>
			if (PICC_ReadCardSerial()) {
 8002402:	f7ff fdd3 	bl	8001fac <PICC_ReadCardSerial>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f5      	beq.n	80023f8 <main+0x38>
				PICC_DumpToSerial(&uid);
 800240c:	4801      	ldr	r0, [pc, #4]	; (8002414 <main+0x54>)
 800240e:	f7ff f94d 	bl	80016ac <PICC_DumpToSerial>
		if (PICC_IsNewCardPresent()) {
 8002412:	e7f1      	b.n	80023f8 <main+0x38>
 8002414:	20000228 	.word	0x20000228

08002418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b094      	sub	sp, #80	; 0x50
 800241c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800241e:	f107 0320 	add.w	r3, r7, #32
 8002422:	2230      	movs	r2, #48	; 0x30
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f006 fc63 	bl	8008cf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <SystemClock_Config+0xc8>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <SystemClock_Config+0xc8>)
 8002446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244a:	6413      	str	r3, [r2, #64]	; 0x40
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <SystemClock_Config+0xc8>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <SystemClock_Config+0xcc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a20      	ldr	r2, [pc, #128]	; (80024e4 <SystemClock_Config+0xcc>)
 8002462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <SystemClock_Config+0xcc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002474:	2301      	movs	r3, #1
 8002476:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800247e:	2302      	movs	r3, #2
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002482:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002486:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002488:	230f      	movs	r3, #15
 800248a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800248c:	2390      	movs	r3, #144	; 0x90
 800248e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002490:	2304      	movs	r3, #4
 8002492:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002494:	2305      	movs	r3, #5
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002498:	f107 0320 	add.w	r3, r7, #32
 800249c:	4618      	mov	r0, r3
 800249e:	f001 fe53 	bl	8004148 <HAL_RCC_OscConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024a8:	f000 f81e 	bl	80024e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ac:	230f      	movs	r3, #15
 80024ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b0:	2302      	movs	r3, #2
 80024b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	2101      	movs	r1, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f002 f8ad 	bl	8004628 <HAL_RCC_ClockConfig>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80024d4:	f000 f808 	bl	80024e8 <Error_Handler>
  }
}
 80024d8:	bf00      	nop
 80024da:	3750      	adds	r7, #80	; 0x50
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40007000 	.word	0x40007000

080024e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024ee:	e7fe      	b.n	80024ee <Error_Handler+0x6>

080024f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80024f4:	4b17      	ldr	r3, [pc, #92]	; (8002554 <MX_SPI1_Init+0x64>)
 80024f6:	4a18      	ldr	r2, [pc, #96]	; (8002558 <MX_SPI1_Init+0x68>)
 80024f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <MX_SPI1_Init+0x64>)
 80024fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002502:	4b14      	ldr	r3, [pc, #80]	; (8002554 <MX_SPI1_Init+0x64>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <MX_SPI1_Init+0x64>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_SPI1_Init+0x64>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <MX_SPI1_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_SPI1_Init+0x64>)
 800251c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002520:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_SPI1_Init+0x64>)
 8002524:	2218      	movs	r2, #24
 8002526:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <MX_SPI1_Init+0x64>)
 800252a:	2200      	movs	r2, #0
 800252c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_SPI1_Init+0x64>)
 8002530:	2200      	movs	r2, #0
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <MX_SPI1_Init+0x64>)
 8002536:	2200      	movs	r2, #0
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_SPI1_Init+0x64>)
 800253c:	220a      	movs	r2, #10
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002540:	4804      	ldr	r0, [pc, #16]	; (8002554 <MX_SPI1_Init+0x64>)
 8002542:	f002 fa15 	bl	8004970 <HAL_SPI_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800254c:	f7ff ffcc 	bl	80024e8 <Error_Handler>
  }

}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000234 	.word	0x20000234
 8002558:	40013000 	.word	0x40013000

0800255c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_SPI_MspInit+0x84>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d12b      	bne.n	80025d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <HAL_SPI_MspInit+0x88>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a17      	ldr	r2, [pc, #92]	; (80025e4 <HAL_SPI_MspInit+0x88>)
 8002588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_SPI_MspInit+0x88>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_SPI_MspInit+0x88>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <HAL_SPI_MspInit+0x88>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_SPI_MspInit+0x88>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RC522_SCK_Pin|RC522_MISO_Pin|RC522_MOSI_Pin;
 80025b6:	2338      	movs	r3, #56	; 0x38
 80025b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c2:	2303      	movs	r3, #3
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025c6:	2305      	movs	r3, #5
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	; (80025e8 <HAL_SPI_MspInit+0x8c>)
 80025d2:	f000 fa83 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025d6:	bf00      	nop
 80025d8:	3728      	adds	r7, #40	; 0x28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40013000 	.word	0x40013000
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40020400 	.word	0x40020400

080025ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_MspInit+0x4c>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_MspInit+0x4c>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <HAL_MspInit+0x4c>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_MspInit+0x4c>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a08      	ldr	r2, [pc, #32]	; (8002638 <HAL_MspInit+0x4c>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_MspInit+0x4c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800

0800263c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <NMI_Handler+0x4>

08002642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <MemManage_Handler+0x4>

0800264e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <BusFault_Handler+0x4>

08002654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <UsageFault_Handler+0x4>

0800265a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002688:	f000 f8d4 	bl	8002834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}

08002690 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <OTG_FS_IRQHandler+0x10>)
 8002696:	f000 fd24 	bl	80030e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20001760 	.word	0x20001760

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d4:	f006 fac8 	bl	8008c68 <__errno>
 80026d8:	4602      	mov	r2, r0
 80026da:	230c      	movs	r3, #12
 80026dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20020000 	.word	0x20020000
 8002704:	00000400 	.word	0x00000400
 8002708:	20000218 	.word	0x20000218
 800270c:	20001b70 	.word	0x20001b70

08002710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <SystemInit+0x28>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	4a07      	ldr	r2, [pc, #28]	; (8002738 <SystemInit+0x28>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <SystemInit+0x28>)
 8002726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800272a:	609a      	str	r2, [r3, #8]
#endif
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800273c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002774 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002740:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002742:	e003      	b.n	800274c <LoopCopyDataInit>

08002744 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002746:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002748:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800274a:	3104      	adds	r1, #4

0800274c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800274c:	480b      	ldr	r0, [pc, #44]	; (800277c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002750:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002752:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002754:	d3f6      	bcc.n	8002744 <CopyDataInit>
  ldr  r2, =_sbss
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002758:	e002      	b.n	8002760 <LoopFillZerobss>

0800275a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800275a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800275c:	f842 3b04 	str.w	r3, [r2], #4

08002760 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002762:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002764:	d3f9      	bcc.n	800275a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002766:	f7ff ffd3 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800276a:	f006 fa83 	bl	8008c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800276e:	f7ff fe27 	bl	80023c0 <main>
  bx  lr    
 8002772:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002774:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002778:	08009c94 	.word	0x08009c94
  ldr  r0, =_sdata
 800277c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002780:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8002784:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8002788:	20001b6c 	.word	0x20001b6c

0800278c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800278c:	e7fe      	b.n	800278c <ADC_IRQHandler>
	...

08002790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <HAL_Init+0x40>)
 800279a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <HAL_Init+0x40>)
 80027a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <HAL_Init+0x40>)
 80027b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b8:	2003      	movs	r0, #3
 80027ba:	f000 f94d 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 f808 	bl	80027d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c4:	f7ff ff12 	bl	80025ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023c00 	.word	0x40023c00

080027d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_InitTick+0x54>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_InitTick+0x58>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f965 	bl	8002ac2 <HAL_SYSTICK_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e00e      	b.n	8002820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b0f      	cmp	r3, #15
 8002806:	d80a      	bhi.n	800281e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002808:	2200      	movs	r2, #0
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f000 f92d 	bl	8002a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002814:	4a06      	ldr	r2, [pc, #24]	; (8002830 <HAL_InitTick+0x5c>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000018 	.word	0x20000018
 800282c:	20000020 	.word	0x20000020
 8002830:	2000001c 	.word	0x2000001c

08002834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x20>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_IncTick+0x24>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4413      	add	r3, r2
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_IncTick+0x24>)
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000020 	.word	0x20000020
 8002858:	2000028c 	.word	0x2000028c

0800285c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return uwTick;
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_GetTick+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	2000028c 	.word	0x2000028c

08002874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff ffee 	bl	800285c <HAL_GetTick>
 8002880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d005      	beq.n	800289a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_Delay+0x40>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800289a:	bf00      	nop
 800289c:	f7ff ffde 	bl	800285c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d8f7      	bhi.n	800289c <HAL_Delay+0x28>
  {
  }
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000020 	.word	0x20000020

080028b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ea:	4a04      	ldr	r2, [pc, #16]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	60d3      	str	r3, [r2, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	db0b      	blt.n	8002946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	4907      	ldr	r1, [pc, #28]	; (8002954 <__NVIC_EnableIRQ+0x38>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2001      	movs	r0, #1
 800293e:	fa00 f202 	lsl.w	r2, r0, r2
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
         );
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f7ff ff8e 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff29 	bl	80028b8 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff3e 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff8e 	bl	80029ac <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff31 	bl	800291c <__NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffa2 	bl	8002a14 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e159      	b.n	8002dac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8148 	bne.w	8002da6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d00b      	beq.n	8002b36 <HAL_GPIO_Init+0x5a>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d007      	beq.n	8002b36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b2a:	2b11      	cmp	r3, #17
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b12      	cmp	r3, #18
 8002b34:	d130      	bne.n	8002b98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2203      	movs	r2, #3
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 0201 	and.w	r2, r3, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0xfc>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b12      	cmp	r3, #18
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a2 	beq.w	8002da6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b56      	ldr	r3, [pc, #344]	; (8002dc0 <HAL_GPIO_Init+0x2e4>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a55      	ldr	r2, [pc, #340]	; (8002dc0 <HAL_GPIO_Init+0x2e4>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_GPIO_Init+0x2e4>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7e:	4a51      	ldr	r2, [pc, #324]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a48      	ldr	r2, [pc, #288]	; (8002dc8 <HAL_GPIO_Init+0x2ec>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d019      	beq.n	8002cde <HAL_GPIO_Init+0x202>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a47      	ldr	r2, [pc, #284]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0x1fe>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a46      	ldr	r2, [pc, #280]	; (8002dd0 <HAL_GPIO_Init+0x2f4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a45      	ldr	r2, [pc, #276]	; (8002dd4 <HAL_GPIO_Init+0x2f8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x1f6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a44      	ldr	r2, [pc, #272]	; (8002dd8 <HAL_GPIO_Init+0x2fc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_Init+0x1f2>
 8002cca:	2304      	movs	r3, #4
 8002ccc:	e008      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cce:	2307      	movs	r3, #7
 8002cd0:	e006      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e004      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e002      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	f002 0203 	and.w	r2, r2, #3
 8002ce6:	0092      	lsls	r2, r2, #2
 8002ce8:	4093      	lsls	r3, r2
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf0:	4934      	ldr	r1, [pc, #208]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cfe:	4b37      	ldr	r3, [pc, #220]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d22:	4a2e      	ldr	r2, [pc, #184]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d28:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d4c:	4a23      	ldr	r2, [pc, #140]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d52:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d76:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d7c:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da0:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3301      	adds	r3, #1
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	f67f aea2 	bls.w	8002af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db4:	bf00      	nop
 8002db6:	3724      	adds	r7, #36	; 0x24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40013800 	.word	0x40013800
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	40020400 	.word	0x40020400
 8002dd0:	40020800 	.word	0x40020800
 8002dd4:	40020c00 	.word	0x40020c00
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40013c00 	.word	0x40013c00

08002de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e001      	b.n	8002e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e2c:	e003      	b.n	8002e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	041a      	lsls	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e44:	b08f      	sub	sp, #60	; 0x3c
 8002e46:	af0a      	add	r7, sp, #40	; 0x28
 8002e48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e10f      	b.n	8003074 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f005 fc08 	bl	8008684 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2203      	movs	r2, #3
 8002e78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d102      	bne.n	8002e8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 fbd5 	bl	8005642 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	687e      	ldr	r6, [r7, #4]
 8002ea0:	466d      	mov	r5, sp
 8002ea2:	f106 0410 	add.w	r4, r6, #16
 8002ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eb6:	1d33      	adds	r3, r6, #4
 8002eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f002 faac 	bl	8005418 <USB_CoreInit>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0d0      	b.n	8003074 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 fbc3 	bl	8005664 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	e04a      	b.n	8002f7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	333d      	adds	r3, #61	; 0x3d
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	333c      	adds	r3, #60	; 0x3c
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	b298      	uxth	r0, r3
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3342      	adds	r3, #66	; 0x42
 8002f20:	4602      	mov	r2, r0
 8002f22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	333f      	adds	r3, #63	; 0x3f
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	3344      	adds	r3, #68	; 0x44
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	3348      	adds	r3, #72	; 0x48
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3350      	adds	r3, #80	; 0x50
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	3301      	adds	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d3af      	bcc.n	8002ee4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e044      	b.n	8003014 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	3301      	adds	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	d3b5      	bcc.n	8002f8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	687e      	ldr	r6, [r7, #4]
 8003026:	466d      	mov	r5, sp
 8003028:	f106 0410 	add.w	r4, r6, #16
 800302c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003034:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003038:	e885 0003 	stmia.w	r5, {r0, r1}
 800303c:	1d33      	adds	r3, r6, #4
 800303e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003040:	6838      	ldr	r0, [r7, #0]
 8003042:	f002 fb39 	bl	80056b8 <USB_DevInit>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e00d      	b.n	8003074 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f003 fb81 	bl	8006774 <USB_DevDisconnect>

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800307c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_PCD_Start+0x1c>
 8003094:	2302      	movs	r3, #2
 8003096:	e020      	b.n	80030da <HAL_PCD_Start+0x5e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d109      	bne.n	80030bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d005      	beq.n	80030bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f002 faad 	bl	8005620 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f003 fb31 	bl	8006732 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030e2:	b590      	push	{r4, r7, lr}
 80030e4:	b08d      	sub	sp, #52	; 0x34
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 fbef 	bl	80068dc <USB_GetMode>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	f040 839d 	bne.w	8003840 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fb53 	bl	80067b6 <USB_ReadInterrupts>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8393 	beq.w	800383e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f003 fb4a 	bl	80067b6 <USB_ReadInterrupts>
 8003122:	4603      	mov	r3, r0
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b02      	cmp	r3, #2
 800312a:	d107      	bne.n	800313c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f002 0202 	and.w	r2, r2, #2
 800313a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f003 fb38 	bl	80067b6 <USB_ReadInterrupts>
 8003146:	4603      	mov	r3, r0
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b10      	cmp	r3, #16
 800314e:	d161      	bne.n	8003214 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0210 	bic.w	r2, r2, #16
 800315e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	f003 020f 	and.w	r2, r3, #15
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	3304      	adds	r3, #4
 800317e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	0c5b      	lsrs	r3, r3, #17
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	2b02      	cmp	r3, #2
 800318a:	d124      	bne.n	80031d6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d035      	beq.n	8003204 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	6a38      	ldr	r0, [r7, #32]
 80031ac:	f003 f99e 	bl	80064ec <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031bc:	441a      	add	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ce:	441a      	add	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	619a      	str	r2, [r3, #24]
 80031d4:	e016      	b.n	8003204 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	0c5b      	lsrs	r3, r3, #17
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d110      	bne.n	8003204 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031e8:	2208      	movs	r2, #8
 80031ea:	4619      	mov	r1, r3
 80031ec:	6a38      	ldr	r0, [r7, #32]
 80031ee:	f003 f97d 	bl	80064ec <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031fe:	441a      	add	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0210 	orr.w	r2, r2, #16
 8003212:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f003 facc 	bl	80067b6 <USB_ReadInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003224:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003228:	d16e      	bne.n	8003308 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f003 fad2 	bl	80067dc <USB_ReadDevAllOutEpInterrupt>
 8003238:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800323a:	e062      	b.n	8003302 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d057      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f003 faf7 	bl	8006844 <USB_ReadDevOutEPInterrupt>
 8003256:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326e:	461a      	mov	r2, r3
 8003270:	2301      	movs	r3, #1
 8003272:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fdb0 	bl	8003ddc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00c      	beq.n	80032a0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003292:	461a      	mov	r2, r3
 8003294:	2308      	movs	r3, #8
 8003296:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 feaa 	bl	8003ff4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b6:	461a      	mov	r2, r3
 80032b8:	2310      	movs	r3, #16
 80032ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d2:	461a      	mov	r2, r3
 80032d4:	2320      	movs	r3, #32
 80032d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ee:	461a      	mov	r2, r3
 80032f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	3301      	adds	r3, #1
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	d199      	bne.n	800323c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f003 fa52 	bl	80067b6 <USB_ReadInterrupts>
 8003312:	4603      	mov	r3, r0
 8003314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003318:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800331c:	f040 80c0 	bne.w	80034a0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f003 fa73 	bl	8006810 <USB_ReadDevAllInEpInterrupt>
 800332a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003330:	e0b2      	b.n	8003498 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80a7 	beq.w	800348c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f003 fa99 	bl	8006880 <USB_ReadDevInEPInterrupt>
 800334e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d057      	beq.n	800340a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	2201      	movs	r2, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43db      	mvns	r3, r3
 8003374:	69f9      	ldr	r1, [r7, #28]
 8003376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800337a:	4013      	ands	r3, r2
 800337c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338a:	461a      	mov	r2, r3
 800338c:	2301      	movs	r3, #1
 800338e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d132      	bne.n	80033fe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	3348      	adds	r3, #72	; 0x48
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4403      	add	r3, r0
 80033b8:	3344      	adds	r3, #68	; 0x44
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4419      	add	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4403      	add	r3, r0
 80033cc:	3348      	adds	r3, #72	; 0x48
 80033ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d113      	bne.n	80033fe <HAL_PCD_IRQHandler+0x31c>
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3350      	adds	r3, #80	; 0x50
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d108      	bne.n	80033fe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033f6:	461a      	mov	r2, r3
 80033f8:	2101      	movs	r1, #1
 80033fa:	f003 faa1 	bl	8006940 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	b2db      	uxtb	r3, r3
 8003402:	4619      	mov	r1, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f005 f9be 	bl	8008786 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003420:	461a      	mov	r2, r3
 8003422:	2308      	movs	r3, #8
 8003424:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343c:	461a      	mov	r2, r3
 800343e:	2310      	movs	r3, #16
 8003440:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	4413      	add	r3, r2
 8003454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003458:	461a      	mov	r2, r3
 800345a:	2340      	movs	r3, #64	; 0x40
 800345c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003474:	461a      	mov	r2, r3
 8003476:	2302      	movs	r3, #2
 8003478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fc1b 	bl	8003cc2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	3301      	adds	r3, #1
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	2b00      	cmp	r3, #0
 800349c:	f47f af49 	bne.w	8003332 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f003 f986 	bl	80067b6 <USB_ReadInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034b4:	d122      	bne.n	80034fc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d108      	bne.n	80034e6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034dc:	2100      	movs	r1, #0
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fe26 	bl	8004130 <HAL_PCDEx_LPM_Callback>
 80034e4:	e002      	b.n	80034ec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f005 f9ba 	bl	8008860 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f003 f958 	bl	80067b6 <USB_ReadInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003510:	d112      	bne.n	8003538 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f005 f976 	bl	8008814 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003536:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f003 f93a 	bl	80067b6 <USB_ReadInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354c:	f040 80c7 	bne.w	80036de <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2110      	movs	r1, #16
 800356a:	4618      	mov	r0, r3
 800356c:	f002 fa08 	bl	8005980 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003570:	2300      	movs	r3, #0
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003574:	e056      	b.n	8003624 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	461a      	mov	r2, r3
 8003584:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003588:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359a:	0151      	lsls	r1, r2, #5
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	440a      	add	r2, r1
 80035a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035a8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ba:	0151      	lsls	r1, r2, #5
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	440a      	add	r2, r1
 80035c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d6:	461a      	mov	r2, r3
 80035d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ee:	0151      	lsls	r1, r2, #5
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	440a      	add	r2, r1
 80035f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	440a      	add	r2, r1
 8003614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003618:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800361c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	3301      	adds	r3, #1
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362a:	429a      	cmp	r2, r3
 800362c:	d3a3      	bcc.n	8003576 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800363c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003640:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365a:	f043 030b 	orr.w	r3, r3, #11
 800365e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003670:	f043 030b 	orr.w	r3, r3, #11
 8003674:	6453      	str	r3, [r2, #68]	; 0x44
 8003676:	e015      	b.n	80036a4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003686:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800368a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800368e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369e:	f043 030b 	orr.w	r3, r3, #11
 80036a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036c8:	461a      	mov	r2, r3
 80036ca:	f003 f939 	bl	8006940 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f003 f867 	bl	80067b6 <USB_ReadInterrupts>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f2:	d124      	bne.n	800373e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 f8fd 	bl	80068f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f002 f99d 	bl	8005a42 <USB_GetDevSpeed>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681c      	ldr	r4, [r3, #0]
 8003714:	f001 f920 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 8003718:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	4620      	mov	r0, r4
 8003724:	f001 feda 	bl	80054dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f005 f854 	bl	80087d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800373c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f003 f837 	bl	80067b6 <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d10a      	bne.n	8003768 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f005 f831 	bl	80087ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f002 0208 	and.w	r2, r2, #8
 8003766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f003 f822 	bl	80067b6 <USB_ReadInterrupts>
 8003772:	4603      	mov	r3, r0
 8003774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377c:	d10f      	bne.n	800379e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f005 f889 	bl	80088a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800379c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f003 f807 	bl	80067b6 <USB_ReadInterrupts>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037b2:	d10f      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f005 f85c 	bl	800887c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80037d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f002 ffec 	bl	80067b6 <USB_ReadInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e8:	d10a      	bne.n	8003800 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f005 f86a 	bl	80088c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f002 ffd6 	bl	80067b6 <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b04      	cmp	r3, #4
 8003812:	d115      	bne.n	8003840 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f005 f85a 	bl	80088e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	e000      	b.n	8003840 <HAL_PCD_IRQHandler+0x75e>
      return;
 800383e:	bf00      	nop
    }
  }
}
 8003840:	3734      	adds	r7, #52	; 0x34
 8003842:	46bd      	mov	sp, r7
 8003844:	bd90      	pop	{r4, r7, pc}

08003846 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_PCD_SetAddress+0x1a>
 800385c:	2302      	movs	r3, #2
 800385e:	e013      	b.n	8003888 <HAL_PCD_SetAddress+0x42>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f002 ff34 	bl	80066e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	70fb      	strb	r3, [r7, #3]
 80038a2:	460b      	mov	r3, r1
 80038a4:	803b      	strh	r3, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	da0f      	bge.n	80038d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	f003 020f 	and.w	r2, r3, #15
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	3338      	adds	r3, #56	; 0x38
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	3304      	adds	r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	705a      	strb	r2, [r3, #1]
 80038d4:	e00f      	b.n	80038f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	f003 020f 	and.w	r2, r3, #15
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	3304      	adds	r3, #4
 80038ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003902:	883a      	ldrh	r2, [r7, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	78ba      	ldrb	r2, [r7, #2]
 800390c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	785b      	ldrb	r3, [r3, #1]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003920:	78bb      	ldrb	r3, [r7, #2]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d102      	bne.n	800392c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_PCD_EP_Open+0xaa>
 8003936:	2302      	movs	r3, #2
 8003938:	e00e      	b.n	8003958 <HAL_PCD_EP_Open+0xc8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68f9      	ldr	r1, [r7, #12]
 8003948:	4618      	mov	r0, r3
 800394a:	f002 f89f 	bl	8005a8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003956:	7afb      	ldrb	r3, [r7, #11]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800396c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003970:	2b00      	cmp	r3, #0
 8003972:	da0f      	bge.n	8003994 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f003 020f 	and.w	r2, r3, #15
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	3338      	adds	r3, #56	; 0x38
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	3304      	adds	r3, #4
 800398a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	705a      	strb	r2, [r3, #1]
 8003992:	e00f      	b.n	80039b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	f003 020f 	and.w	r2, r3, #15
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	3304      	adds	r3, #4
 80039ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_PCD_EP_Close+0x6e>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e00e      	b.n	80039ec <HAL_PCD_EP_Close+0x8c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	4618      	mov	r0, r3
 80039de:	f002 f8dd 	bl	8005b9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	460b      	mov	r3, r1
 8003a02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a04:	7afb      	ldrb	r3, [r7, #11]
 8003a06:	f003 020f 	and.w	r2, r3, #15
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4413      	add	r3, r2
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2200      	movs	r2, #0
 8003a34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a36:	7afb      	ldrb	r3, [r7, #11]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d102      	bne.n	8003a50 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a50:	7afb      	ldrb	r3, [r7, #11]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	6979      	ldr	r1, [r7, #20]
 8003a68:	f002 fbb8 	bl	80061dc <USB_EP0StartXfer>
 8003a6c:	e008      	b.n	8003a80 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6979      	ldr	r1, [r7, #20]
 8003a7c:	f002 f96a 	bl	8005d54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	f003 020f 	and.w	r2, r3, #15
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003aac:	681b      	ldr	r3, [r3, #0]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aca:	7afb      	ldrb	r3, [r7, #11]
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	3338      	adds	r3, #56	; 0x38
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	3304      	adds	r3, #4
 8003ae0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2200      	movs	r2, #0
 8003af2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2201      	movs	r2, #1
 8003af8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003afa:	7afb      	ldrb	r3, [r7, #11]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d102      	bne.n	8003b14 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b14:	7afb      	ldrb	r3, [r7, #11]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6979      	ldr	r1, [r7, #20]
 8003b2c:	f002 fb56 	bl	80061dc <USB_EP0StartXfer>
 8003b30:	e008      	b.n	8003b44 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6979      	ldr	r1, [r7, #20]
 8003b40:	f002 f908 	bl	8005d54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	f003 020f 	and.w	r2, r3, #15
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d901      	bls.n	8003b6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e050      	b.n	8003c0e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	da0f      	bge.n	8003b94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	f003 020f 	and.w	r2, r3, #15
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	3338      	adds	r3, #56	; 0x38
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	3304      	adds	r3, #4
 8003b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	705a      	strb	r2, [r3, #1]
 8003b92:	e00d      	b.n	8003bb0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_PCD_EP_SetStall+0x82>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e01e      	b.n	8003c0e <HAL_PCD_EP_SetStall+0xc0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68f9      	ldr	r1, [r7, #12]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f002 fcad 	bl	800653e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	b2d9      	uxtb	r1, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f002 fe9e 	bl	8006940 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	f003 020f 	and.w	r2, r3, #15
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d901      	bls.n	8003c34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e042      	b.n	8003cba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	da0f      	bge.n	8003c5c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	f003 020f 	and.w	r2, r3, #15
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	3338      	adds	r3, #56	; 0x38
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4413      	add	r3, r2
 8003c50:	3304      	adds	r3, #4
 8003c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	705a      	strb	r2, [r3, #1]
 8003c5a:	e00f      	b.n	8003c7c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	3304      	adds	r3, #4
 8003c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_PCD_EP_ClrStall+0x86>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e00e      	b.n	8003cba <HAL_PCD_EP_ClrStall+0xa4>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f002 fcb5 	bl	800661a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b08a      	sub	sp, #40	; 0x28
 8003cc6:	af02      	add	r7, sp, #8
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	3338      	adds	r3, #56	; 0x38
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d901      	bls.n	8003cfa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06c      	b.n	8003dd4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d902      	bls.n	8003d16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3303      	adds	r3, #3
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d1e:	e02b      	b.n	8003d78 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d902      	bls.n	8003d3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	3303      	adds	r3, #3
 8003d40:	089b      	lsrs	r3, r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68d9      	ldr	r1, [r3, #12]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	4603      	mov	r3, r0
 8003d5a:	6978      	ldr	r0, [r7, #20]
 8003d5c:	f002 fb91 	bl	8006482 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	441a      	add	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	441a      	add	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d809      	bhi.n	8003da2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d203      	bcs.n	8003da2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1be      	bne.n	8003d20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d811      	bhi.n	8003dd2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	2201      	movs	r2, #1
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	6939      	ldr	r1, [r7, #16]
 8003dca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dce:	4013      	ands	r3, r2
 8003dd0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	333c      	adds	r3, #60	; 0x3c
 8003df4:	3304      	adds	r3, #4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	f040 80a0 	bne.w	8003f54 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d015      	beq.n	8003e4a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a72      	ldr	r2, [pc, #456]	; (8003fec <PCD_EP_OutXfrComplete_int+0x210>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	f240 80dd 	bls.w	8003fe2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80d7 	beq.w	8003fe2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e40:	461a      	mov	r2, r3
 8003e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e46:	6093      	str	r3, [r2, #8]
 8003e48:	e0cb      	b.n	8003fe2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e60:	461a      	mov	r2, r3
 8003e62:	2320      	movs	r3, #32
 8003e64:	6093      	str	r3, [r2, #8]
 8003e66:	e0bc      	b.n	8003fe2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 80b7 	bne.w	8003fe2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a5d      	ldr	r2, [pc, #372]	; (8003fec <PCD_EP_OutXfrComplete_int+0x210>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d90f      	bls.n	8003e9c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e92:	461a      	mov	r2, r3
 8003e94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e98:	6093      	str	r3, [r2, #8]
 8003e9a:	e0a2      	b.n	8003fe2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003eae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	0159      	lsls	r1, r3, #5
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	440b      	add	r3, r1
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003ec2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4403      	add	r3, r0
 8003ed2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ed6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003eea:	6819      	ldr	r1, [r3, #0]
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4403      	add	r3, r0
 8003efa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4419      	add	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4403      	add	r3, r0
 8003f10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f14:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d114      	bne.n	8003f46 <PCD_EP_OutXfrComplete_int+0x16a>
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d108      	bne.n	8003f46 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2101      	movs	r1, #1
 8003f42:	f002 fcfd 	bl	8006940 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f004 fbff 	bl	8008750 <HAL_PCD_DataOutStageCallback>
 8003f52:	e046      	b.n	8003fe2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4a26      	ldr	r2, [pc, #152]	; (8003ff0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d124      	bne.n	8003fa6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f72:	461a      	mov	r2, r3
 8003f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f78:	6093      	str	r3, [r2, #8]
 8003f7a:	e032      	b.n	8003fe2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f92:	461a      	mov	r2, r3
 8003f94:	2320      	movs	r3, #32
 8003f96:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f004 fbd6 	bl	8008750 <HAL_PCD_DataOutStageCallback>
 8003fa4:	e01d      	b.n	8003fe2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d114      	bne.n	8003fd6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d108      	bne.n	8003fd6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	f002 fcb5 	bl	8006940 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f004 fbb7 	bl	8008750 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	4f54300a 	.word	0x4f54300a
 8003ff0:	4f54310a 	.word	0x4f54310a

08003ff4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	333c      	adds	r3, #60	; 0x3c
 800400c:	3304      	adds	r3, #4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a15      	ldr	r2, [pc, #84]	; (800407c <PCD_EP_OutSetupPacket_int+0x88>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d90e      	bls.n	8004048 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004040:	461a      	mov	r2, r3
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f004 fb6f 	bl	800872c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4a0a      	ldr	r2, [pc, #40]	; (800407c <PCD_EP_OutSetupPacket_int+0x88>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d90c      	bls.n	8004070 <PCD_EP_OutSetupPacket_int+0x7c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d108      	bne.n	8004070 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004068:	461a      	mov	r2, r3
 800406a:	2101      	movs	r1, #1
 800406c:	f002 fc68 	bl	8006940 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	4f54300a 	.word	0x4f54300a

08004080 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	70fb      	strb	r3, [r7, #3]
 800408c:	4613      	mov	r3, r2
 800408e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800409e:	883b      	ldrh	r3, [r7, #0]
 80040a0:	0419      	lsls	r1, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28
 80040ac:	e028      	b.n	8004100 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	4413      	add	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040bc:	2300      	movs	r3, #0
 80040be:	73fb      	strb	r3, [r7, #15]
 80040c0:	e00d      	b.n	80040de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	3340      	adds	r3, #64	; 0x40
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	4413      	add	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	3301      	adds	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d3ec      	bcc.n	80040c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040e8:	883b      	ldrh	r3, [r7, #0]
 80040ea:	0418      	lsls	r0, r3, #16
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6819      	ldr	r1, [r3, #0]
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	4302      	orrs	r2, r0
 80040f8:	3340      	adds	r3, #64	; 0x40
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e25b      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d075      	beq.n	8004252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004166:	4ba3      	ldr	r3, [pc, #652]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b04      	cmp	r3, #4
 8004170:	d00c      	beq.n	800418c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004172:	4ba0      	ldr	r3, [pc, #640]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800417a:	2b08      	cmp	r3, #8
 800417c:	d112      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417e:	4b9d      	ldr	r3, [pc, #628]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418a:	d10b      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	4b99      	ldr	r3, [pc, #612]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05b      	beq.n	8004250 <HAL_RCC_OscConfig+0x108>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d157      	bne.n	8004250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e236      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d106      	bne.n	80041bc <HAL_RCC_OscConfig+0x74>
 80041ae:	4b91      	ldr	r3, [pc, #580]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a90      	ldr	r2, [pc, #576]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e01d      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x98>
 80041c6:	4b8b      	ldr	r3, [pc, #556]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a8a      	ldr	r2, [pc, #552]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a87      	ldr	r2, [pc, #540]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041e0:	4b84      	ldr	r3, [pc, #528]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a83      	ldr	r2, [pc, #524]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b81      	ldr	r3, [pc, #516]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a80      	ldr	r2, [pc, #512]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fe fb2c 	bl	800285c <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004208:	f7fe fb28 	bl	800285c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e1fb      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421a:	4b76      	ldr	r3, [pc, #472]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0xc0>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fe fb18 	bl	800285c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004230:	f7fe fb14 	bl	800285c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e1e7      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	4b6c      	ldr	r3, [pc, #432]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0xe8>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d063      	beq.n	8004326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800425e:	4b65      	ldr	r3, [pc, #404]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426a:	4b62      	ldr	r3, [pc, #392]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004272:	2b08      	cmp	r3, #8
 8004274:	d11c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004276:	4b5f      	ldr	r3, [pc, #380]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d116      	bne.n	80042b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004282:	4b5c      	ldr	r3, [pc, #368]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_RCC_OscConfig+0x152>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d001      	beq.n	800429a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e1bb      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429a:	4b56      	ldr	r3, [pc, #344]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4952      	ldr	r1, [pc, #328]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ae:	e03a      	b.n	8004326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d020      	beq.n	80042fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b8:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <HAL_RCC_OscConfig+0x2b0>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042be:	f7fe facd 	bl	800285c <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c6:	f7fe fac9 	bl	800285c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e19c      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	4b46      	ldr	r3, [pc, #280]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e4:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4940      	ldr	r1, [pc, #256]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	600b      	str	r3, [r1, #0]
 80042f8:	e015      	b.n	8004326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fa:	4b3f      	ldr	r3, [pc, #252]	; (80043f8 <HAL_RCC_OscConfig+0x2b0>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe faac 	bl	800285c <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004308:	f7fe faa8 	bl	800285c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e17b      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431a:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d030      	beq.n	8004394 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d016      	beq.n	8004368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800433a:	4b30      	ldr	r3, [pc, #192]	; (80043fc <HAL_RCC_OscConfig+0x2b4>)
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fe fa8c 	bl	800285c <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004348:	f7fe fa88 	bl	800285c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e15b      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x200>
 8004366:	e015      	b.n	8004394 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004368:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_RCC_OscConfig+0x2b4>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436e:	f7fe fa75 	bl	800285c <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004376:	f7fe fa71 	bl	800285c <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e144      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800438a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f0      	bne.n	8004376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80a0 	beq.w	80044e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4a0e      	ldr	r2, [pc, #56]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c0:	6413      	str	r3, [r2, #64]	; 0x40
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_OscConfig+0x2b8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d121      	bne.n	8004422 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <HAL_RCC_OscConfig+0x2b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a07      	ldr	r2, [pc, #28]	; (8004400 <HAL_RCC_OscConfig+0x2b8>)
 80043e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ea:	f7fe fa37 	bl	800285c <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f0:	e011      	b.n	8004416 <HAL_RCC_OscConfig+0x2ce>
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800
 80043f8:	42470000 	.word	0x42470000
 80043fc:	42470e80 	.word	0x42470e80
 8004400:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004404:	f7fe fa2a 	bl	800285c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e0fd      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004416:	4b81      	ldr	r3, [pc, #516]	; (800461c <HAL_RCC_OscConfig+0x4d4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d106      	bne.n	8004438 <HAL_RCC_OscConfig+0x2f0>
 800442a:	4b7d      	ldr	r3, [pc, #500]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	4a7c      	ldr	r2, [pc, #496]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	6713      	str	r3, [r2, #112]	; 0x70
 8004436:	e01c      	b.n	8004472 <HAL_RCC_OscConfig+0x32a>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b05      	cmp	r3, #5
 800443e:	d10c      	bne.n	800445a <HAL_RCC_OscConfig+0x312>
 8004440:	4b77      	ldr	r3, [pc, #476]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	4a76      	ldr	r2, [pc, #472]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 8004446:	f043 0304 	orr.w	r3, r3, #4
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
 800444c:	4b74      	ldr	r3, [pc, #464]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	4a73      	ldr	r2, [pc, #460]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6713      	str	r3, [r2, #112]	; 0x70
 8004458:	e00b      	b.n	8004472 <HAL_RCC_OscConfig+0x32a>
 800445a:	4b71      	ldr	r3, [pc, #452]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a70      	ldr	r2, [pc, #448]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6713      	str	r3, [r2, #112]	; 0x70
 8004466:	4b6e      	ldr	r3, [pc, #440]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a6d      	ldr	r2, [pc, #436]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 800446c:	f023 0304 	bic.w	r3, r3, #4
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d015      	beq.n	80044a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fe f9ef 	bl	800285c <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004480:	e00a      	b.n	8004498 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fe f9eb 	bl	800285c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e0bc      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004498:	4b61      	ldr	r3, [pc, #388]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ee      	beq.n	8004482 <HAL_RCC_OscConfig+0x33a>
 80044a4:	e014      	b.n	80044d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a6:	f7fe f9d9 	bl	800285c <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fe f9d5 	bl	800285c <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e0a6      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c4:	4b56      	ldr	r3, [pc, #344]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ee      	bne.n	80044ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d6:	4b52      	ldr	r3, [pc, #328]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	4a51      	ldr	r2, [pc, #324]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 80044dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8092 	beq.w	8004610 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044ec:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d05c      	beq.n	80045b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d141      	bne.n	8004584 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004500:	4b48      	ldr	r3, [pc, #288]	; (8004624 <HAL_RCC_OscConfig+0x4dc>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fe f9a9 	bl	800285c <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450e:	f7fe f9a5 	bl	800285c <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e078      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004520:	4b3f      	ldr	r3, [pc, #252]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	019b      	lsls	r3, r3, #6
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	3b01      	subs	r3, #1
 8004546:	041b      	lsls	r3, r3, #16
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	061b      	lsls	r3, r3, #24
 8004550:	4933      	ldr	r1, [pc, #204]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004556:	4b33      	ldr	r3, [pc, #204]	; (8004624 <HAL_RCC_OscConfig+0x4dc>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fe f97e 	bl	800285c <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fe f97a 	bl	800285c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e04d      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004576:	4b2a      	ldr	r3, [pc, #168]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x41c>
 8004582:	e045      	b.n	8004610 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004584:	4b27      	ldr	r3, [pc, #156]	; (8004624 <HAL_RCC_OscConfig+0x4dc>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7fe f967 	bl	800285c <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004592:	f7fe f963 	bl	800285c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e036      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a4:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f0      	bne.n	8004592 <HAL_RCC_OscConfig+0x44a>
 80045b0:	e02e      	b.n	8004610 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e029      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045be:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_RCC_OscConfig+0x4d8>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d11c      	bne.n	800460c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d115      	bne.n	800460c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045e6:	4013      	ands	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d10d      	bne.n	800460c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d106      	bne.n	800460c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40007000 	.word	0x40007000
 8004620:	40023800 	.word	0x40023800
 8004624:	42470060 	.word	0x42470060

08004628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0cc      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800463c:	4b68      	ldr	r3, [pc, #416]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d90c      	bls.n	8004664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b65      	ldr	r3, [pc, #404]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b63      	ldr	r3, [pc, #396]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0b8      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d020      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800467c:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4a58      	ldr	r2, [pc, #352]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004694:	4b53      	ldr	r3, [pc, #332]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	4a52      	ldr	r2, [pc, #328]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800469e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a0:	4b50      	ldr	r3, [pc, #320]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	494d      	ldr	r1, [pc, #308]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d044      	beq.n	8004748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c6:	4b47      	ldr	r3, [pc, #284]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d119      	bne.n	8004706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e07f      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d003      	beq.n	80046e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e6:	4b3f      	ldr	r3, [pc, #252]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e06f      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f6:	4b3b      	ldr	r3, [pc, #236]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e067      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004706:	4b37      	ldr	r3, [pc, #220]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f023 0203 	bic.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4934      	ldr	r1, [pc, #208]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004718:	f7fe f8a0 	bl	800285c <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	e00a      	b.n	8004736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004720:	f7fe f89c 	bl	800285c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e04f      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004736:	4b2b      	ldr	r3, [pc, #172]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 020c 	and.w	r2, r3, #12
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	429a      	cmp	r2, r3
 8004746:	d1eb      	bne.n	8004720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004748:	4b25      	ldr	r3, [pc, #148]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d20c      	bcs.n	8004770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b22      	ldr	r3, [pc, #136]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b20      	ldr	r3, [pc, #128]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e032      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4916      	ldr	r1, [pc, #88]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800479a:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	490e      	ldr	r1, [pc, #56]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ae:	f000 f821 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 80047b2:	4601      	mov	r1, r0
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <HAL_RCC_ClockConfig+0x1c0>)
 80047c0:	5cd3      	ldrb	r3, [r2, r3]
 80047c2:	fa21 f303 	lsr.w	r3, r1, r3
 80047c6:	4a09      	ldr	r2, [pc, #36]	; (80047ec <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <HAL_RCC_ClockConfig+0x1c8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe f800 	bl	80027d4 <HAL_InitTick>

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40023c00 	.word	0x40023c00
 80047e4:	40023800 	.word	0x40023800
 80047e8:	08009c40 	.word	0x08009c40
 80047ec:	20000018 	.word	0x20000018
 80047f0:	2000001c 	.word	0x2000001c

080047f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	2300      	movs	r3, #0
 8004804:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800480a:	4b50      	ldr	r3, [pc, #320]	; (800494c <HAL_RCC_GetSysClockFreq+0x158>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b04      	cmp	r3, #4
 8004814:	d007      	beq.n	8004826 <HAL_RCC_GetSysClockFreq+0x32>
 8004816:	2b08      	cmp	r3, #8
 8004818:	d008      	beq.n	800482c <HAL_RCC_GetSysClockFreq+0x38>
 800481a:	2b00      	cmp	r3, #0
 800481c:	f040 808d 	bne.w	800493a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004820:	4b4b      	ldr	r3, [pc, #300]	; (8004950 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004822:	60bb      	str	r3, [r7, #8]
       break;
 8004824:	e08c      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004826:	4b4b      	ldr	r3, [pc, #300]	; (8004954 <HAL_RCC_GetSysClockFreq+0x160>)
 8004828:	60bb      	str	r3, [r7, #8]
      break;
 800482a:	e089      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800482c:	4b47      	ldr	r3, [pc, #284]	; (800494c <HAL_RCC_GetSysClockFreq+0x158>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004834:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004836:	4b45      	ldr	r3, [pc, #276]	; (800494c <HAL_RCC_GetSysClockFreq+0x158>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d023      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004842:	4b42      	ldr	r3, [pc, #264]	; (800494c <HAL_RCC_GetSysClockFreq+0x158>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	099b      	lsrs	r3, r3, #6
 8004848:	f04f 0400 	mov.w	r4, #0
 800484c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	ea03 0501 	and.w	r5, r3, r1
 8004858:	ea04 0602 	and.w	r6, r4, r2
 800485c:	4a3d      	ldr	r2, [pc, #244]	; (8004954 <HAL_RCC_GetSysClockFreq+0x160>)
 800485e:	fb02 f106 	mul.w	r1, r2, r6
 8004862:	2200      	movs	r2, #0
 8004864:	fb02 f205 	mul.w	r2, r2, r5
 8004868:	440a      	add	r2, r1
 800486a:	493a      	ldr	r1, [pc, #232]	; (8004954 <HAL_RCC_GetSysClockFreq+0x160>)
 800486c:	fba5 0101 	umull	r0, r1, r5, r1
 8004870:	1853      	adds	r3, r2, r1
 8004872:	4619      	mov	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f04f 0400 	mov.w	r4, #0
 800487a:	461a      	mov	r2, r3
 800487c:	4623      	mov	r3, r4
 800487e:	f7fb fd07 	bl	8000290 <__aeabi_uldivmod>
 8004882:	4603      	mov	r3, r0
 8004884:	460c      	mov	r4, r1
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e049      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488a:	4b30      	ldr	r3, [pc, #192]	; (800494c <HAL_RCC_GetSysClockFreq+0x158>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	099b      	lsrs	r3, r3, #6
 8004890:	f04f 0400 	mov.w	r4, #0
 8004894:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	ea03 0501 	and.w	r5, r3, r1
 80048a0:	ea04 0602 	and.w	r6, r4, r2
 80048a4:	4629      	mov	r1, r5
 80048a6:	4632      	mov	r2, r6
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	f04f 0400 	mov.w	r4, #0
 80048b0:	0154      	lsls	r4, r2, #5
 80048b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048b6:	014b      	lsls	r3, r1, #5
 80048b8:	4619      	mov	r1, r3
 80048ba:	4622      	mov	r2, r4
 80048bc:	1b49      	subs	r1, r1, r5
 80048be:	eb62 0206 	sbc.w	r2, r2, r6
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	f04f 0400 	mov.w	r4, #0
 80048ca:	0194      	lsls	r4, r2, #6
 80048cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048d0:	018b      	lsls	r3, r1, #6
 80048d2:	1a5b      	subs	r3, r3, r1
 80048d4:	eb64 0402 	sbc.w	r4, r4, r2
 80048d8:	f04f 0100 	mov.w	r1, #0
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	00e2      	lsls	r2, r4, #3
 80048e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048e6:	00d9      	lsls	r1, r3, #3
 80048e8:	460b      	mov	r3, r1
 80048ea:	4614      	mov	r4, r2
 80048ec:	195b      	adds	r3, r3, r5
 80048ee:	eb44 0406 	adc.w	r4, r4, r6
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	02a2      	lsls	r2, r4, #10
 80048fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004900:	0299      	lsls	r1, r3, #10
 8004902:	460b      	mov	r3, r1
 8004904:	4614      	mov	r4, r2
 8004906:	4618      	mov	r0, r3
 8004908:	4621      	mov	r1, r4
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f04f 0400 	mov.w	r4, #0
 8004910:	461a      	mov	r2, r3
 8004912:	4623      	mov	r3, r4
 8004914:	f7fb fcbc 	bl	8000290 <__aeabi_uldivmod>
 8004918:	4603      	mov	r3, r0
 800491a:	460c      	mov	r4, r1
 800491c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800491e:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_RCC_GetSysClockFreq+0x158>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	3301      	adds	r3, #1
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	fbb2 f3f3 	udiv	r3, r2, r3
 8004936:	60bb      	str	r3, [r7, #8]
      break;
 8004938:	e002      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetSysClockFreq+0x15c>)
 800493c:	60bb      	str	r3, [r7, #8]
      break;
 800493e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004940:	68bb      	ldr	r3, [r7, #8]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800
 8004950:	00f42400 	.word	0x00f42400
 8004954:	017d7840 	.word	0x017d7840

08004958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <HAL_RCC_GetHCLKFreq+0x14>)
 800495e:	681b      	ldr	r3, [r3, #0]
}
 8004960:	4618      	mov	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20000018 	.word	0x20000018

08004970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e056      	b.n	8004a30 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fd fddd 	bl	800255c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	ea42 0103 	orr.w	r1, r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	f003 0104 	and.w	r1, r3, #4
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69da      	ldr	r2, [r3, #28]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_SPI_Transmit+0x22>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e11e      	b.n	8004c98 <HAL_SPI_Transmit+0x260>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a62:	f7fd fefb 	bl	800285c <HAL_GetTick>
 8004a66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a68:	88fb      	ldrh	r3, [r7, #6]
 8004a6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d002      	beq.n	8004a7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a7c:	e103      	b.n	8004c86 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_SPI_Transmit+0x52>
 8004a84:	88fb      	ldrh	r3, [r7, #6]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d102      	bne.n	8004a90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a8e:	e0fa      	b.n	8004c86 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2203      	movs	r2, #3
 8004a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	88fa      	ldrh	r2, [r7, #6]
 8004aa8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	88fa      	ldrh	r2, [r7, #6]
 8004aae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad6:	d107      	bne.n	8004ae8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ae6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d007      	beq.n	8004b06 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d14b      	bne.n	8004ba8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_SPI_Transmit+0xe6>
 8004b18:	8afb      	ldrh	r3, [r7, #22]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d13e      	bne.n	8004b9c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	881a      	ldrh	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	1c9a      	adds	r2, r3, #2
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b42:	e02b      	b.n	8004b9c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d112      	bne.n	8004b78 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	1c9a      	adds	r2, r3, #2
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b76:	e011      	b.n	8004b9c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b78:	f7fd fe70 	bl	800285c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d803      	bhi.n	8004b90 <HAL_SPI_Transmit+0x158>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d102      	bne.n	8004b96 <HAL_SPI_Transmit+0x15e>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d102      	bne.n	8004b9c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b9a:	e074      	b.n	8004c86 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1ce      	bne.n	8004b44 <HAL_SPI_Transmit+0x10c>
 8004ba6:	e04c      	b.n	8004c42 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_SPI_Transmit+0x17e>
 8004bb0:	8afb      	ldrh	r3, [r7, #22]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d140      	bne.n	8004c38 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	7812      	ldrb	r2, [r2, #0]
 8004bc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bdc:	e02c      	b.n	8004c38 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d113      	bne.n	8004c14 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	7812      	ldrb	r2, [r2, #0]
 8004bf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c12:	e011      	b.n	8004c38 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c14:	f7fd fe22 	bl	800285c <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d803      	bhi.n	8004c2c <HAL_SPI_Transmit+0x1f4>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d102      	bne.n	8004c32 <HAL_SPI_Transmit+0x1fa>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c36:	e026      	b.n	8004c86 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1cd      	bne.n	8004bde <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fba4 	bl	8005394 <SPI_EndRxTxTransaction>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	77fb      	strb	r3, [r7, #31]
 8004c82:	e000      	b.n	8004c86 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004c84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c96:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cbc:	d112      	bne.n	8004ce4 <HAL_SPI_Receive+0x44>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f8e9 	bl	8004eb2 <HAL_SPI_TransmitReceive>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	e0e2      	b.n	8004eaa <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_SPI_Receive+0x52>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e0db      	b.n	8004eaa <HAL_SPI_Receive+0x20a>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cfa:	f7fd fdaf 	bl	800285c <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d002      	beq.n	8004d12 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d10:	e0c2      	b.n	8004e98 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_SPI_Receive+0x7e>
 8004d18:	88fb      	ldrh	r3, [r7, #6]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d102      	bne.n	8004d24 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d22:	e0b9      	b.n	8004e98 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2204      	movs	r2, #4
 8004d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	88fa      	ldrh	r2, [r7, #6]
 8004d3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	88fa      	ldrh	r2, [r7, #6]
 8004d42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6a:	d107      	bne.n	8004d7c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d7a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d007      	beq.n	8004d9a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d162      	bne.n	8004e68 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004da2:	e02e      	b.n	8004e02 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d115      	bne.n	8004dde <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f103 020c 	add.w	r2, r3, #12
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	7812      	ldrb	r2, [r2, #0]
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ddc:	e011      	b.n	8004e02 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dde:	f7fd fd3d 	bl	800285c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d803      	bhi.n	8004df6 <HAL_SPI_Receive+0x156>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d102      	bne.n	8004dfc <HAL_SPI_Receive+0x15c>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e00:	e04a      	b.n	8004e98 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1cb      	bne.n	8004da4 <HAL_SPI_Receive+0x104>
 8004e0c:	e031      	b.n	8004e72 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d113      	bne.n	8004e44 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	b292      	uxth	r2, r2
 8004e28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	1c9a      	adds	r2, r3, #2
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e42:	e011      	b.n	8004e68 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e44:	f7fd fd0a 	bl	800285c <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d803      	bhi.n	8004e5c <HAL_SPI_Receive+0x1bc>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d102      	bne.n	8004e62 <HAL_SPI_Receive+0x1c2>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e66:	e017      	b.n	8004e98 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1cd      	bne.n	8004e0e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fa27 	bl	80052ca <SPI_EndRxTransaction>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]
 8004e94:	e000      	b.n	8004e98 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004e96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b08c      	sub	sp, #48	; 0x30
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x26>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e18a      	b.n	80051ee <HAL_SPI_TransmitReceive+0x33c>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ee0:	f7fd fcbc 	bl	800285c <HAL_GetTick>
 8004ee4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ef6:	887b      	ldrh	r3, [r7, #2]
 8004ef8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d00f      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x70>
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f08:	d107      	bne.n	8004f1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d103      	bne.n	8004f1a <HAL_SPI_TransmitReceive+0x68>
 8004f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d003      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f20:	e15b      	b.n	80051da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x82>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x82>
 8004f2e:	887b      	ldrh	r3, [r7, #2]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d103      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f3a:	e14e      	b.n	80051da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d003      	beq.n	8004f50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2205      	movs	r2, #5
 8004f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	887a      	ldrh	r2, [r7, #2]
 8004f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	887a      	ldrh	r2, [r7, #2]
 8004f72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	887a      	ldrh	r2, [r7, #2]
 8004f78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d007      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fac:	d178      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_SPI_TransmitReceive+0x10a>
 8004fb6:	8b7b      	ldrh	r3, [r7, #26]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d166      	bne.n	800508a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	881a      	ldrh	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	1c9a      	adds	r2, r3, #2
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fe0:	e053      	b.n	800508a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d11b      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x176>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <HAL_SPI_TransmitReceive+0x176>
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d113      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	881a      	ldrh	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	1c9a      	adds	r2, r3, #2
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d119      	bne.n	800506a <HAL_SPI_TransmitReceive+0x1b8>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d014      	beq.n	800506a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	b292      	uxth	r2, r2
 800504c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	1c9a      	adds	r2, r3, #2
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005066:	2301      	movs	r3, #1
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800506a:	f7fd fbf7 	bl	800285c <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005076:	429a      	cmp	r2, r3
 8005078:	d807      	bhi.n	800508a <HAL_SPI_TransmitReceive+0x1d8>
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005080:	d003      	beq.n	800508a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005088:	e0a7      	b.n	80051da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1a6      	bne.n	8004fe2 <HAL_SPI_TransmitReceive+0x130>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1a1      	bne.n	8004fe2 <HAL_SPI_TransmitReceive+0x130>
 800509e:	e07c      	b.n	800519a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x1fc>
 80050a8:	8b7b      	ldrh	r3, [r7, #26]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d16b      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	7812      	ldrb	r2, [r2, #0]
 80050ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d4:	e057      	b.n	8005186 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d11c      	bne.n	800511e <HAL_SPI_TransmitReceive+0x26c>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d017      	beq.n	800511e <HAL_SPI_TransmitReceive+0x26c>
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d114      	bne.n	800511e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	7812      	ldrb	r2, [r2, #0]
 8005100:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d119      	bne.n	8005160 <HAL_SPI_TransmitReceive+0x2ae>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d014      	beq.n	8005160 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800515c:	2301      	movs	r3, #1
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005160:	f7fd fb7c 	bl	800285c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800516c:	429a      	cmp	r2, r3
 800516e:	d803      	bhi.n	8005178 <HAL_SPI_TransmitReceive+0x2c6>
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d102      	bne.n	800517e <HAL_SPI_TransmitReceive+0x2cc>
 8005178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005184:	e029      	b.n	80051da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1a2      	bne.n	80050d6 <HAL_SPI_TransmitReceive+0x224>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d19d      	bne.n	80050d6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800519a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f8f8 	bl	8005394 <SPI_EndRxTxTransaction>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051b6:	e010      	b.n	80051da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	e000      	b.n	80051da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3730      	adds	r7, #48	; 0x30
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	4613      	mov	r3, r2
 8005204:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005206:	e04c      	b.n	80052a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d048      	beq.n	80052a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005210:	f7fd fb24 	bl	800285c <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d902      	bls.n	8005226 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d13d      	bne.n	80052a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005234:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523e:	d111      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005248:	d004      	beq.n	8005254 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005252:	d107      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526c:	d10f      	bne.n	800528e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800528c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e00f      	b.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	bf0c      	ite	eq
 80052b2:	2301      	moveq	r3, #1
 80052b4:	2300      	movne	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d1a3      	bne.n	8005208 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b086      	sub	sp, #24
 80052ce:	af02      	add	r7, sp, #8
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052de:	d111      	bne.n	8005304 <SPI_EndRxTransaction+0x3a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e8:	d004      	beq.n	80052f4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f2:	d107      	bne.n	8005304 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005302:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530c:	d12a      	bne.n	8005364 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005316:	d012      	beq.n	800533e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2200      	movs	r2, #0
 8005320:	2180      	movs	r1, #128	; 0x80
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7ff ff67 	bl	80051f6 <SPI_WaitFlagStateUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d02d      	beq.n	800538a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005332:	f043 0220 	orr.w	r2, r3, #32
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e026      	b.n	800538c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	2101      	movs	r1, #1
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff ff54 	bl	80051f6 <SPI_WaitFlagStateUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01a      	beq.n	800538a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e013      	b.n	800538c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2200      	movs	r2, #0
 800536c:	2101      	movs	r1, #1
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f7ff ff41 	bl	80051f6 <SPI_WaitFlagStateUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d007      	beq.n	800538a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	f043 0220 	orr.w	r2, r3, #32
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e000      	b.n	800538c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053a0:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <SPI_EndRxTxTransaction+0x7c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <SPI_EndRxTxTransaction+0x80>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	0d5b      	lsrs	r3, r3, #21
 80053ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053b0:	fb02 f303 	mul.w	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053be:	d112      	bne.n	80053e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	2180      	movs	r1, #128	; 0x80
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff ff13 	bl	80051f6 <SPI_WaitFlagStateUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d016      	beq.n	8005404 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e00f      	b.n	8005406 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fc:	2b80      	cmp	r3, #128	; 0x80
 80053fe:	d0f2      	beq.n	80053e6 <SPI_EndRxTxTransaction+0x52>
 8005400:	e000      	b.n	8005404 <SPI_EndRxTxTransaction+0x70>
        break;
 8005402:	bf00      	nop
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000018 	.word	0x20000018
 8005414:	165e9f81 	.word	0x165e9f81

08005418 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005418:	b084      	sub	sp, #16
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	f107 001c 	add.w	r0, r7, #28
 8005426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	2b01      	cmp	r3, #1
 800542e:	d122      	bne.n	8005476 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d105      	bne.n	800546a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f001 fac6 	bl	80069fc <USB_CoreReset>
 8005470:	4603      	mov	r3, r0
 8005472:	73fb      	strb	r3, [r7, #15]
 8005474:	e01a      	b.n	80054ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 faba 	bl	80069fc <USB_CoreReset>
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800548c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	639a      	str	r2, [r3, #56]	; 0x38
 800549e:	e005      	b.n	80054ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d10b      	bne.n	80054ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f043 0206 	orr.w	r2, r3, #6
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f043 0220 	orr.w	r2, r3, #32
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054d6:	b004      	add	sp, #16
 80054d8:	4770      	bx	lr
	...

080054dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	4613      	mov	r3, r2
 80054e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d165      	bne.n	80055bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4a41      	ldr	r2, [pc, #260]	; (80055f8 <USB_SetTurnaroundTime+0x11c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d906      	bls.n	8005506 <USB_SetTurnaroundTime+0x2a>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4a40      	ldr	r2, [pc, #256]	; (80055fc <USB_SetTurnaroundTime+0x120>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d802      	bhi.n	8005506 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005500:	230f      	movs	r3, #15
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e062      	b.n	80055cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4a3c      	ldr	r2, [pc, #240]	; (80055fc <USB_SetTurnaroundTime+0x120>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d906      	bls.n	800551c <USB_SetTurnaroundTime+0x40>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4a3b      	ldr	r2, [pc, #236]	; (8005600 <USB_SetTurnaroundTime+0x124>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d802      	bhi.n	800551c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005516:	230e      	movs	r3, #14
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e057      	b.n	80055cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a38      	ldr	r2, [pc, #224]	; (8005600 <USB_SetTurnaroundTime+0x124>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d906      	bls.n	8005532 <USB_SetTurnaroundTime+0x56>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4a37      	ldr	r2, [pc, #220]	; (8005604 <USB_SetTurnaroundTime+0x128>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d802      	bhi.n	8005532 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800552c:	230d      	movs	r3, #13
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e04c      	b.n	80055cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4a33      	ldr	r2, [pc, #204]	; (8005604 <USB_SetTurnaroundTime+0x128>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d906      	bls.n	8005548 <USB_SetTurnaroundTime+0x6c>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4a32      	ldr	r2, [pc, #200]	; (8005608 <USB_SetTurnaroundTime+0x12c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d802      	bhi.n	8005548 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005542:	230c      	movs	r3, #12
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e041      	b.n	80055cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <USB_SetTurnaroundTime+0x12c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d906      	bls.n	800555e <USB_SetTurnaroundTime+0x82>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4a2e      	ldr	r2, [pc, #184]	; (800560c <USB_SetTurnaroundTime+0x130>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d802      	bhi.n	800555e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005558:	230b      	movs	r3, #11
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	e036      	b.n	80055cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4a2a      	ldr	r2, [pc, #168]	; (800560c <USB_SetTurnaroundTime+0x130>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d906      	bls.n	8005574 <USB_SetTurnaroundTime+0x98>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4a29      	ldr	r2, [pc, #164]	; (8005610 <USB_SetTurnaroundTime+0x134>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d802      	bhi.n	8005574 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800556e:	230a      	movs	r3, #10
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	e02b      	b.n	80055cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4a26      	ldr	r2, [pc, #152]	; (8005610 <USB_SetTurnaroundTime+0x134>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d906      	bls.n	800558a <USB_SetTurnaroundTime+0xae>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4a25      	ldr	r2, [pc, #148]	; (8005614 <USB_SetTurnaroundTime+0x138>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d802      	bhi.n	800558a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005584:	2309      	movs	r3, #9
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	e020      	b.n	80055cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4a21      	ldr	r2, [pc, #132]	; (8005614 <USB_SetTurnaroundTime+0x138>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d906      	bls.n	80055a0 <USB_SetTurnaroundTime+0xc4>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4a20      	ldr	r2, [pc, #128]	; (8005618 <USB_SetTurnaroundTime+0x13c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d802      	bhi.n	80055a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800559a:	2308      	movs	r3, #8
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	e015      	b.n	80055cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <USB_SetTurnaroundTime+0x13c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d906      	bls.n	80055b6 <USB_SetTurnaroundTime+0xda>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4a1c      	ldr	r2, [pc, #112]	; (800561c <USB_SetTurnaroundTime+0x140>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d802      	bhi.n	80055b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055b0:	2307      	movs	r3, #7
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e00a      	b.n	80055cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055b6:	2306      	movs	r3, #6
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e007      	b.n	80055cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055c2:	2309      	movs	r3, #9
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e001      	b.n	80055cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80055c8:	2309      	movs	r3, #9
 80055ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	029b      	lsls	r3, r3, #10
 80055e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80055e4:	431a      	orrs	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	00d8acbf 	.word	0x00d8acbf
 80055fc:	00e4e1bf 	.word	0x00e4e1bf
 8005600:	00f423ff 	.word	0x00f423ff
 8005604:	0106737f 	.word	0x0106737f
 8005608:	011a499f 	.word	0x011a499f
 800560c:	01312cff 	.word	0x01312cff
 8005610:	014ca43f 	.word	0x014ca43f
 8005614:	016e35ff 	.word	0x016e35ff
 8005618:	01a6ab1f 	.word	0x01a6ab1f
 800561c:	01e847ff 	.word	0x01e847ff

08005620 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f043 0201 	orr.w	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f023 0201 	bic.w	r2, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d106      	bne.n	8005690 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60da      	str	r2, [r3, #12]
 800568e:	e00b      	b.n	80056a8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60da      	str	r2, [r3, #12]
 80056a2:	e001      	b.n	80056a8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e003      	b.n	80056b0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80056a8:	2032      	movs	r0, #50	; 0x32
 80056aa:	f7fd f8e3 	bl	8002874 <HAL_Delay>

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056b8:	b084      	sub	sp, #16
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b086      	sub	sp, #24
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056d2:	2300      	movs	r3, #0
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	e009      	b.n	80056ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	3340      	adds	r3, #64	; 0x40
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	2200      	movs	r2, #0
 80056e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3301      	adds	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b0e      	cmp	r3, #14
 80056f0:	d9f2      	bls.n	80056d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11c      	bne.n	8005732 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005706:	f043 0302 	orr.w	r3, r3, #2
 800570a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
 8005730:	e00b      	b.n	800574a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005750:	461a      	mov	r2, r3
 8005752:	2300      	movs	r3, #0
 8005754:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575c:	4619      	mov	r1, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005764:	461a      	mov	r2, r3
 8005766:	680b      	ldr	r3, [r1, #0]
 8005768:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	2b01      	cmp	r3, #1
 800576e:	d10c      	bne.n	800578a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005776:	2100      	movs	r1, #0
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f949 	bl	8005a10 <USB_SetDevSpeed>
 800577e:	e008      	b.n	8005792 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005780:	2101      	movs	r1, #1
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f944 	bl	8005a10 <USB_SetDevSpeed>
 8005788:	e003      	b.n	8005792 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800578a:	2103      	movs	r1, #3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f93f 	bl	8005a10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005792:	2110      	movs	r1, #16
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f8f3 	bl	8005980 <USB_FlushTxFifo>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f911 	bl	80059cc <USB_FlushRxFifo>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	461a      	mov	r2, r3
 80057d4:	2300      	movs	r3, #0
 80057d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	e043      	b.n	8005866 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f4:	d118      	bne.n	8005828 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	461a      	mov	r2, r3
 800580a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	e013      	b.n	800583a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	461a      	mov	r2, r3
 8005820:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e008      	b.n	800583a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	461a      	mov	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	461a      	mov	r2, r3
 800585a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800585e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	3301      	adds	r3, #1
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	429a      	cmp	r2, r3
 800586c:	d3b7      	bcc.n	80057de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	e043      	b.n	80058fc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800588a:	d118      	bne.n	80058be <USB_DevInit+0x206>
    {
      if (i == 0U)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	461a      	mov	r2, r3
 80058a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e013      	b.n	80058d0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	461a      	mov	r2, r3
 80058b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	e008      	b.n	80058d0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	461a      	mov	r2, r3
 80058cc:	2300      	movs	r3, #0
 80058ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	461a      	mov	r2, r3
 80058de:	2300      	movs	r3, #0
 80058e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	461a      	mov	r2, r3
 80058f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	3301      	adds	r3, #1
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d3b7      	bcc.n	8005874 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005916:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005924:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f043 0210 	orr.w	r2, r3, #16
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	4b0f      	ldr	r3, [pc, #60]	; (800597c <USB_DevInit+0x2c4>)
 800593e:	4313      	orrs	r3, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f043 0208 	orr.w	r2, r3, #8
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d107      	bne.n	800596c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005964:	f043 0304 	orr.w	r3, r3, #4
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800596c:	7dfb      	ldrb	r3, [r7, #23]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005978:	b004      	add	sp, #16
 800597a:	4770      	bx	lr
 800597c:	803c3800 	.word	0x803c3800

08005980 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	019b      	lsls	r3, r3, #6
 8005992:	f043 0220 	orr.w	r2, r3, #32
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3301      	adds	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <USB_FlushTxFifo+0x48>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d901      	bls.n	80059ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e006      	b.n	80059ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d0f0      	beq.n	800599a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	00030d40 	.word	0x00030d40

080059cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2210      	movs	r2, #16
 80059dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <USB_FlushRxFifo+0x40>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e006      	b.n	80059fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b10      	cmp	r3, #16
 80059fa:	d0f0      	beq.n	80059de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	00030d40 	.word	0x00030d40

08005a10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a30:	4313      	orrs	r3, r2
 8005a32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b087      	sub	sp, #28
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0306 	and.w	r3, r3, #6
 8005a5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d102      	bne.n	8005a68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a62:	2300      	movs	r3, #0
 8005a64:	75fb      	strb	r3, [r7, #23]
 8005a66:	e00a      	b.n	8005a7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d002      	beq.n	8005a74 <USB_GetDevSpeed+0x32>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b06      	cmp	r3, #6
 8005a72:	d102      	bne.n	8005a7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a74:	2302      	movs	r3, #2
 8005a76:	75fb      	strb	r3, [r7, #23]
 8005a78:	e001      	b.n	8005a7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a7a:	230f      	movs	r3, #15
 8005a7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d13a      	bne.n	8005b1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	2101      	movs	r1, #1
 8005aba:	fa01 f303 	lsl.w	r3, r1, r3
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d155      	bne.n	8005b8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	78db      	ldrb	r3, [r3, #3]
 8005afa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005afc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	059b      	lsls	r3, r3, #22
 8005b02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b04:	4313      	orrs	r3, r2
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	e036      	b.n	8005b8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b24:	69da      	ldr	r2, [r3, #28]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	2101      	movs	r1, #1
 8005b30:	fa01 f303 	lsl.w	r3, r1, r3
 8005b34:	041b      	lsls	r3, r3, #16
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d11a      	bne.n	8005b8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	78db      	ldrb	r3, [r3, #3]
 8005b70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b72:	430b      	orrs	r3, r1
 8005b74:	4313      	orrs	r3, r2
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d161      	bne.n	8005c7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bce:	d11f      	bne.n	8005c10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	2101      	movs	r1, #1
 8005c22:	fa01 f303 	lsl.w	r3, r1, r3
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c30:	4013      	ands	r3, r2
 8005c32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	2101      	movs	r1, #1
 8005c46:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	68f9      	ldr	r1, [r7, #12]
 8005c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c54:	4013      	ands	r3, r2
 8005c56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	0159      	lsls	r1, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	440b      	add	r3, r1
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	4619      	mov	r1, r3
 8005c74:	4b35      	ldr	r3, [pc, #212]	; (8005d4c <USB_DeactivateEndpoint+0x1b0>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	600b      	str	r3, [r1, #0]
 8005c7a:	e060      	b.n	8005d3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c92:	d11f      	bne.n	8005cd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	041b      	lsls	r3, r3, #16
 8005cec:	43db      	mvns	r3, r3
 8005cee:	68f9      	ldr	r1, [r7, #12]
 8005cf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	2101      	movs	r1, #1
 8005d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0e:	041b      	lsls	r3, r3, #16
 8005d10:	43db      	mvns	r3, r3
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d18:	4013      	ands	r3, r2
 8005d1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	0159      	lsls	r1, r3, #5
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	440b      	add	r3, r1
 8005d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d36:	4619      	mov	r1, r3
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <USB_DeactivateEndpoint+0x1b4>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	ec337800 	.word	0xec337800
 8005d50:	eff37800 	.word	0xeff37800

08005d54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	f040 815c 	bne.w	800602e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d132      	bne.n	8005de4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005da0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ddc:	0cdb      	lsrs	r3, r3, #19
 8005dde:	04db      	lsls	r3, r3, #19
 8005de0:	6113      	str	r3, [r2, #16]
 8005de2:	e074      	b.n	8005ece <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfe:	0cdb      	lsrs	r3, r3, #19
 8005e00:	04db      	lsls	r3, r3, #19
 8005e02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6959      	ldr	r1, [r3, #20]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	440b      	add	r3, r1
 8005e40:	1e59      	subs	r1, r3, #1
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e4a:	04d9      	lsls	r1, r3, #19
 8005e4c:	4b9d      	ldr	r3, [pc, #628]	; (80060c4 <USB_EPStartXfer+0x370>)
 8005e4e:	400b      	ands	r3, r1
 8005e50:	69b9      	ldr	r1, [r7, #24]
 8005e52:	0148      	lsls	r0, r1, #5
 8005e54:	69f9      	ldr	r1, [r7, #28]
 8005e56:	4401      	add	r1, r0
 8005e58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e76:	69b9      	ldr	r1, [r7, #24]
 8005e78:	0148      	lsls	r0, r1, #5
 8005e7a:	69f9      	ldr	r1, [r7, #28]
 8005e7c:	4401      	add	r1, r0
 8005e7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e82:	4313      	orrs	r3, r2
 8005e84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	78db      	ldrb	r3, [r3, #3]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d11f      	bne.n	8005ece <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005eac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ecc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d14b      	bne.n	8005f6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d009      	beq.n	8005ef0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	461a      	mov	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	78db      	ldrb	r3, [r3, #3]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d128      	bne.n	8005f4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d110      	bne.n	8005f2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	e00f      	b.n	8005f4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	0151      	lsls	r1, r2, #5
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	440a      	add	r2, r1
 8005f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	e12f      	b.n	80061cc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	0151      	lsls	r1, r2, #5
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	440a      	add	r2, r1
 8005f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	78db      	ldrb	r3, [r3, #3]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d015      	beq.n	8005fc0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8117 	beq.w	80061cc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	2101      	movs	r1, #1
 8005fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb4:	69f9      	ldr	r1, [r7, #28]
 8005fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	634b      	str	r3, [r1, #52]	; 0x34
 8005fbe:	e105      	b.n	80061cc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d110      	bne.n	8005ff2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	e00f      	b.n	8006012 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	440a      	add	r2, r1
 8006008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006010:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	68d9      	ldr	r1, [r3, #12]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	b298      	uxth	r0, r3
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	4603      	mov	r3, r0
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fa2b 	bl	8006482 <USB_WritePacket>
 800602c:	e0ce      	b.n	80061cc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	440a      	add	r2, r1
 8006044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006048:	0cdb      	lsrs	r3, r3, #19
 800604a:	04db      	lsls	r3, r3, #19
 800604c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006068:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800606c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006070:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d126      	bne.n	80060c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006090:	69b9      	ldr	r1, [r7, #24]
 8006092:	0148      	lsls	r0, r1, #5
 8006094:	69f9      	ldr	r1, [r7, #28]
 8006096:	4401      	add	r1, r0
 8006098:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800609c:	4313      	orrs	r3, r2
 800609e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	69fa      	ldr	r2, [r7, #28]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060be:	6113      	str	r3, [r2, #16]
 80060c0:	e036      	b.n	8006130 <USB_EPStartXfer+0x3dc>
 80060c2:	bf00      	nop
 80060c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	695a      	ldr	r2, [r3, #20]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	4413      	add	r3, r2
 80060d2:	1e5a      	subs	r2, r3, #1
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060dc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	8afb      	ldrh	r3, [r7, #22]
 80060ee:	04d9      	lsls	r1, r3, #19
 80060f0:	4b39      	ldr	r3, [pc, #228]	; (80061d8 <USB_EPStartXfer+0x484>)
 80060f2:	400b      	ands	r3, r1
 80060f4:	69b9      	ldr	r1, [r7, #24]
 80060f6:	0148      	lsls	r0, r1, #5
 80060f8:	69f9      	ldr	r1, [r7, #28]
 80060fa:	4401      	add	r1, r0
 80060fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006100:	4313      	orrs	r3, r2
 8006102:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	8af9      	ldrh	r1, [r7, #22]
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006120:	69b9      	ldr	r1, [r7, #24]
 8006122:	0148      	lsls	r0, r1, #5
 8006124:	69f9      	ldr	r1, [r7, #28]
 8006126:	4401      	add	r1, r0
 8006128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800612c:	4313      	orrs	r3, r2
 800612e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d10d      	bne.n	8006152 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d009      	beq.n	8006152 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	68d9      	ldr	r1, [r3, #12]
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614e:	460a      	mov	r2, r1
 8006150:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	78db      	ldrb	r3, [r3, #3]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d128      	bne.n	80061ac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d110      	bne.n	800618c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	e00f      	b.n	80061ac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3720      	adds	r7, #32
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	1ff80000 	.word	0x1ff80000

080061dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	f040 80cd 	bne.w	8006398 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d132      	bne.n	800626c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006220:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006224:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006264:	0cdb      	lsrs	r3, r3, #19
 8006266:	04db      	lsls	r3, r3, #19
 8006268:	6113      	str	r3, [r2, #16]
 800626a:	e04e      	b.n	800630a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006286:	0cdb      	lsrs	r3, r3, #19
 8006288:	04db      	lsls	r3, r3, #19
 800628a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	695a      	ldr	r2, [r3, #20]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d903      	bls.n	80062c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f0:	691a      	ldr	r2, [r3, #16]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fa:	6939      	ldr	r1, [r7, #16]
 80062fc:	0148      	lsls	r0, r1, #5
 80062fe:	6979      	ldr	r1, [r7, #20]
 8006300:	4401      	add	r1, r0
 8006302:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006306:	4313      	orrs	r3, r2
 8006308:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d11e      	bne.n	800634e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d009      	beq.n	800632c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006324:	461a      	mov	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006346:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	e092      	b.n	8006474 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	440a      	add	r2, r1
 8006364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006368:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800636c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d07e      	beq.n	8006474 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	2101      	movs	r1, #1
 8006388:	fa01 f303 	lsl.w	r3, r1, r3
 800638c:	6979      	ldr	r1, [r7, #20]
 800638e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006392:	4313      	orrs	r3, r2
 8006394:	634b      	str	r3, [r1, #52]	; 0x34
 8006396:	e06d      	b.n	8006474 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b2:	0cdb      	lsrs	r3, r3, #19
 80063b4:	04db      	lsls	r3, r3, #19
 80063b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	440a      	add	r2, r1
 8006402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800640a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006422:	6939      	ldr	r1, [r7, #16]
 8006424:	0148      	lsls	r0, r1, #5
 8006426:	6979      	ldr	r1, [r7, #20]
 8006428:	4401      	add	r1, r0
 800642a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800642e:	4313      	orrs	r3, r2
 8006430:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d10d      	bne.n	8006454 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d009      	beq.n	8006454 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	68d9      	ldr	r1, [r3, #12]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	460a      	mov	r2, r1
 8006452:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	440a      	add	r2, r1
 800646a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800646e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006472:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006482:	b480      	push	{r7}
 8006484:	b089      	sub	sp, #36	; 0x24
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	4611      	mov	r1, r2
 800648e:	461a      	mov	r2, r3
 8006490:	460b      	mov	r3, r1
 8006492:	71fb      	strb	r3, [r7, #7]
 8006494:	4613      	mov	r3, r2
 8006496:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80064a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11a      	bne.n	80064de <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064a8:	88bb      	ldrh	r3, [r7, #4]
 80064aa:	3303      	adds	r3, #3
 80064ac:	089b      	lsrs	r3, r3, #2
 80064ae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064b0:	2300      	movs	r3, #0
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e00f      	b.n	80064d6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	031a      	lsls	r2, r3, #12
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c2:	461a      	mov	r2, r3
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	3304      	adds	r3, #4
 80064ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	3301      	adds	r3, #1
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d3eb      	bcc.n	80064b6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3724      	adds	r7, #36	; 0x24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b089      	sub	sp, #36	; 0x24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	3303      	adds	r3, #3
 8006506:	089b      	lsrs	r3, r3, #2
 8006508:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800650a:	2300      	movs	r3, #0
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	e00b      	b.n	8006528 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	601a      	str	r2, [r3, #0]
    pDest++;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	3304      	adds	r3, #4
 8006520:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	3301      	adds	r3, #1
 8006526:	61bb      	str	r3, [r7, #24]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	429a      	cmp	r2, r3
 800652e:	d3ef      	bcc.n	8006510 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006530:	69fb      	ldr	r3, [r7, #28]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3724      	adds	r7, #36	; 0x24
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	785b      	ldrb	r3, [r3, #1]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d12c      	bne.n	80065b4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	db12      	blt.n	8006592 <USB_EPSetStall+0x54>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00f      	beq.n	8006592 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006590:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	e02b      	b.n	800660c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	db12      	blt.n	80065ec <USB_EPSetStall+0xae>
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00f      	beq.n	80065ec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065ea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	440a      	add	r2, r1
 8006602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800660a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d128      	bne.n	8006688 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	440a      	add	r2, r1
 800664c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006650:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006654:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	78db      	ldrb	r3, [r3, #3]
 800665a:	2b03      	cmp	r3, #3
 800665c:	d003      	beq.n	8006666 <USB_EPClearStall+0x4c>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	78db      	ldrb	r3, [r3, #3]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d138      	bne.n	80066d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	e027      	b.n	80066d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	78db      	ldrb	r3, [r3, #3]
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d003      	beq.n	80066b8 <USB_EPClearStall+0x9e>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	78db      	ldrb	r3, [r3, #3]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d10f      	bne.n	80066d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	460b      	mov	r3, r1
 80066f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006704:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006708:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006720:	4313      	orrs	r3, r2
 8006722:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800674c:	f023 0303 	bic.w	r3, r3, #3
 8006750:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006760:	f023 0302 	bic.w	r3, r3, #2
 8006764:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800678e:	f023 0303 	bic.w	r3, r3, #3
 8006792:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067a2:	f043 0302 	orr.w	r3, r3, #2
 80067a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4013      	ands	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067ce:	68fb      	ldr	r3, [r7, #12]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	4013      	ands	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	0c1b      	lsrs	r3, r3, #16
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	4013      	ands	r3, r2
 8006832:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	b29b      	uxth	r3, r3
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	4013      	ands	r3, r2
 8006870:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006872:	68bb      	ldr	r3, [r7, #8]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
 80068b0:	01db      	lsls	r3, r3, #7
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4013      	ands	r3, r2
 80068cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068ce:	68bb      	ldr	r3, [r7, #8]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f003 0301 	and.w	r3, r3, #1
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006912:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006916:	f023 0307 	bic.w	r3, r3, #7
 800691a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800692a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800692e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
	...

08006940 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	460b      	mov	r3, r1
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	333c      	adds	r3, #60	; 0x3c
 8006956:	3304      	adds	r3, #4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4a26      	ldr	r2, [pc, #152]	; (80069f8 <USB_EP0_OutStart+0xb8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d90a      	bls.n	800697a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006974:	d101      	bne.n	800697a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e037      	b.n	80069ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	461a      	mov	r2, r3
 8006982:	2300      	movs	r3, #0
 8006984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006998:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a8:	f043 0318 	orr.w	r3, r3, #24
 80069ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80069c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069c2:	7afb      	ldrb	r3, [r7, #11]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d10f      	bne.n	80069e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	4f54300a 	.word	0x4f54300a

080069fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <USB_CoreReset+0x64>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d901      	bls.n	8006a1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e01b      	b.n	8006a52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	daf2      	bge.n	8006a08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f043 0201 	orr.w	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3301      	adds	r3, #1
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <USB_CoreReset+0x64>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d901      	bls.n	8006a44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e006      	b.n	8006a52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d0f0      	beq.n	8006a32 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	00030d40 	.word	0x00030d40

08006a64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a74:	f002 f922 	bl	8008cbc <malloc>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d105      	bne.n	8006a8e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e066      	b.n	8006b5c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	7c1b      	ldrb	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d119      	bne.n	8006ad2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	2181      	movs	r1, #129	; 0x81
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 ff8f 	bl	80089ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	2101      	movs	r1, #1
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 ff85 	bl	80089ca <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2210      	movs	r2, #16
 8006acc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006ad0:	e016      	b.n	8006b00 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ad2:	2340      	movs	r3, #64	; 0x40
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	2181      	movs	r1, #129	; 0x81
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 ff76 	bl	80089ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ae4:	2340      	movs	r3, #64	; 0x40
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	2101      	movs	r1, #1
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 ff6d 	bl	80089ca <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2210      	movs	r2, #16
 8006afc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b00:	2308      	movs	r3, #8
 8006b02:	2203      	movs	r2, #3
 8006b04:	2182      	movs	r1, #130	; 0x82
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 ff5f 	bl	80089ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	7c1b      	ldrb	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b40:	2101      	movs	r1, #1
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f002 f830 	bl	8008ba8 <USBD_LL_PrepareReceive>
 8006b48:	e007      	b.n	8006b5a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b50:	2340      	movs	r3, #64	; 0x40
 8006b52:	2101      	movs	r1, #1
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f002 f827 	bl	8008ba8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b74:	2181      	movs	r1, #129	; 0x81
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 ff4d 	bl	8008a16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b82:	2101      	movs	r1, #1
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 ff46 	bl	8008a16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b92:	2182      	movs	r1, #130	; 0x82
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 ff3e 	bl	8008a16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00e      	beq.n	8006bd2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f002 f881 	bl	8008ccc <free>
    pdev->pClassData = NULL;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d03a      	beq.n	8006c7c <USBD_CDC_Setup+0xa0>
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	f040 8097 	bne.w	8006d3a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	88db      	ldrh	r3, [r3, #6]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d029      	beq.n	8006c68 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	b25b      	sxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	da11      	bge.n	8006c42 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006c2a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	88d2      	ldrh	r2, [r2, #6]
 8006c30:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c32:	6939      	ldr	r1, [r7, #16]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	88db      	ldrh	r3, [r3, #6]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fa9d 	bl	800817a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006c40:	e082      	b.n	8006d48 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	785a      	ldrb	r2, [r3, #1]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	88db      	ldrh	r3, [r3, #6]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c58:	6939      	ldr	r1, [r7, #16]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	88db      	ldrh	r3, [r3, #6]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 fab6 	bl	80081d2 <USBD_CtlPrepareRx>
    break;
 8006c66:	e06f      	b.n	8006d48 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	7850      	ldrb	r0, [r2, #1]
 8006c74:	2200      	movs	r2, #0
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	4798      	blx	r3
    break;
 8006c7a:	e065      	b.n	8006d48 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b0b      	cmp	r3, #11
 8006c82:	d84f      	bhi.n	8006d24 <USBD_CDC_Setup+0x148>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <USBD_CDC_Setup+0xb0>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006d33 	.word	0x08006d33
 8006c94:	08006d25 	.word	0x08006d25
 8006c98:	08006d25 	.word	0x08006d25
 8006c9c:	08006d25 	.word	0x08006d25
 8006ca0:	08006d25 	.word	0x08006d25
 8006ca4:	08006d25 	.word	0x08006d25
 8006ca8:	08006d25 	.word	0x08006d25
 8006cac:	08006d25 	.word	0x08006d25
 8006cb0:	08006d25 	.word	0x08006d25
 8006cb4:	08006ce5 	.word	0x08006ce5
 8006cb8:	08006d0d 	.word	0x08006d0d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d107      	bne.n	8006cd6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006cc6:	f107 030c 	add.w	r3, r7, #12
 8006cca:	2202      	movs	r2, #2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fa53 	bl	800817a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006cd4:	e030      	b.n	8006d38 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 f9dd 	bl	8008098 <USBD_CtlError>
        ret = USBD_FAIL;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce2:	e029      	b.n	8006d38 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d107      	bne.n	8006cfe <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cee:	f107 030f 	add.w	r3, r7, #15
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 fa3f 	bl	800817a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006cfc:	e01c      	b.n	8006d38 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 f9c9 	bl	8008098 <USBD_CtlError>
        ret = USBD_FAIL;
 8006d06:	2303      	movs	r3, #3
 8006d08:	75fb      	strb	r3, [r7, #23]
      break;
 8006d0a:	e015      	b.n	8006d38 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d00f      	beq.n	8006d36 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 f9bd 	bl	8008098 <USBD_CtlError>
        ret = USBD_FAIL;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006d22:	e008      	b.n	8006d36 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 f9b6 	bl	8008098 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d30:	e002      	b.n	8006d38 <USBD_CDC_Setup+0x15c>
      break;
 8006d32:	bf00      	nop
 8006d34:	e008      	b.n	8006d48 <USBD_CDC_Setup+0x16c>
      break;
 8006d36:	bf00      	nop
    }
    break;
 8006d38:	e006      	b.n	8006d48 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 f9ab 	bl	8008098 <USBD_CtlError>
    ret = USBD_FAIL;
 8006d42:	2303      	movs	r3, #3
 8006d44:	75fb      	strb	r3, [r7, #23]
    break;
 8006d46:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop

08006d54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e049      	b.n	8006e0a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d7e:	78fa      	ldrb	r2, [r7, #3]
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	3318      	adds	r3, #24
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d029      	beq.n	8006de8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d94:	78fa      	ldrb	r2, [r7, #3]
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	440b      	add	r3, r1
 8006da2:	3318      	adds	r3, #24
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	78f9      	ldrb	r1, [r7, #3]
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	460b      	mov	r3, r1
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	1a5b      	subs	r3, r3, r1
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4403      	add	r3, r0
 8006db4:	3344      	adds	r3, #68	; 0x44
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006dbc:	fb03 f301 	mul.w	r3, r3, r1
 8006dc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d110      	bne.n	8006de8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006dc6:	78fa      	ldrb	r2, [r7, #3]
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	3318      	adds	r3, #24
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dda:	78f9      	ldrb	r1, [r7, #3]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2200      	movs	r2, #0
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 fec0 	bl	8008b66 <USBD_LL_Transmit>
 8006de6:	e00f      	b.n	8006e08 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e04:	78fa      	ldrb	r2, [r7, #3]
 8006e06:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e015      	b.n	8006e60 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fed6 	bl	8008bea <USBD_LL_GetRxDataSize>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e76:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d015      	beq.n	8006eae <USBD_CDC_EP0_RxReady+0x46>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e88:	2bff      	cmp	r3, #255	; 0xff
 8006e8a:	d010      	beq.n	8006eae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006e9a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ea2:	b292      	uxth	r2, r2
 8006ea4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	22ff      	movs	r2, #255	; 0xff
 8006eaa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2243      	movs	r2, #67	; 0x43
 8006ec4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006ec6:	4b03      	ldr	r3, [pc, #12]	; (8006ed4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	200000ac 	.word	0x200000ac

08006ed8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2243      	movs	r2, #67	; 0x43
 8006ee4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006ee6:	4b03      	ldr	r3, [pc, #12]	; (8006ef4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	20000068 	.word	0x20000068

08006ef8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2243      	movs	r2, #67	; 0x43
 8006f04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006f06:	4b03      	ldr	r3, [pc, #12]	; (8006f14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	200000f0 	.word	0x200000f0

08006f18 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	220a      	movs	r2, #10
 8006f24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f26:	4b03      	ldr	r3, [pc, #12]	; (8006f34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	20000024 	.word	0x20000024

08006f38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e004      	b.n	8006f56 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b087      	sub	sp, #28
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f74:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	371c      	adds	r7, #28
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e01a      	b.n	8007014 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d114      	bne.n	8007012 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007006:	2181      	movs	r1, #129	; 0x81
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 fdac 	bl	8008b66 <USBD_LL_Transmit>

    ret = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007012:	7bfb      	ldrb	r3, [r7, #15]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800702a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007036:	2303      	movs	r3, #3
 8007038:	e016      	b.n	8007068 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7c1b      	ldrb	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800704c:	2101      	movs	r1, #1
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 fdaa 	bl	8008ba8 <USBD_LL_PrepareReceive>
 8007054:	e007      	b.n	8007066 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800705c:	2340      	movs	r3, #64	; 0x40
 800705e:	2101      	movs	r1, #1
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 fda1 	bl	8008ba8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	4613      	mov	r3, r2
 800707c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007084:	2303      	movs	r3, #3
 8007086:	e025      	b.n	80070d4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	79fa      	ldrb	r2, [r7, #7]
 80070c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f001 fc17 	bl	80088fc <USBD_LL_Init>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e010      	b.n	8007116 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	f107 020e 	add.w	r2, r7, #14
 8007108:	4610      	mov	r0, r2
 800710a:	4798      	blx	r3
 800710c:	4602      	mov	r2, r0
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fc34 	bl	8008994 <USBD_LL_Start>
 800712c:	4603      	mov	r3, r0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007158:	2303      	movs	r3, #3
 800715a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d009      	beq.n	800717a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	78fa      	ldrb	r2, [r7, #3]
 8007170:	4611      	mov	r1, r2
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
 8007176:	4603      	mov	r3, r0
 8007178:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	78fa      	ldrb	r2, [r7, #3]
 80071a4:	4611      	mov	r1, r2
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
  }

  return USBD_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 ff2c 	bl	8008024 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80071da:	461a      	mov	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071e8:	f003 031f 	and.w	r3, r3, #31
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d00e      	beq.n	800720e <USBD_LL_SetupStage+0x5a>
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d302      	bcc.n	80071fa <USBD_LL_SetupStage+0x46>
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d014      	beq.n	8007222 <USBD_LL_SetupStage+0x6e>
 80071f8:	e01d      	b.n	8007236 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa18 	bl	8007638 <USBD_StdDevReq>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]
      break;
 800720c:	e020      	b.n	8007250 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa7c 	bl	8007714 <USBD_StdItfReq>
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]
      break;
 8007220:	e016      	b.n	8007250 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fab8 	bl	80077a0 <USBD_StdEPReq>
 8007230:	4603      	mov	r3, r0
 8007232:	73fb      	strb	r3, [r7, #15]
      break;
 8007234:	e00c      	b.n	8007250 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800723c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007240:	b2db      	uxtb	r3, r3
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 fc05 	bl	8008a54 <USBD_LL_StallEP>
 800724a:	4603      	mov	r3, r0
 800724c:	73fb      	strb	r3, [r7, #15]
      break;
 800724e:	bf00      	nop
  }

  return ret;
 8007250:	7bfb      	ldrb	r3, [r7, #15]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b086      	sub	sp, #24
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	460b      	mov	r3, r1
 8007264:	607a      	str	r2, [r7, #4]
 8007266:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007268:	7afb      	ldrb	r3, [r7, #11]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d137      	bne.n	80072de <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007274:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800727c:	2b03      	cmp	r3, #3
 800727e:	d14a      	bne.n	8007316 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	429a      	cmp	r2, r3
 800728a:	d913      	bls.n	80072b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	1ad2      	subs	r2, r2, r3
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	4293      	cmp	r3, r2
 80072a4:	bf28      	it	cs
 80072a6:	4613      	movcs	r3, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 ffad 	bl	800820c <USBD_CtlContinueRx>
 80072b2:	e030      	b.n	8007316 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d105      	bne.n	80072d6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 ffa9 	bl	800822e <USBD_CtlSendStatus>
 80072dc:	e01b      	b.n	8007316 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d013      	beq.n	8007312 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d10e      	bne.n	8007312 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	7afa      	ldrb	r2, [r7, #11]
 80072fe:	4611      	mov	r1, r2
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	4798      	blx	r3
 8007304:	4603      	mov	r3, r0
 8007306:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
 8007310:	e002      	b.n	8007318 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007312:	2303      	movs	r3, #3
 8007314:	e000      	b.n	8007318 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	460b      	mov	r3, r1
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d16a      	bne.n	800740a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3314      	adds	r3, #20
 8007338:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007340:	2b02      	cmp	r3, #2
 8007342:	d155      	bne.n	80073f0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	429a      	cmp	r2, r3
 800734e:	d914      	bls.n	800737a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	1ad2      	subs	r2, r2, r3
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	461a      	mov	r2, r3
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 ff22 	bl	80081b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800736c:	2300      	movs	r3, #0
 800736e:	2200      	movs	r2, #0
 8007370:	2100      	movs	r1, #0
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f001 fc18 	bl	8008ba8 <USBD_LL_PrepareReceive>
 8007378:	e03a      	b.n	80073f0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	429a      	cmp	r2, r3
 8007384:	d11c      	bne.n	80073c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800738e:	429a      	cmp	r2, r3
 8007390:	d316      	bcc.n	80073c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800739c:	429a      	cmp	r2, r3
 800739e:	d20f      	bcs.n	80073c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073a0:	2200      	movs	r2, #0
 80073a2:	2100      	movs	r1, #0
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 ff03 	bl	80081b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b2:	2300      	movs	r3, #0
 80073b4:	2200      	movs	r2, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f001 fbf5 	bl	8008ba8 <USBD_LL_PrepareReceive>
 80073be:	e017      	b.n	80073f0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d105      	bne.n	80073e2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073e2:	2180      	movs	r1, #128	; 0x80
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f001 fb35 	bl	8008a54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 ff32 	bl	8008254 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d123      	bne.n	8007442 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f7ff fe9b 	bl	8007136 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007408:	e01b      	b.n	8007442 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d013      	beq.n	800743e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800741c:	2b03      	cmp	r3, #3
 800741e:	d10e      	bne.n	800743e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	7afa      	ldrb	r2, [r7, #11]
 800742a:	4611      	mov	r1, r2
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	4798      	blx	r3
 8007430:	4603      	mov	r3, r0
 8007432:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	e002      	b.n	8007444 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800743e:	2303      	movs	r3, #3
 8007440:	e000      	b.n	8007444 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007478:	2b00      	cmp	r3, #0
 800747a:	d009      	beq.n	8007490 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6852      	ldr	r2, [r2, #4]
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	4611      	mov	r1, r2
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007490:	2340      	movs	r3, #64	; 0x40
 8007492:	2200      	movs	r2, #0
 8007494:	2100      	movs	r1, #0
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f001 fa97 	bl	80089ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2240      	movs	r2, #64	; 0x40
 80074a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074ac:	2340      	movs	r3, #64	; 0x40
 80074ae:	2200      	movs	r2, #0
 80074b0:	2180      	movs	r1, #128	; 0x80
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fa89 	bl	80089ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2240      	movs	r2, #64	; 0x40
 80074c2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	460b      	mov	r3, r1
 80074d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	78fa      	ldrb	r2, [r7, #3]
 80074de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2204      	movs	r2, #4
 8007506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007526:	2b04      	cmp	r3, #4
 8007528:	d105      	bne.n	8007536 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007552:	2b03      	cmp	r3, #3
 8007554:	d10b      	bne.n	800756e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d005      	beq.n	800756e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6852      	ldr	r2, [r2, #4]
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	4611      	mov	r1, r2
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
  }

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b087      	sub	sp, #28
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	3301      	adds	r3, #1
 8007610:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007618:	8a3b      	ldrh	r3, [r7, #16]
 800761a:	021b      	lsls	r3, r3, #8
 800761c:	b21a      	sxth	r2, r3
 800761e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007622:	4313      	orrs	r3, r2
 8007624:	b21b      	sxth	r3, r3
 8007626:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007628:	89fb      	ldrh	r3, [r7, #14]
}
 800762a:	4618      	mov	r0, r3
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800764e:	2b20      	cmp	r3, #32
 8007650:	d004      	beq.n	800765c <USBD_StdDevReq+0x24>
 8007652:	2b40      	cmp	r3, #64	; 0x40
 8007654:	d002      	beq.n	800765c <USBD_StdDevReq+0x24>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <USBD_StdDevReq+0x38>
 800765a:	e050      	b.n	80076fe <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	4798      	blx	r3
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]
    break;
 800766e:	e04b      	b.n	8007708 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	785b      	ldrb	r3, [r3, #1]
 8007674:	2b09      	cmp	r3, #9
 8007676:	d83c      	bhi.n	80076f2 <USBD_StdDevReq+0xba>
 8007678:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <USBD_StdDevReq+0x48>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	080076d5 	.word	0x080076d5
 8007684:	080076e9 	.word	0x080076e9
 8007688:	080076f3 	.word	0x080076f3
 800768c:	080076df 	.word	0x080076df
 8007690:	080076f3 	.word	0x080076f3
 8007694:	080076b3 	.word	0x080076b3
 8007698:	080076a9 	.word	0x080076a9
 800769c:	080076f3 	.word	0x080076f3
 80076a0:	080076cb 	.word	0x080076cb
 80076a4:	080076bd 	.word	0x080076bd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f9ce 	bl	8007a4c <USBD_GetDescriptor>
      break;
 80076b0:	e024      	b.n	80076fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fb33 	bl	8007d20 <USBD_SetAddress>
      break;
 80076ba:	e01f      	b.n	80076fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fb70 	bl	8007da4 <USBD_SetConfig>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]
      break;
 80076c8:	e018      	b.n	80076fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fc0d 	bl	8007eec <USBD_GetConfig>
      break;
 80076d2:	e013      	b.n	80076fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fc3c 	bl	8007f54 <USBD_GetStatus>
      break;
 80076dc:	e00e      	b.n	80076fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fc6a 	bl	8007fba <USBD_SetFeature>
      break;
 80076e6:	e009      	b.n	80076fc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fc79 	bl	8007fe2 <USBD_ClrFeature>
      break;
 80076f0:	e004      	b.n	80076fc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fccf 	bl	8008098 <USBD_CtlError>
      break;
 80076fa:	bf00      	nop
    }
    break;
 80076fc:	e004      	b.n	8007708 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fcc9 	bl	8008098 <USBD_CtlError>
    break;
 8007706:	bf00      	nop
  }

  return ret;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop

08007714 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800772a:	2b20      	cmp	r3, #32
 800772c:	d003      	beq.n	8007736 <USBD_StdItfReq+0x22>
 800772e:	2b40      	cmp	r3, #64	; 0x40
 8007730:	d001      	beq.n	8007736 <USBD_StdItfReq+0x22>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d12a      	bne.n	800778c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773c:	3b01      	subs	r3, #1
 800773e:	2b02      	cmp	r3, #2
 8007740:	d81d      	bhi.n	800777e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	889b      	ldrh	r3, [r3, #4]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	d813      	bhi.n	8007774 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	88db      	ldrh	r3, [r3, #6]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d110      	bne.n	8007788 <USBD_StdItfReq+0x74>
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10d      	bne.n	8007788 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fd5e 	bl	800822e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007772:	e009      	b.n	8007788 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fc8e 	bl	8008098 <USBD_CtlError>
      break;
 800777c:	e004      	b.n	8007788 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fc89 	bl	8008098 <USBD_CtlError>
      break;
 8007786:	e000      	b.n	800778a <USBD_StdItfReq+0x76>
      break;
 8007788:	bf00      	nop
    }
    break;
 800778a:	e004      	b.n	8007796 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fc82 	bl	8008098 <USBD_CtlError>
    break;
 8007794:	bf00      	nop
  }

  return ret;
 8007796:	7bfb      	ldrb	r3, [r7, #15]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	889b      	ldrh	r3, [r3, #4]
 80077b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d004      	beq.n	80077ca <USBD_StdEPReq+0x2a>
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d002      	beq.n	80077ca <USBD_StdEPReq+0x2a>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <USBD_StdEPReq+0x3e>
 80077c8:	e135      	b.n	8007a36 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	4798      	blx	r3
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
    break;
 80077dc:	e130      	b.n	8007a40 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d03e      	beq.n	8007864 <USBD_StdEPReq+0xc4>
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d002      	beq.n	80077f0 <USBD_StdEPReq+0x50>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d077      	beq.n	80078de <USBD_StdEPReq+0x13e>
 80077ee:	e11c      	b.n	8007a2a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d002      	beq.n	8007800 <USBD_StdEPReq+0x60>
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d015      	beq.n	800782a <USBD_StdEPReq+0x8a>
 80077fe:	e02b      	b.n	8007858 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00c      	beq.n	8007820 <USBD_StdEPReq+0x80>
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b80      	cmp	r3, #128	; 0x80
 800780a:	d009      	beq.n	8007820 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 f91f 	bl	8008a54 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007816:	2180      	movs	r1, #128	; 0x80
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 f91b 	bl	8008a54 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800781e:	e020      	b.n	8007862 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fc38 	bl	8008098 <USBD_CtlError>
        break;
 8007828:	e01b      	b.n	8007862 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	885b      	ldrh	r3, [r3, #2]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10e      	bne.n	8007850 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <USBD_StdEPReq+0xb0>
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	2b80      	cmp	r3, #128	; 0x80
 800783c:	d008      	beq.n	8007850 <USBD_StdEPReq+0xb0>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	88db      	ldrh	r3, [r3, #6]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d104      	bne.n	8007850 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 f902 	bl	8008a54 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fcec 	bl	800822e <USBD_CtlSendStatus>

        break;
 8007856:	e004      	b.n	8007862 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fc1c 	bl	8008098 <USBD_CtlError>
        break;
 8007860:	bf00      	nop
      }
      break;
 8007862:	e0e7      	b.n	8007a34 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786a:	2b02      	cmp	r3, #2
 800786c:	d002      	beq.n	8007874 <USBD_StdEPReq+0xd4>
 800786e:	2b03      	cmp	r3, #3
 8007870:	d015      	beq.n	800789e <USBD_StdEPReq+0xfe>
 8007872:	e02d      	b.n	80078d0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00c      	beq.n	8007894 <USBD_StdEPReq+0xf4>
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b80      	cmp	r3, #128	; 0x80
 800787e:	d009      	beq.n	8007894 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 f8e5 	bl	8008a54 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800788a:	2180      	movs	r1, #128	; 0x80
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 f8e1 	bl	8008a54 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007892:	e023      	b.n	80078dc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fbfe 	bl	8008098 <USBD_CtlError>
        break;
 800789c:	e01e      	b.n	80078dc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	885b      	ldrh	r3, [r3, #2]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d119      	bne.n	80078da <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d004      	beq.n	80078ba <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 f8ec 	bl	8008a92 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fcb7 	bl	800822e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	4798      	blx	r3
        }
        break;
 80078ce:	e004      	b.n	80078da <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fbe0 	bl	8008098 <USBD_CtlError>
        break;
 80078d8:	e000      	b.n	80078dc <USBD_StdEPReq+0x13c>
        break;
 80078da:	bf00      	nop
      }
      break;
 80078dc:	e0aa      	b.n	8007a34 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d002      	beq.n	80078ee <USBD_StdEPReq+0x14e>
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d032      	beq.n	8007952 <USBD_StdEPReq+0x1b2>
 80078ec:	e097      	b.n	8007a1e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d007      	beq.n	8007904 <USBD_StdEPReq+0x164>
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b80      	cmp	r3, #128	; 0x80
 80078f8:	d004      	beq.n	8007904 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fbcb 	bl	8008098 <USBD_CtlError>
          break;
 8007902:	e091      	b.n	8007a28 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	da0b      	bge.n	8007924 <USBD_StdEPReq+0x184>
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	3310      	adds	r3, #16
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	3304      	adds	r3, #4
 8007922:	e00b      	b.n	800793c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4413      	add	r3, r2
 800793a:	3304      	adds	r3, #4
 800793c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2202      	movs	r2, #2
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fc15 	bl	800817a <USBD_CtlSendData>
        break;
 8007950:	e06a      	b.n	8007a28 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007952:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007956:	2b00      	cmp	r3, #0
 8007958:	da11      	bge.n	800797e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	f003 020f 	and.w	r2, r3, #15
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	3324      	adds	r3, #36	; 0x24
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d117      	bne.n	80079a4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fb8e 	bl	8008098 <USBD_CtlError>
            break;
 800797c:	e054      	b.n	8007a28 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	f003 020f 	and.w	r2, r3, #15
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d104      	bne.n	80079a4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb7b 	bl	8008098 <USBD_CtlError>
            break;
 80079a2:	e041      	b.n	8007a28 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	da0b      	bge.n	80079c4 <USBD_StdEPReq+0x224>
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	3310      	adds	r3, #16
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	3304      	adds	r3, #4
 80079c2:	e00b      	b.n	80079dc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4413      	add	r3, r2
 80079da:	3304      	adds	r3, #4
 80079dc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <USBD_StdEPReq+0x24a>
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b80      	cmp	r3, #128	; 0x80
 80079e8:	d103      	bne.n	80079f2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	e00e      	b.n	8007a10 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 f86a 	bl	8008ad0 <USBD_LL_IsStallEP>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2201      	movs	r2, #1
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	e002      	b.n	8007a10 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2202      	movs	r2, #2
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fbaf 	bl	800817a <USBD_CtlSendData>
          break;
 8007a1c:	e004      	b.n	8007a28 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fb39 	bl	8008098 <USBD_CtlError>
        break;
 8007a26:	bf00      	nop
      }
      break;
 8007a28:	e004      	b.n	8007a34 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fb33 	bl	8008098 <USBD_CtlError>
      break;
 8007a32:	bf00      	nop
    }
    break;
 8007a34:	e004      	b.n	8007a40 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fb2d 	bl	8008098 <USBD_CtlError>
    break;
 8007a3e:	bf00      	nop
  }

  return ret;
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	0a1b      	lsrs	r3, r3, #8
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	2b06      	cmp	r3, #6
 8007a6e:	f200 8128 	bhi.w	8007cc2 <USBD_GetDescriptor+0x276>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <USBD_GetDescriptor+0x2c>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	08007aad 	.word	0x08007aad
 8007a80:	08007aed 	.word	0x08007aed
 8007a84:	08007cc3 	.word	0x08007cc3
 8007a88:	08007cc3 	.word	0x08007cc3
 8007a8c:	08007c63 	.word	0x08007c63
 8007a90:	08007c8f 	.word	0x08007c8f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	7c12      	ldrb	r2, [r2, #16]
 8007aa0:	f107 0108 	add.w	r1, r7, #8
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
 8007aa8:	60f8      	str	r0, [r7, #12]
    break;
 8007aaa:	e112      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7c1b      	ldrb	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10d      	bne.n	8007ad0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abc:	f107 0208 	add.w	r2, r7, #8
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4798      	blx	r3
 8007ac4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	2202      	movs	r2, #2
 8007acc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007ace:	e100      	b.n	8007cd2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	f107 0208 	add.w	r2, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	701a      	strb	r2, [r3, #0]
    break;
 8007aea:	e0f2      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	885b      	ldrh	r3, [r3, #2]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b05      	cmp	r3, #5
 8007af4:	f200 80ac 	bhi.w	8007c50 <USBD_GetDescriptor+0x204>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <USBD_GetDescriptor+0xb4>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b19 	.word	0x08007b19
 8007b04:	08007b4d 	.word	0x08007b4d
 8007b08:	08007b81 	.word	0x08007b81
 8007b0c:	08007bb5 	.word	0x08007bb5
 8007b10:	08007be9 	.word	0x08007be9
 8007b14:	08007c1d 	.word	0x08007c1d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00b      	beq.n	8007b3c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	7c12      	ldrb	r2, [r2, #16]
 8007b30:	f107 0108 	add.w	r1, r7, #8
 8007b34:	4610      	mov	r0, r2
 8007b36:	4798      	blx	r3
 8007b38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b3a:	e091      	b.n	8007c60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 faaa 	bl	8008098 <USBD_CtlError>
        err++;
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	3301      	adds	r3, #1
 8007b48:	72fb      	strb	r3, [r7, #11]
      break;
 8007b4a:	e089      	b.n	8007c60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	7c12      	ldrb	r2, [r2, #16]
 8007b64:	f107 0108 	add.w	r1, r7, #8
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b6e:	e077      	b.n	8007c60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa90 	bl	8008098 <USBD_CtlError>
        err++;
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	72fb      	strb	r3, [r7, #11]
      break;
 8007b7e:	e06f      	b.n	8007c60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	7c12      	ldrb	r2, [r2, #16]
 8007b98:	f107 0108 	add.w	r1, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ba2:	e05d      	b.n	8007c60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa76 	bl	8008098 <USBD_CtlError>
        err++;
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	72fb      	strb	r3, [r7, #11]
      break;
 8007bb2:	e055      	b.n	8007c60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	7c12      	ldrb	r2, [r2, #16]
 8007bcc:	f107 0108 	add.w	r1, r7, #8
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
 8007bd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bd6:	e043      	b.n	8007c60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa5c 	bl	8008098 <USBD_CtlError>
        err++;
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	3301      	adds	r3, #1
 8007be4:	72fb      	strb	r3, [r7, #11]
      break;
 8007be6:	e03b      	b.n	8007c60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	7c12      	ldrb	r2, [r2, #16]
 8007c00:	f107 0108 	add.w	r1, r7, #8
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c0a:	e029      	b.n	8007c60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa42 	bl	8008098 <USBD_CtlError>
        err++;
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	3301      	adds	r3, #1
 8007c18:	72fb      	strb	r3, [r7, #11]
      break;
 8007c1a:	e021      	b.n	8007c60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 0108 	add.w	r1, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c3e:	e00f      	b.n	8007c60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa28 	bl	8008098 <USBD_CtlError>
        err++;
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c4e:	e007      	b.n	8007c60 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa20 	bl	8008098 <USBD_CtlError>
      err++;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007c5e:	bf00      	nop
    }
    break;
 8007c60:	e037      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	7c1b      	ldrb	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c72:	f107 0208 	add.w	r2, r7, #8
 8007c76:	4610      	mov	r0, r2
 8007c78:	4798      	blx	r3
 8007c7a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007c7c:	e029      	b.n	8007cd2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fa09 	bl	8008098 <USBD_CtlError>
      err++;
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	72fb      	strb	r3, [r7, #11]
    break;
 8007c8c:	e021      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	7c1b      	ldrb	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10d      	bne.n	8007cb2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	f107 0208 	add.w	r2, r7, #8
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	4798      	blx	r3
 8007ca6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	2207      	movs	r2, #7
 8007cae:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007cb0:	e00f      	b.n	8007cd2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f9ef 	bl	8008098 <USBD_CtlError>
      err++;
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	72fb      	strb	r3, [r7, #11]
    break;
 8007cc0:	e007      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f9e7 	bl	8008098 <USBD_CtlError>
    err++;
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	72fb      	strb	r3, [r7, #11]
    break;
 8007cd0:	bf00      	nop
  }

  if (err != 0U)
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d11e      	bne.n	8007d16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	88db      	ldrh	r3, [r3, #6]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d016      	beq.n	8007d0e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007ce0:	893b      	ldrh	r3, [r7, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00e      	beq.n	8007d04 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	88da      	ldrh	r2, [r3, #6]
 8007cea:	893b      	ldrh	r3, [r7, #8]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	bf28      	it	cs
 8007cf0:	4613      	movcs	r3, r2
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cf6:	893b      	ldrh	r3, [r7, #8]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa3c 	bl	800817a <USBD_CtlSendData>
 8007d02:	e009      	b.n	8007d18 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f9c6 	bl	8008098 <USBD_CtlError>
 8007d0c:	e004      	b.n	8007d18 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa8d 	bl	800822e <USBD_CtlSendStatus>
 8007d14:	e000      	b.n	8007d18 <USBD_GetDescriptor+0x2cc>
    return;
 8007d16:	bf00      	nop
    }
  }
}
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop

08007d20 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	889b      	ldrh	r3, [r3, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d130      	bne.n	8007d94 <USBD_SetAddress+0x74>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	88db      	ldrh	r3, [r3, #6]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d12c      	bne.n	8007d94 <USBD_SetAddress+0x74>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	885b      	ldrh	r3, [r3, #2]
 8007d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d40:	d828      	bhi.n	8007d94 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	885b      	ldrh	r3, [r3, #2]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d104      	bne.n	8007d62 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f99c 	bl	8008098 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d60:	e01c      	b.n	8007d9c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7bfa      	ldrb	r2, [r7, #15]
 8007d66:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 feda 	bl	8008b28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fa5a 	bl	800822e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d004      	beq.n	8007d8a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d88:	e008      	b.n	8007d9c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d92:	e003      	b.n	8007d9c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f97e 	bl	8008098 <USBD_CtlError>
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	885b      	ldrh	r3, [r3, #2]
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	4b4b      	ldr	r3, [pc, #300]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007dba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007dbc:	4b4a      	ldr	r3, [pc, #296]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d905      	bls.n	8007dd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f966 	bl	8008098 <USBD_CtlError>
    return USBD_FAIL;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e087      	b.n	8007ee0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d002      	beq.n	8007de0 <USBD_SetConfig+0x3c>
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d025      	beq.n	8007e2a <USBD_SetConfig+0x86>
 8007dde:	e071      	b.n	8007ec4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007de0:	4b41      	ldr	r3, [pc, #260]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01c      	beq.n	8007e22 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007de8:	4b3f      	ldr	r3, [pc, #252]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007df2:	4b3d      	ldr	r3, [pc, #244]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff f9a7 	bl	800714c <USBD_SetClassConfig>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f944 	bl	8008098 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007e10:	e065      	b.n	8007ede <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa0b 	bl	800822e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007e20:	e05d      	b.n	8007ede <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa03 	bl	800822e <USBD_CtlSendStatus>
    break;
 8007e28:	e059      	b.n	8007ede <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007e2a:	4b2f      	ldr	r3, [pc, #188]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d112      	bne.n	8007e58 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2202      	movs	r2, #2
 8007e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007e3a:	4b2b      	ldr	r3, [pc, #172]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e44:	4b28      	ldr	r3, [pc, #160]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7ff f99a 	bl	8007184 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f9ec 	bl	800822e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007e56:	e042      	b.n	8007ede <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007e58:	4b23      	ldr	r3, [pc, #140]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d02a      	beq.n	8007ebc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7ff f988 	bl	8007184 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007e74:	4b1c      	ldr	r3, [pc, #112]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff f961 	bl	800714c <USBD_SetClassConfig>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00f      	beq.n	8007eb4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f8fe 	bl	8008098 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff f96d 	bl	8007184 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2202      	movs	r2, #2
 8007eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007eb2:	e014      	b.n	8007ede <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f9ba 	bl	800822e <USBD_CtlSendStatus>
    break;
 8007eba:	e010      	b.n	8007ede <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f9b6 	bl	800822e <USBD_CtlSendStatus>
    break;
 8007ec2:	e00c      	b.n	8007ede <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f8e6 	bl	8008098 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ecc:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <USBD_SetConfig+0x144>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff f956 	bl	8007184 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	73fb      	strb	r3, [r7, #15]
    break;
 8007edc:	bf00      	nop
  }

  return ret;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	2000021c 	.word	0x2000021c

08007eec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	88db      	ldrh	r3, [r3, #6]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d004      	beq.n	8007f08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f8c9 	bl	8008098 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007f06:	e021      	b.n	8007f4c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	db17      	blt.n	8007f42 <USBD_GetConfig+0x56>
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	dd02      	ble.n	8007f1c <USBD_GetConfig+0x30>
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d00b      	beq.n	8007f32 <USBD_GetConfig+0x46>
 8007f1a:	e012      	b.n	8007f42 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3308      	adds	r3, #8
 8007f26:	2201      	movs	r2, #1
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f925 	bl	800817a <USBD_CtlSendData>
      break;
 8007f30:	e00c      	b.n	8007f4c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3304      	adds	r3, #4
 8007f36:	2201      	movs	r2, #1
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f91d 	bl	800817a <USBD_CtlSendData>
      break;
 8007f40:	e004      	b.n	8007f4c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f8a7 	bl	8008098 <USBD_CtlError>
      break;
 8007f4a:	bf00      	nop
}
 8007f4c:	bf00      	nop
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f64:	3b01      	subs	r3, #1
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d81e      	bhi.n	8007fa8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	88db      	ldrh	r3, [r3, #6]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d004      	beq.n	8007f7c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f88f 	bl	8008098 <USBD_CtlError>
      break;
 8007f7a:	e01a      	b.n	8007fb2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d005      	beq.n	8007f98 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f043 0202 	orr.w	r2, r3, #2
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	330c      	adds	r3, #12
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f8ea 	bl	800817a <USBD_CtlSendData>
    break;
 8007fa6:	e004      	b.n	8007fb2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f874 	bl	8008098 <USBD_CtlError>
    break;
 8007fb0:	bf00      	nop
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	885b      	ldrh	r3, [r3, #2]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d106      	bne.n	8007fda <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f92a 	bl	800822e <USBD_CtlSendStatus>
  }
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d80b      	bhi.n	8008010 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	885b      	ldrh	r3, [r3, #2]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d10c      	bne.n	800801a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f910 	bl	800822e <USBD_CtlSendStatus>
      }
      break;
 800800e:	e004      	b.n	800801a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f840 	bl	8008098 <USBD_CtlError>
      break;
 8008018:	e000      	b.n	800801c <USBD_ClrFeature+0x3a>
      break;
 800801a:	bf00      	nop
  }
}
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	781a      	ldrb	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	781a      	ldrb	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f7ff fad3 	bl	80075fa <SWAPBYTE>
 8008054:	4603      	mov	r3, r0
 8008056:	461a      	mov	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3301      	adds	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3301      	adds	r3, #1
 8008066:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f7ff fac6 	bl	80075fa <SWAPBYTE>
 800806e:	4603      	mov	r3, r0
 8008070:	461a      	mov	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3301      	adds	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3301      	adds	r3, #1
 8008080:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff fab9 	bl	80075fa <SWAPBYTE>
 8008088:	4603      	mov	r3, r0
 800808a:	461a      	mov	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	80da      	strh	r2, [r3, #6]
}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080a2:	2180      	movs	r1, #128	; 0x80
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fcd5 	bl	8008a54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080aa:	2100      	movs	r1, #0
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fcd1 	bl	8008a54 <USBD_LL_StallEP>
}
 80080b2:	bf00      	nop
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b086      	sub	sp, #24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d036      	beq.n	800813e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80080d4:	6938      	ldr	r0, [r7, #16]
 80080d6:	f000 f836 	bl	8008146 <USBD_GetLen>
 80080da:	4603      	mov	r3, r0
 80080dc:	3301      	adds	r3, #1
 80080de:	b29b      	uxth	r3, r3
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	4413      	add	r3, r2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	7812      	ldrb	r2, [r2, #0]
 80080f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	3301      	adds	r3, #1
 80080f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	4413      	add	r3, r2
 8008100:	2203      	movs	r2, #3
 8008102:	701a      	strb	r2, [r3, #0]
  idx++;
 8008104:	7dfb      	ldrb	r3, [r7, #23]
 8008106:	3301      	adds	r3, #1
 8008108:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800810a:	e013      	b.n	8008134 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	4413      	add	r3, r2
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	7812      	ldrb	r2, [r2, #0]
 8008116:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	3301      	adds	r3, #1
 800811c:	613b      	str	r3, [r7, #16]
    idx++;
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	3301      	adds	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008124:	7dfb      	ldrb	r3, [r7, #23]
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	4413      	add	r3, r2
 800812a:	2200      	movs	r2, #0
 800812c:	701a      	strb	r2, [r3, #0]
    idx++;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	3301      	adds	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e7      	bne.n	800810c <USBD_GetString+0x52>
 800813c:	e000      	b.n	8008140 <USBD_GetString+0x86>
    return;
 800813e:	bf00      	nop
  }
}
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008146:	b480      	push	{r7}
 8008148:	b085      	sub	sp, #20
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008156:	e005      	b.n	8008164 <USBD_GetLen+0x1e>
  {
    len++;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	3301      	adds	r3, #1
 800815c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	3301      	adds	r3, #1
 8008162:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1f5      	bne.n	8008158 <USBD_GetLen+0x12>
  }

  return len;
 800816c:	7bfb      	ldrb	r3, [r7, #15]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2202      	movs	r2, #2
 800818a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	2100      	movs	r1, #0
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 fce0 	bl	8008b66 <USBD_LL_Transmit>

  return USBD_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	2100      	movs	r1, #0
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fccf 	bl	8008b66 <USBD_LL_Transmit>

  return USBD_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2203      	movs	r2, #3
 80081e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	2100      	movs	r1, #0
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fcd3 	bl	8008ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	2100      	movs	r1, #0
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 fcc2 	bl	8008ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2204      	movs	r2, #4
 800823a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800823e:	2300      	movs	r3, #0
 8008240:	2200      	movs	r2, #0
 8008242:	2100      	movs	r1, #0
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fc8e 	bl	8008b66 <USBD_LL_Transmit>

  return USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2205      	movs	r2, #5
 8008260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008264:	2300      	movs	r3, #0
 8008266:	2200      	movs	r2, #0
 8008268:	2100      	movs	r1, #0
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fc9c 	bl	8008ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008280:	2200      	movs	r2, #0
 8008282:	4912      	ldr	r1, [pc, #72]	; (80082cc <MX_USB_DEVICE_Init+0x50>)
 8008284:	4812      	ldr	r0, [pc, #72]	; (80082d0 <MX_USB_DEVICE_Init+0x54>)
 8008286:	f7fe fef3 	bl	8007070 <USBD_Init>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008290:	f7fa f92a 	bl	80024e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008294:	490f      	ldr	r1, [pc, #60]	; (80082d4 <MX_USB_DEVICE_Init+0x58>)
 8008296:	480e      	ldr	r0, [pc, #56]	; (80082d0 <MX_USB_DEVICE_Init+0x54>)
 8008298:	f7fe ff20 	bl	80070dc <USBD_RegisterClass>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082a2:	f7fa f921 	bl	80024e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082a6:	490c      	ldr	r1, [pc, #48]	; (80082d8 <MX_USB_DEVICE_Init+0x5c>)
 80082a8:	4809      	ldr	r0, [pc, #36]	; (80082d0 <MX_USB_DEVICE_Init+0x54>)
 80082aa:	f7fe fe45 	bl	8006f38 <USBD_CDC_RegisterInterface>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082b4:	f7fa f918 	bl	80024e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082b8:	4805      	ldr	r0, [pc, #20]	; (80082d0 <MX_USB_DEVICE_Init+0x54>)
 80082ba:	f7fe ff30 	bl	800711e <USBD_Start>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082c4:	f7fa f910 	bl	80024e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082c8:	bf00      	nop
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20000148 	.word	0x20000148
 80082d0:	20000290 	.word	0x20000290
 80082d4:	20000030 	.word	0x20000030
 80082d8:	20000134 	.word	0x20000134

080082dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082e0:	2200      	movs	r2, #0
 80082e2:	4905      	ldr	r1, [pc, #20]	; (80082f8 <CDC_Init_FS+0x1c>)
 80082e4:	4805      	ldr	r0, [pc, #20]	; (80082fc <CDC_Init_FS+0x20>)
 80082e6:	f7fe fe3c 	bl	8006f62 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082ea:	4905      	ldr	r1, [pc, #20]	; (8008300 <CDC_Init_FS+0x24>)
 80082ec:	4803      	ldr	r0, [pc, #12]	; (80082fc <CDC_Init_FS+0x20>)
 80082ee:	f7fe fe51 	bl	8006f94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80082f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000d60 	.word	0x20000d60
 80082fc:	20000290 	.word	0x20000290
 8008300:	20000560 	.word	0x20000560

08008304 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008308:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800830a:	4618      	mov	r0, r3
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	6039      	str	r1, [r7, #0]
 800831e:	71fb      	strb	r3, [r7, #7]
 8008320:	4613      	mov	r3, r2
 8008322:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	2b23      	cmp	r3, #35	; 0x23
 8008328:	d84a      	bhi.n	80083c0 <CDC_Control_FS+0xac>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <CDC_Control_FS+0x1c>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	080083c1 	.word	0x080083c1
 8008334:	080083c1 	.word	0x080083c1
 8008338:	080083c1 	.word	0x080083c1
 800833c:	080083c1 	.word	0x080083c1
 8008340:	080083c1 	.word	0x080083c1
 8008344:	080083c1 	.word	0x080083c1
 8008348:	080083c1 	.word	0x080083c1
 800834c:	080083c1 	.word	0x080083c1
 8008350:	080083c1 	.word	0x080083c1
 8008354:	080083c1 	.word	0x080083c1
 8008358:	080083c1 	.word	0x080083c1
 800835c:	080083c1 	.word	0x080083c1
 8008360:	080083c1 	.word	0x080083c1
 8008364:	080083c1 	.word	0x080083c1
 8008368:	080083c1 	.word	0x080083c1
 800836c:	080083c1 	.word	0x080083c1
 8008370:	080083c1 	.word	0x080083c1
 8008374:	080083c1 	.word	0x080083c1
 8008378:	080083c1 	.word	0x080083c1
 800837c:	080083c1 	.word	0x080083c1
 8008380:	080083c1 	.word	0x080083c1
 8008384:	080083c1 	.word	0x080083c1
 8008388:	080083c1 	.word	0x080083c1
 800838c:	080083c1 	.word	0x080083c1
 8008390:	080083c1 	.word	0x080083c1
 8008394:	080083c1 	.word	0x080083c1
 8008398:	080083c1 	.word	0x080083c1
 800839c:	080083c1 	.word	0x080083c1
 80083a0:	080083c1 	.word	0x080083c1
 80083a4:	080083c1 	.word	0x080083c1
 80083a8:	080083c1 	.word	0x080083c1
 80083ac:	080083c1 	.word	0x080083c1
 80083b0:	080083c1 	.word	0x080083c1
 80083b4:	080083c1 	.word	0x080083c1
 80083b8:	080083c1 	.word	0x080083c1
 80083bc:	080083c1 	.word	0x080083c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083c0:	bf00      	nop
  }

  return (USBD_OK);
 80083c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	4805      	ldr	r0, [pc, #20]	; (80083f4 <CDC_Receive_FS+0x24>)
 80083de:	f7fe fdd9 	bl	8006f94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083e2:	4804      	ldr	r0, [pc, #16]	; (80083f4 <CDC_Receive_FS+0x24>)
 80083e4:	f7fe fe1a 	bl	800701c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000290 	.word	0x20000290

080083f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008408:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <CDC_Transmit_FS+0x48>)
 800840a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800840e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800841a:	2301      	movs	r3, #1
 800841c:	e00b      	b.n	8008436 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800841e:	887b      	ldrh	r3, [r7, #2]
 8008420:	461a      	mov	r2, r3
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4806      	ldr	r0, [pc, #24]	; (8008440 <CDC_Transmit_FS+0x48>)
 8008426:	f7fe fd9c 	bl	8006f62 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800842a:	4805      	ldr	r0, [pc, #20]	; (8008440 <CDC_Transmit_FS+0x48>)
 800842c:	f7fe fdc6 	bl	8006fbc <USBD_CDC_TransmitPacket>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20000290 	.word	0x20000290

08008444 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	4613      	mov	r3, r2
 8008450:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008456:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800845a:	4618      	mov	r0, r3
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
	...

08008468 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	6039      	str	r1, [r7, #0]
 8008472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2212      	movs	r2, #18
 8008478:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800847a:	4b03      	ldr	r3, [pc, #12]	; (8008488 <USBD_FS_DeviceDescriptor+0x20>)
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	20000164 	.word	0x20000164

0800848c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	6039      	str	r1, [r7, #0]
 8008496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2204      	movs	r2, #4
 800849c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800849e:	4b03      	ldr	r3, [pc, #12]	; (80084ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	20000178 	.word	0x20000178

080084b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084bc:	79fb      	ldrb	r3, [r7, #7]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d105      	bne.n	80084ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	4907      	ldr	r1, [pc, #28]	; (80084e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80084c6:	4808      	ldr	r0, [pc, #32]	; (80084e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80084c8:	f7ff fdf7 	bl	80080ba <USBD_GetString>
 80084cc:	e004      	b.n	80084d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	4904      	ldr	r1, [pc, #16]	; (80084e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80084d2:	4805      	ldr	r0, [pc, #20]	; (80084e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80084d4:	f7ff fdf1 	bl	80080ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80084d8:	4b02      	ldr	r3, [pc, #8]	; (80084e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20001560 	.word	0x20001560
 80084e8:	08009bf8 	.word	0x08009bf8

080084ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	6039      	str	r1, [r7, #0]
 80084f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	4904      	ldr	r1, [pc, #16]	; (800850c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084fc:	4804      	ldr	r0, [pc, #16]	; (8008510 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084fe:	f7ff fddc 	bl	80080ba <USBD_GetString>
  return USBD_StrDesc;
 8008502:	4b02      	ldr	r3, [pc, #8]	; (800850c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20001560 	.word	0x20001560
 8008510:	08009c10 	.word	0x08009c10

08008514 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	221a      	movs	r2, #26
 8008524:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008526:	f000 f843 	bl	80085b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800852a:	4b02      	ldr	r3, [pc, #8]	; (8008534 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	2000017c 	.word	0x2000017c

08008538 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	6039      	str	r1, [r7, #0]
 8008542:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d105      	bne.n	8008556 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4907      	ldr	r1, [pc, #28]	; (800856c <USBD_FS_ConfigStrDescriptor+0x34>)
 800854e:	4808      	ldr	r0, [pc, #32]	; (8008570 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008550:	f7ff fdb3 	bl	80080ba <USBD_GetString>
 8008554:	e004      	b.n	8008560 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4904      	ldr	r1, [pc, #16]	; (800856c <USBD_FS_ConfigStrDescriptor+0x34>)
 800855a:	4805      	ldr	r0, [pc, #20]	; (8008570 <USBD_FS_ConfigStrDescriptor+0x38>)
 800855c:	f7ff fdad 	bl	80080ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008560:	4b02      	ldr	r3, [pc, #8]	; (800856c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20001560 	.word	0x20001560
 8008570:	08009c24 	.word	0x08009c24

08008574 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	6039      	str	r1, [r7, #0]
 800857e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d105      	bne.n	8008592 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	4907      	ldr	r1, [pc, #28]	; (80085a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800858a:	4808      	ldr	r0, [pc, #32]	; (80085ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800858c:	f7ff fd95 	bl	80080ba <USBD_GetString>
 8008590:	e004      	b.n	800859c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4904      	ldr	r1, [pc, #16]	; (80085a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008596:	4805      	ldr	r0, [pc, #20]	; (80085ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008598:	f7ff fd8f 	bl	80080ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800859c:	4b02      	ldr	r3, [pc, #8]	; (80085a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20001560 	.word	0x20001560
 80085ac:	08009c30 	.word	0x08009c30

080085b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085b6:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <Get_SerialNum+0x44>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085bc:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <Get_SerialNum+0x48>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085c2:	4b0e      	ldr	r3, [pc, #56]	; (80085fc <Get_SerialNum+0x4c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4413      	add	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d009      	beq.n	80085ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085d6:	2208      	movs	r2, #8
 80085d8:	4909      	ldr	r1, [pc, #36]	; (8008600 <Get_SerialNum+0x50>)
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 f814 	bl	8008608 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085e0:	2204      	movs	r2, #4
 80085e2:	4908      	ldr	r1, [pc, #32]	; (8008604 <Get_SerialNum+0x54>)
 80085e4:	68b8      	ldr	r0, [r7, #8]
 80085e6:	f000 f80f 	bl	8008608 <IntToUnicode>
  }
}
 80085ea:	bf00      	nop
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	1fff7a10 	.word	0x1fff7a10
 80085f8:	1fff7a14 	.word	0x1fff7a14
 80085fc:	1fff7a18 	.word	0x1fff7a18
 8008600:	2000017e 	.word	0x2000017e
 8008604:	2000018e 	.word	0x2000018e

08008608 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	4613      	mov	r3, r2
 8008614:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800861a:	2300      	movs	r3, #0
 800861c:	75fb      	strb	r3, [r7, #23]
 800861e:	e027      	b.n	8008670 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	0f1b      	lsrs	r3, r3, #28
 8008624:	2b09      	cmp	r3, #9
 8008626:	d80b      	bhi.n	8008640 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	0f1b      	lsrs	r3, r3, #28
 800862c:	b2da      	uxtb	r2, r3
 800862e:	7dfb      	ldrb	r3, [r7, #23]
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	4619      	mov	r1, r3
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	440b      	add	r3, r1
 8008638:	3230      	adds	r2, #48	; 0x30
 800863a:	b2d2      	uxtb	r2, r2
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	e00a      	b.n	8008656 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	0f1b      	lsrs	r3, r3, #28
 8008644:	b2da      	uxtb	r2, r3
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	4619      	mov	r1, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	440b      	add	r3, r1
 8008650:	3237      	adds	r2, #55	; 0x37
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	3301      	adds	r3, #1
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	4413      	add	r3, r2
 8008666:	2200      	movs	r2, #0
 8008668:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	3301      	adds	r3, #1
 800866e:	75fb      	strb	r3, [r7, #23]
 8008670:	7dfa      	ldrb	r2, [r7, #23]
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	429a      	cmp	r2, r3
 8008676:	d3d3      	bcc.n	8008620 <IntToUnicode+0x18>
  }
}
 8008678:	bf00      	nop
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08a      	sub	sp, #40	; 0x28
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800868c:	f107 0314 	add.w	r3, r7, #20
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	605a      	str	r2, [r3, #4]
 8008696:	609a      	str	r2, [r3, #8]
 8008698:	60da      	str	r2, [r3, #12]
 800869a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086a4:	d13a      	bne.n	800871c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086a6:	2300      	movs	r3, #0
 80086a8:	613b      	str	r3, [r7, #16]
 80086aa:	4b1e      	ldr	r3, [pc, #120]	; (8008724 <HAL_PCD_MspInit+0xa0>)
 80086ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ae:	4a1d      	ldr	r2, [pc, #116]	; (8008724 <HAL_PCD_MspInit+0xa0>)
 80086b0:	f043 0301 	orr.w	r3, r3, #1
 80086b4:	6313      	str	r3, [r2, #48]	; 0x30
 80086b6:	4b1b      	ldr	r3, [pc, #108]	; (8008724 <HAL_PCD_MspInit+0xa0>)
 80086b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	613b      	str	r3, [r7, #16]
 80086c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80086c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c8:	2302      	movs	r3, #2
 80086ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086d0:	2303      	movs	r3, #3
 80086d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086d4:	230a      	movs	r3, #10
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d8:	f107 0314 	add.w	r3, r7, #20
 80086dc:	4619      	mov	r1, r3
 80086de:	4812      	ldr	r0, [pc, #72]	; (8008728 <HAL_PCD_MspInit+0xa4>)
 80086e0:	f7fa f9fc 	bl	8002adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086e4:	4b0f      	ldr	r3, [pc, #60]	; (8008724 <HAL_PCD_MspInit+0xa0>)
 80086e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e8:	4a0e      	ldr	r2, [pc, #56]	; (8008724 <HAL_PCD_MspInit+0xa0>)
 80086ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ee:	6353      	str	r3, [r2, #52]	; 0x34
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	4b0b      	ldr	r3, [pc, #44]	; (8008724 <HAL_PCD_MspInit+0xa0>)
 80086f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f8:	4a0a      	ldr	r2, [pc, #40]	; (8008724 <HAL_PCD_MspInit+0xa0>)
 80086fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086fe:	6453      	str	r3, [r2, #68]	; 0x44
 8008700:	4b08      	ldr	r3, [pc, #32]	; (8008724 <HAL_PCD_MspInit+0xa0>)
 8008702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800870c:	2200      	movs	r2, #0
 800870e:	2100      	movs	r1, #0
 8008710:	2043      	movs	r0, #67	; 0x43
 8008712:	f7fa f9ac 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008716:	2043      	movs	r0, #67	; 0x43
 8008718:	f7fa f9c5 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800871c:	bf00      	nop
 800871e:	3728      	adds	r7, #40	; 0x28
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	40023800 	.word	0x40023800
 8008728:	40020000 	.word	0x40020000

0800872c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008740:	4619      	mov	r1, r3
 8008742:	4610      	mov	r0, r2
 8008744:	f7fe fd36 	bl	80071b4 <USBD_LL_SetupStage>
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	78fb      	ldrb	r3, [r7, #3]
 8008778:	4619      	mov	r1, r3
 800877a:	f7fe fd6e 	bl	800725a <USBD_LL_DataOutStage>
}
 800877e:	bf00      	nop
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	460b      	mov	r3, r1
 8008790:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	4613      	mov	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	1a9b      	subs	r3, r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	3348      	adds	r3, #72	; 0x48
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	4619      	mov	r1, r3
 80087ae:	f7fe fdb7 	bl	8007320 <USBD_LL_DataInStage>
}
 80087b2:	bf00      	nop
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b082      	sub	sp, #8
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fe febb 	bl	8007544 <USBD_LL_SOF>
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087de:	2301      	movs	r3, #1
 80087e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d001      	beq.n	80087ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80087ea:	f7f9 fe7d 	bl	80024e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087f4:	7bfa      	ldrb	r2, [r7, #15]
 80087f6:	4611      	mov	r1, r2
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe fe68 	bl	80074ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe fe21 	bl	800744c <USBD_LL_Reset>
}
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe fe63 	bl	80074ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6812      	ldr	r2, [r2, #0]
 8008836:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800883a:	f043 0301 	orr.w	r3, r3, #1
 800883e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d005      	beq.n	8008854 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008848:	4b04      	ldr	r3, [pc, #16]	; (800885c <HAL_PCD_SuspendCallback+0x48>)
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	4a03      	ldr	r2, [pc, #12]	; (800885c <HAL_PCD_SuspendCallback+0x48>)
 800884e:	f043 0306 	orr.w	r3, r3, #6
 8008852:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	e000ed00 	.word	0xe000ed00

08008860 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800886e:	4618      	mov	r0, r3
 8008870:	f7fe fe52 	bl	8007518 <USBD_LL_Resume>
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe fe7d 	bl	8007592 <USBD_LL_IsoOUTIncomplete>
}
 8008898:	bf00      	nop
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088b2:	78fa      	ldrb	r2, [r7, #3]
 80088b4:	4611      	mov	r1, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fe5e 	bl	8007578 <USBD_LL_IsoINIncomplete>
}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe fe6a 	bl	80075ac <USBD_LL_DevConnected>
}
 80088d8:	bf00      	nop
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe fe67 	bl	80075c2 <USBD_LL_DevDisconnected>
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d13c      	bne.n	8008986 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800890c:	4a20      	ldr	r2, [pc, #128]	; (8008990 <USBD_LL_Init+0x94>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a1e      	ldr	r2, [pc, #120]	; (8008990 <USBD_LL_Init+0x94>)
 8008918:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800891c:	4b1c      	ldr	r3, [pc, #112]	; (8008990 <USBD_LL_Init+0x94>)
 800891e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008922:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008924:	4b1a      	ldr	r3, [pc, #104]	; (8008990 <USBD_LL_Init+0x94>)
 8008926:	2204      	movs	r2, #4
 8008928:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800892a:	4b19      	ldr	r3, [pc, #100]	; (8008990 <USBD_LL_Init+0x94>)
 800892c:	2202      	movs	r2, #2
 800892e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008930:	4b17      	ldr	r3, [pc, #92]	; (8008990 <USBD_LL_Init+0x94>)
 8008932:	2200      	movs	r2, #0
 8008934:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008936:	4b16      	ldr	r3, [pc, #88]	; (8008990 <USBD_LL_Init+0x94>)
 8008938:	2202      	movs	r2, #2
 800893a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800893c:	4b14      	ldr	r3, [pc, #80]	; (8008990 <USBD_LL_Init+0x94>)
 800893e:	2200      	movs	r2, #0
 8008940:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008942:	4b13      	ldr	r3, [pc, #76]	; (8008990 <USBD_LL_Init+0x94>)
 8008944:	2200      	movs	r2, #0
 8008946:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008948:	4b11      	ldr	r3, [pc, #68]	; (8008990 <USBD_LL_Init+0x94>)
 800894a:	2200      	movs	r2, #0
 800894c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800894e:	4b10      	ldr	r3, [pc, #64]	; (8008990 <USBD_LL_Init+0x94>)
 8008950:	2200      	movs	r2, #0
 8008952:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008954:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <USBD_LL_Init+0x94>)
 8008956:	2200      	movs	r2, #0
 8008958:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800895a:	480d      	ldr	r0, [pc, #52]	; (8008990 <USBD_LL_Init+0x94>)
 800895c:	f7fa fa71 	bl	8002e42 <HAL_PCD_Init>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008966:	f7f9 fdbf 	bl	80024e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800896a:	2180      	movs	r1, #128	; 0x80
 800896c:	4808      	ldr	r0, [pc, #32]	; (8008990 <USBD_LL_Init+0x94>)
 800896e:	f7fb fbce 	bl	800410e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008972:	2240      	movs	r2, #64	; 0x40
 8008974:	2100      	movs	r1, #0
 8008976:	4806      	ldr	r0, [pc, #24]	; (8008990 <USBD_LL_Init+0x94>)
 8008978:	f7fb fb82 	bl	8004080 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800897c:	2280      	movs	r2, #128	; 0x80
 800897e:	2101      	movs	r1, #1
 8008980:	4803      	ldr	r0, [pc, #12]	; (8008990 <USBD_LL_Init+0x94>)
 8008982:	f7fb fb7d 	bl	8004080 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20001760 	.word	0x20001760

08008994 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fa fb66 	bl	800307c <HAL_PCD_Start>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f92a 	bl	8008c10 <USBD_Get_USB_Status>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	4608      	mov	r0, r1
 80089d4:	4611      	mov	r1, r2
 80089d6:	461a      	mov	r2, r3
 80089d8:	4603      	mov	r3, r0
 80089da:	70fb      	strb	r3, [r7, #3]
 80089dc:	460b      	mov	r3, r1
 80089de:	70bb      	strb	r3, [r7, #2]
 80089e0:	4613      	mov	r3, r2
 80089e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089f2:	78bb      	ldrb	r3, [r7, #2]
 80089f4:	883a      	ldrh	r2, [r7, #0]
 80089f6:	78f9      	ldrb	r1, [r7, #3]
 80089f8:	f7fa ff4a 	bl	8003890 <HAL_PCD_EP_Open>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 f904 	bl	8008c10 <USBD_Get_USB_Status>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a30:	78fa      	ldrb	r2, [r7, #3]
 8008a32:	4611      	mov	r1, r2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fa ff93 	bl	8003960 <HAL_PCD_EP_Close>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 f8e5 	bl	8008c10 <USBD_Get_USB_Status>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a6e:	78fa      	ldrb	r2, [r7, #3]
 8008a70:	4611      	mov	r1, r2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fb f86b 	bl	8003b4e <HAL_PCD_EP_SetStall>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 f8c6 	bl	8008c10 <USBD_Get_USB_Status>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008aac:	78fa      	ldrb	r2, [r7, #3]
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fb f8b0 	bl	8003c16 <HAL_PCD_EP_ClrStall>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 f8a7 	bl	8008c10 <USBD_Get_USB_Status>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ae2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	da0b      	bge.n	8008b04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008af2:	68f9      	ldr	r1, [r7, #12]
 8008af4:	4613      	mov	r3, r2
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	1a9b      	subs	r3, r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	440b      	add	r3, r1
 8008afe:	333e      	adds	r3, #62	; 0x3e
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	e00b      	b.n	8008b1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b0a:	68f9      	ldr	r1, [r7, #12]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	1a9b      	subs	r3, r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	440b      	add	r3, r1
 8008b16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	4611      	mov	r1, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fa fe7d 	bl	8003846 <HAL_PCD_SetAddress>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f85c 	bl	8008c10 <USBD_Get_USB_Status>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	603b      	str	r3, [r7, #0]
 8008b72:	460b      	mov	r3, r1
 8008b74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b84:	7af9      	ldrb	r1, [r7, #11]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	f7fa ff96 	bl	8003aba <HAL_PCD_EP_Transmit>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 f83b 	bl	8008c10 <USBD_Get_USB_Status>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	607a      	str	r2, [r7, #4]
 8008bb2:	603b      	str	r3, [r7, #0]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bc6:	7af9      	ldrb	r1, [r7, #11]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	f7fa ff12 	bl	80039f4 <HAL_PCD_EP_Receive>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 f81a 	bl	8008c10 <USBD_Get_USB_Status>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008be0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bfc:	78fa      	ldrb	r2, [r7, #3]
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fa ff42 	bl	8003a8a <HAL_PCD_EP_GetRxCount>
 8008c06:	4603      	mov	r3, r0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c1e:	79fb      	ldrb	r3, [r7, #7]
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d817      	bhi.n	8008c54 <USBD_Get_USB_Status+0x44>
 8008c24:	a201      	add	r2, pc, #4	; (adr r2, 8008c2c <USBD_Get_USB_Status+0x1c>)
 8008c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2a:	bf00      	nop
 8008c2c:	08008c3d 	.word	0x08008c3d
 8008c30:	08008c43 	.word	0x08008c43
 8008c34:	08008c49 	.word	0x08008c49
 8008c38:	08008c4f 	.word	0x08008c4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c40:	e00b      	b.n	8008c5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c42:	2303      	movs	r3, #3
 8008c44:	73fb      	strb	r3, [r7, #15]
    break;
 8008c46:	e008      	b.n	8008c5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4c:	e005      	b.n	8008c5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	73fb      	strb	r3, [r7, #15]
    break;
 8008c52:	e002      	b.n	8008c5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c54:	2303      	movs	r3, #3
 8008c56:	73fb      	strb	r3, [r7, #15]
    break;
 8008c58:	bf00      	nop
  }
  return usb_status;
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <__errno>:
 8008c68:	4b01      	ldr	r3, [pc, #4]	; (8008c70 <__errno+0x8>)
 8008c6a:	6818      	ldr	r0, [r3, #0]
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	20000198 	.word	0x20000198

08008c74 <__libc_init_array>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	4e0d      	ldr	r6, [pc, #52]	; (8008cac <__libc_init_array+0x38>)
 8008c78:	4c0d      	ldr	r4, [pc, #52]	; (8008cb0 <__libc_init_array+0x3c>)
 8008c7a:	1ba4      	subs	r4, r4, r6
 8008c7c:	10a4      	asrs	r4, r4, #2
 8008c7e:	2500      	movs	r5, #0
 8008c80:	42a5      	cmp	r5, r4
 8008c82:	d109      	bne.n	8008c98 <__libc_init_array+0x24>
 8008c84:	4e0b      	ldr	r6, [pc, #44]	; (8008cb4 <__libc_init_array+0x40>)
 8008c86:	4c0c      	ldr	r4, [pc, #48]	; (8008cb8 <__libc_init_array+0x44>)
 8008c88:	f000 fc38 	bl	80094fc <_init>
 8008c8c:	1ba4      	subs	r4, r4, r6
 8008c8e:	10a4      	asrs	r4, r4, #2
 8008c90:	2500      	movs	r5, #0
 8008c92:	42a5      	cmp	r5, r4
 8008c94:	d105      	bne.n	8008ca2 <__libc_init_array+0x2e>
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
 8008c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c9c:	4798      	blx	r3
 8008c9e:	3501      	adds	r5, #1
 8008ca0:	e7ee      	b.n	8008c80 <__libc_init_array+0xc>
 8008ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ca6:	4798      	blx	r3
 8008ca8:	3501      	adds	r5, #1
 8008caa:	e7f2      	b.n	8008c92 <__libc_init_array+0x1e>
 8008cac:	08009c8c 	.word	0x08009c8c
 8008cb0:	08009c8c 	.word	0x08009c8c
 8008cb4:	08009c8c 	.word	0x08009c8c
 8008cb8:	08009c90 	.word	0x08009c90

08008cbc <malloc>:
 8008cbc:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <malloc+0xc>)
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f000 b86d 	b.w	8008da0 <_malloc_r>
 8008cc6:	bf00      	nop
 8008cc8:	20000198 	.word	0x20000198

08008ccc <free>:
 8008ccc:	4b02      	ldr	r3, [pc, #8]	; (8008cd8 <free+0xc>)
 8008cce:	4601      	mov	r1, r0
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f000 b817 	b.w	8008d04 <_free_r>
 8008cd6:	bf00      	nop
 8008cd8:	20000198 	.word	0x20000198

08008cdc <memcpy>:
 8008cdc:	b510      	push	{r4, lr}
 8008cde:	1e43      	subs	r3, r0, #1
 8008ce0:	440a      	add	r2, r1
 8008ce2:	4291      	cmp	r1, r2
 8008ce4:	d100      	bne.n	8008ce8 <memcpy+0xc>
 8008ce6:	bd10      	pop	{r4, pc}
 8008ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cf0:	e7f7      	b.n	8008ce2 <memcpy+0x6>

08008cf2 <memset>:
 8008cf2:	4402      	add	r2, r0
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d100      	bne.n	8008cfc <memset+0xa>
 8008cfa:	4770      	bx	lr
 8008cfc:	f803 1b01 	strb.w	r1, [r3], #1
 8008d00:	e7f9      	b.n	8008cf6 <memset+0x4>
	...

08008d04 <_free_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4605      	mov	r5, r0
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	d045      	beq.n	8008d98 <_free_r+0x94>
 8008d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d10:	1f0c      	subs	r4, r1, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bfb8      	it	lt
 8008d16:	18e4      	addlt	r4, r4, r3
 8008d18:	f000 f8cc 	bl	8008eb4 <__malloc_lock>
 8008d1c:	4a1f      	ldr	r2, [pc, #124]	; (8008d9c <_free_r+0x98>)
 8008d1e:	6813      	ldr	r3, [r2, #0]
 8008d20:	4610      	mov	r0, r2
 8008d22:	b933      	cbnz	r3, 8008d32 <_free_r+0x2e>
 8008d24:	6063      	str	r3, [r4, #4]
 8008d26:	6014      	str	r4, [r2, #0]
 8008d28:	4628      	mov	r0, r5
 8008d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d2e:	f000 b8c2 	b.w	8008eb6 <__malloc_unlock>
 8008d32:	42a3      	cmp	r3, r4
 8008d34:	d90c      	bls.n	8008d50 <_free_r+0x4c>
 8008d36:	6821      	ldr	r1, [r4, #0]
 8008d38:	1862      	adds	r2, r4, r1
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	bf04      	itt	eq
 8008d3e:	681a      	ldreq	r2, [r3, #0]
 8008d40:	685b      	ldreq	r3, [r3, #4]
 8008d42:	6063      	str	r3, [r4, #4]
 8008d44:	bf04      	itt	eq
 8008d46:	1852      	addeq	r2, r2, r1
 8008d48:	6022      	streq	r2, [r4, #0]
 8008d4a:	6004      	str	r4, [r0, #0]
 8008d4c:	e7ec      	b.n	8008d28 <_free_r+0x24>
 8008d4e:	4613      	mov	r3, r2
 8008d50:	685a      	ldr	r2, [r3, #4]
 8008d52:	b10a      	cbz	r2, 8008d58 <_free_r+0x54>
 8008d54:	42a2      	cmp	r2, r4
 8008d56:	d9fa      	bls.n	8008d4e <_free_r+0x4a>
 8008d58:	6819      	ldr	r1, [r3, #0]
 8008d5a:	1858      	adds	r0, r3, r1
 8008d5c:	42a0      	cmp	r0, r4
 8008d5e:	d10b      	bne.n	8008d78 <_free_r+0x74>
 8008d60:	6820      	ldr	r0, [r4, #0]
 8008d62:	4401      	add	r1, r0
 8008d64:	1858      	adds	r0, r3, r1
 8008d66:	4282      	cmp	r2, r0
 8008d68:	6019      	str	r1, [r3, #0]
 8008d6a:	d1dd      	bne.n	8008d28 <_free_r+0x24>
 8008d6c:	6810      	ldr	r0, [r2, #0]
 8008d6e:	6852      	ldr	r2, [r2, #4]
 8008d70:	605a      	str	r2, [r3, #4]
 8008d72:	4401      	add	r1, r0
 8008d74:	6019      	str	r1, [r3, #0]
 8008d76:	e7d7      	b.n	8008d28 <_free_r+0x24>
 8008d78:	d902      	bls.n	8008d80 <_free_r+0x7c>
 8008d7a:	230c      	movs	r3, #12
 8008d7c:	602b      	str	r3, [r5, #0]
 8008d7e:	e7d3      	b.n	8008d28 <_free_r+0x24>
 8008d80:	6820      	ldr	r0, [r4, #0]
 8008d82:	1821      	adds	r1, r4, r0
 8008d84:	428a      	cmp	r2, r1
 8008d86:	bf04      	itt	eq
 8008d88:	6811      	ldreq	r1, [r2, #0]
 8008d8a:	6852      	ldreq	r2, [r2, #4]
 8008d8c:	6062      	str	r2, [r4, #4]
 8008d8e:	bf04      	itt	eq
 8008d90:	1809      	addeq	r1, r1, r0
 8008d92:	6021      	streq	r1, [r4, #0]
 8008d94:	605c      	str	r4, [r3, #4]
 8008d96:	e7c7      	b.n	8008d28 <_free_r+0x24>
 8008d98:	bd38      	pop	{r3, r4, r5, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000220 	.word	0x20000220

08008da0 <_malloc_r>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	1ccd      	adds	r5, r1, #3
 8008da4:	f025 0503 	bic.w	r5, r5, #3
 8008da8:	3508      	adds	r5, #8
 8008daa:	2d0c      	cmp	r5, #12
 8008dac:	bf38      	it	cc
 8008dae:	250c      	movcc	r5, #12
 8008db0:	2d00      	cmp	r5, #0
 8008db2:	4606      	mov	r6, r0
 8008db4:	db01      	blt.n	8008dba <_malloc_r+0x1a>
 8008db6:	42a9      	cmp	r1, r5
 8008db8:	d903      	bls.n	8008dc2 <_malloc_r+0x22>
 8008dba:	230c      	movs	r3, #12
 8008dbc:	6033      	str	r3, [r6, #0]
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	bd70      	pop	{r4, r5, r6, pc}
 8008dc2:	f000 f877 	bl	8008eb4 <__malloc_lock>
 8008dc6:	4a21      	ldr	r2, [pc, #132]	; (8008e4c <_malloc_r+0xac>)
 8008dc8:	6814      	ldr	r4, [r2, #0]
 8008dca:	4621      	mov	r1, r4
 8008dcc:	b991      	cbnz	r1, 8008df4 <_malloc_r+0x54>
 8008dce:	4c20      	ldr	r4, [pc, #128]	; (8008e50 <_malloc_r+0xb0>)
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	b91b      	cbnz	r3, 8008ddc <_malloc_r+0x3c>
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f83d 	bl	8008e54 <_sbrk_r>
 8008dda:	6020      	str	r0, [r4, #0]
 8008ddc:	4629      	mov	r1, r5
 8008dde:	4630      	mov	r0, r6
 8008de0:	f000 f838 	bl	8008e54 <_sbrk_r>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d124      	bne.n	8008e32 <_malloc_r+0x92>
 8008de8:	230c      	movs	r3, #12
 8008dea:	6033      	str	r3, [r6, #0]
 8008dec:	4630      	mov	r0, r6
 8008dee:	f000 f862 	bl	8008eb6 <__malloc_unlock>
 8008df2:	e7e4      	b.n	8008dbe <_malloc_r+0x1e>
 8008df4:	680b      	ldr	r3, [r1, #0]
 8008df6:	1b5b      	subs	r3, r3, r5
 8008df8:	d418      	bmi.n	8008e2c <_malloc_r+0x8c>
 8008dfa:	2b0b      	cmp	r3, #11
 8008dfc:	d90f      	bls.n	8008e1e <_malloc_r+0x7e>
 8008dfe:	600b      	str	r3, [r1, #0]
 8008e00:	50cd      	str	r5, [r1, r3]
 8008e02:	18cc      	adds	r4, r1, r3
 8008e04:	4630      	mov	r0, r6
 8008e06:	f000 f856 	bl	8008eb6 <__malloc_unlock>
 8008e0a:	f104 000b 	add.w	r0, r4, #11
 8008e0e:	1d23      	adds	r3, r4, #4
 8008e10:	f020 0007 	bic.w	r0, r0, #7
 8008e14:	1ac3      	subs	r3, r0, r3
 8008e16:	d0d3      	beq.n	8008dc0 <_malloc_r+0x20>
 8008e18:	425a      	negs	r2, r3
 8008e1a:	50e2      	str	r2, [r4, r3]
 8008e1c:	e7d0      	b.n	8008dc0 <_malloc_r+0x20>
 8008e1e:	428c      	cmp	r4, r1
 8008e20:	684b      	ldr	r3, [r1, #4]
 8008e22:	bf16      	itet	ne
 8008e24:	6063      	strne	r3, [r4, #4]
 8008e26:	6013      	streq	r3, [r2, #0]
 8008e28:	460c      	movne	r4, r1
 8008e2a:	e7eb      	b.n	8008e04 <_malloc_r+0x64>
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	6849      	ldr	r1, [r1, #4]
 8008e30:	e7cc      	b.n	8008dcc <_malloc_r+0x2c>
 8008e32:	1cc4      	adds	r4, r0, #3
 8008e34:	f024 0403 	bic.w	r4, r4, #3
 8008e38:	42a0      	cmp	r0, r4
 8008e3a:	d005      	beq.n	8008e48 <_malloc_r+0xa8>
 8008e3c:	1a21      	subs	r1, r4, r0
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f000 f808 	bl	8008e54 <_sbrk_r>
 8008e44:	3001      	adds	r0, #1
 8008e46:	d0cf      	beq.n	8008de8 <_malloc_r+0x48>
 8008e48:	6025      	str	r5, [r4, #0]
 8008e4a:	e7db      	b.n	8008e04 <_malloc_r+0x64>
 8008e4c:	20000220 	.word	0x20000220
 8008e50:	20000224 	.word	0x20000224

08008e54 <_sbrk_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4c06      	ldr	r4, [pc, #24]	; (8008e70 <_sbrk_r+0x1c>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	f7f9 fc20 	bl	80026a4 <_sbrk>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_sbrk_r+0x1a>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_sbrk_r+0x1a>
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	20001b68 	.word	0x20001b68

08008e74 <siprintf>:
 8008e74:	b40e      	push	{r1, r2, r3}
 8008e76:	b500      	push	{lr}
 8008e78:	b09c      	sub	sp, #112	; 0x70
 8008e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e7c:	9002      	str	r0, [sp, #8]
 8008e7e:	9006      	str	r0, [sp, #24]
 8008e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e84:	4809      	ldr	r0, [pc, #36]	; (8008eac <siprintf+0x38>)
 8008e86:	9107      	str	r1, [sp, #28]
 8008e88:	9104      	str	r1, [sp, #16]
 8008e8a:	4909      	ldr	r1, [pc, #36]	; (8008eb0 <siprintf+0x3c>)
 8008e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e90:	9105      	str	r1, [sp, #20]
 8008e92:	6800      	ldr	r0, [r0, #0]
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	a902      	add	r1, sp, #8
 8008e98:	f000 f868 	bl	8008f6c <_svfiprintf_r>
 8008e9c:	9b02      	ldr	r3, [sp, #8]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]
 8008ea2:	b01c      	add	sp, #112	; 0x70
 8008ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ea8:	b003      	add	sp, #12
 8008eaa:	4770      	bx	lr
 8008eac:	20000198 	.word	0x20000198
 8008eb0:	ffff0208 	.word	0xffff0208

08008eb4 <__malloc_lock>:
 8008eb4:	4770      	bx	lr

08008eb6 <__malloc_unlock>:
 8008eb6:	4770      	bx	lr

08008eb8 <__ssputs_r>:
 8008eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebc:	688e      	ldr	r6, [r1, #8]
 8008ebe:	429e      	cmp	r6, r3
 8008ec0:	4682      	mov	sl, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	4690      	mov	r8, r2
 8008ec6:	4699      	mov	r9, r3
 8008ec8:	d837      	bhi.n	8008f3a <__ssputs_r+0x82>
 8008eca:	898a      	ldrh	r2, [r1, #12]
 8008ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ed0:	d031      	beq.n	8008f36 <__ssputs_r+0x7e>
 8008ed2:	6825      	ldr	r5, [r4, #0]
 8008ed4:	6909      	ldr	r1, [r1, #16]
 8008ed6:	1a6f      	subs	r7, r5, r1
 8008ed8:	6965      	ldr	r5, [r4, #20]
 8008eda:	2302      	movs	r3, #2
 8008edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ee0:	fb95 f5f3 	sdiv	r5, r5, r3
 8008ee4:	f109 0301 	add.w	r3, r9, #1
 8008ee8:	443b      	add	r3, r7
 8008eea:	429d      	cmp	r5, r3
 8008eec:	bf38      	it	cc
 8008eee:	461d      	movcc	r5, r3
 8008ef0:	0553      	lsls	r3, r2, #21
 8008ef2:	d530      	bpl.n	8008f56 <__ssputs_r+0x9e>
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7ff ff53 	bl	8008da0 <_malloc_r>
 8008efa:	4606      	mov	r6, r0
 8008efc:	b950      	cbnz	r0, 8008f14 <__ssputs_r+0x5c>
 8008efe:	230c      	movs	r3, #12
 8008f00:	f8ca 3000 	str.w	r3, [sl]
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f0a:	81a3      	strh	r3, [r4, #12]
 8008f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f14:	463a      	mov	r2, r7
 8008f16:	6921      	ldr	r1, [r4, #16]
 8008f18:	f7ff fee0 	bl	8008cdc <memcpy>
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f26:	81a3      	strh	r3, [r4, #12]
 8008f28:	6126      	str	r6, [r4, #16]
 8008f2a:	6165      	str	r5, [r4, #20]
 8008f2c:	443e      	add	r6, r7
 8008f2e:	1bed      	subs	r5, r5, r7
 8008f30:	6026      	str	r6, [r4, #0]
 8008f32:	60a5      	str	r5, [r4, #8]
 8008f34:	464e      	mov	r6, r9
 8008f36:	454e      	cmp	r6, r9
 8008f38:	d900      	bls.n	8008f3c <__ssputs_r+0x84>
 8008f3a:	464e      	mov	r6, r9
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	4641      	mov	r1, r8
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	f000 fa93 	bl	800946c <memmove>
 8008f46:	68a3      	ldr	r3, [r4, #8]
 8008f48:	1b9b      	subs	r3, r3, r6
 8008f4a:	60a3      	str	r3, [r4, #8]
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	441e      	add	r6, r3
 8008f50:	6026      	str	r6, [r4, #0]
 8008f52:	2000      	movs	r0, #0
 8008f54:	e7dc      	b.n	8008f10 <__ssputs_r+0x58>
 8008f56:	462a      	mov	r2, r5
 8008f58:	f000 faa1 	bl	800949e <_realloc_r>
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d1e2      	bne.n	8008f28 <__ssputs_r+0x70>
 8008f62:	6921      	ldr	r1, [r4, #16]
 8008f64:	4650      	mov	r0, sl
 8008f66:	f7ff fecd 	bl	8008d04 <_free_r>
 8008f6a:	e7c8      	b.n	8008efe <__ssputs_r+0x46>

08008f6c <_svfiprintf_r>:
 8008f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	461d      	mov	r5, r3
 8008f72:	898b      	ldrh	r3, [r1, #12]
 8008f74:	061f      	lsls	r7, r3, #24
 8008f76:	b09d      	sub	sp, #116	; 0x74
 8008f78:	4680      	mov	r8, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	4616      	mov	r6, r2
 8008f7e:	d50f      	bpl.n	8008fa0 <_svfiprintf_r+0x34>
 8008f80:	690b      	ldr	r3, [r1, #16]
 8008f82:	b96b      	cbnz	r3, 8008fa0 <_svfiprintf_r+0x34>
 8008f84:	2140      	movs	r1, #64	; 0x40
 8008f86:	f7ff ff0b 	bl	8008da0 <_malloc_r>
 8008f8a:	6020      	str	r0, [r4, #0]
 8008f8c:	6120      	str	r0, [r4, #16]
 8008f8e:	b928      	cbnz	r0, 8008f9c <_svfiprintf_r+0x30>
 8008f90:	230c      	movs	r3, #12
 8008f92:	f8c8 3000 	str.w	r3, [r8]
 8008f96:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9a:	e0c8      	b.n	800912e <_svfiprintf_r+0x1c2>
 8008f9c:	2340      	movs	r3, #64	; 0x40
 8008f9e:	6163      	str	r3, [r4, #20]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa4:	2320      	movs	r3, #32
 8008fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008faa:	2330      	movs	r3, #48	; 0x30
 8008fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fb0:	9503      	str	r5, [sp, #12]
 8008fb2:	f04f 0b01 	mov.w	fp, #1
 8008fb6:	4637      	mov	r7, r6
 8008fb8:	463d      	mov	r5, r7
 8008fba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008fbe:	b10b      	cbz	r3, 8008fc4 <_svfiprintf_r+0x58>
 8008fc0:	2b25      	cmp	r3, #37	; 0x25
 8008fc2:	d13e      	bne.n	8009042 <_svfiprintf_r+0xd6>
 8008fc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8008fc8:	d00b      	beq.n	8008fe2 <_svfiprintf_r+0x76>
 8008fca:	4653      	mov	r3, sl
 8008fcc:	4632      	mov	r2, r6
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	f7ff ff71 	bl	8008eb8 <__ssputs_r>
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	f000 80a4 	beq.w	8009124 <_svfiprintf_r+0x1b8>
 8008fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fde:	4453      	add	r3, sl
 8008fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe2:	783b      	ldrb	r3, [r7, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 809d 	beq.w	8009124 <_svfiprintf_r+0x1b8>
 8008fea:	2300      	movs	r3, #0
 8008fec:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	9307      	str	r3, [sp, #28]
 8008ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8008ffe:	462f      	mov	r7, r5
 8009000:	2205      	movs	r2, #5
 8009002:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009006:	4850      	ldr	r0, [pc, #320]	; (8009148 <_svfiprintf_r+0x1dc>)
 8009008:	f7f7 f8f2 	bl	80001f0 <memchr>
 800900c:	9b04      	ldr	r3, [sp, #16]
 800900e:	b9d0      	cbnz	r0, 8009046 <_svfiprintf_r+0xda>
 8009010:	06d9      	lsls	r1, r3, #27
 8009012:	bf44      	itt	mi
 8009014:	2220      	movmi	r2, #32
 8009016:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800901a:	071a      	lsls	r2, r3, #28
 800901c:	bf44      	itt	mi
 800901e:	222b      	movmi	r2, #43	; 0x2b
 8009020:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009024:	782a      	ldrb	r2, [r5, #0]
 8009026:	2a2a      	cmp	r2, #42	; 0x2a
 8009028:	d015      	beq.n	8009056 <_svfiprintf_r+0xea>
 800902a:	9a07      	ldr	r2, [sp, #28]
 800902c:	462f      	mov	r7, r5
 800902e:	2000      	movs	r0, #0
 8009030:	250a      	movs	r5, #10
 8009032:	4639      	mov	r1, r7
 8009034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009038:	3b30      	subs	r3, #48	; 0x30
 800903a:	2b09      	cmp	r3, #9
 800903c:	d94d      	bls.n	80090da <_svfiprintf_r+0x16e>
 800903e:	b1b8      	cbz	r0, 8009070 <_svfiprintf_r+0x104>
 8009040:	e00f      	b.n	8009062 <_svfiprintf_r+0xf6>
 8009042:	462f      	mov	r7, r5
 8009044:	e7b8      	b.n	8008fb8 <_svfiprintf_r+0x4c>
 8009046:	4a40      	ldr	r2, [pc, #256]	; (8009148 <_svfiprintf_r+0x1dc>)
 8009048:	1a80      	subs	r0, r0, r2
 800904a:	fa0b f000 	lsl.w	r0, fp, r0
 800904e:	4318      	orrs	r0, r3
 8009050:	9004      	str	r0, [sp, #16]
 8009052:	463d      	mov	r5, r7
 8009054:	e7d3      	b.n	8008ffe <_svfiprintf_r+0x92>
 8009056:	9a03      	ldr	r2, [sp, #12]
 8009058:	1d11      	adds	r1, r2, #4
 800905a:	6812      	ldr	r2, [r2, #0]
 800905c:	9103      	str	r1, [sp, #12]
 800905e:	2a00      	cmp	r2, #0
 8009060:	db01      	blt.n	8009066 <_svfiprintf_r+0xfa>
 8009062:	9207      	str	r2, [sp, #28]
 8009064:	e004      	b.n	8009070 <_svfiprintf_r+0x104>
 8009066:	4252      	negs	r2, r2
 8009068:	f043 0302 	orr.w	r3, r3, #2
 800906c:	9207      	str	r2, [sp, #28]
 800906e:	9304      	str	r3, [sp, #16]
 8009070:	783b      	ldrb	r3, [r7, #0]
 8009072:	2b2e      	cmp	r3, #46	; 0x2e
 8009074:	d10c      	bne.n	8009090 <_svfiprintf_r+0x124>
 8009076:	787b      	ldrb	r3, [r7, #1]
 8009078:	2b2a      	cmp	r3, #42	; 0x2a
 800907a:	d133      	bne.n	80090e4 <_svfiprintf_r+0x178>
 800907c:	9b03      	ldr	r3, [sp, #12]
 800907e:	1d1a      	adds	r2, r3, #4
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	9203      	str	r2, [sp, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	bfb8      	it	lt
 8009088:	f04f 33ff 	movlt.w	r3, #4294967295
 800908c:	3702      	adds	r7, #2
 800908e:	9305      	str	r3, [sp, #20]
 8009090:	4d2e      	ldr	r5, [pc, #184]	; (800914c <_svfiprintf_r+0x1e0>)
 8009092:	7839      	ldrb	r1, [r7, #0]
 8009094:	2203      	movs	r2, #3
 8009096:	4628      	mov	r0, r5
 8009098:	f7f7 f8aa 	bl	80001f0 <memchr>
 800909c:	b138      	cbz	r0, 80090ae <_svfiprintf_r+0x142>
 800909e:	2340      	movs	r3, #64	; 0x40
 80090a0:	1b40      	subs	r0, r0, r5
 80090a2:	fa03 f000 	lsl.w	r0, r3, r0
 80090a6:	9b04      	ldr	r3, [sp, #16]
 80090a8:	4303      	orrs	r3, r0
 80090aa:	3701      	adds	r7, #1
 80090ac:	9304      	str	r3, [sp, #16]
 80090ae:	7839      	ldrb	r1, [r7, #0]
 80090b0:	4827      	ldr	r0, [pc, #156]	; (8009150 <_svfiprintf_r+0x1e4>)
 80090b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090b6:	2206      	movs	r2, #6
 80090b8:	1c7e      	adds	r6, r7, #1
 80090ba:	f7f7 f899 	bl	80001f0 <memchr>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d038      	beq.n	8009134 <_svfiprintf_r+0x1c8>
 80090c2:	4b24      	ldr	r3, [pc, #144]	; (8009154 <_svfiprintf_r+0x1e8>)
 80090c4:	bb13      	cbnz	r3, 800910c <_svfiprintf_r+0x1a0>
 80090c6:	9b03      	ldr	r3, [sp, #12]
 80090c8:	3307      	adds	r3, #7
 80090ca:	f023 0307 	bic.w	r3, r3, #7
 80090ce:	3308      	adds	r3, #8
 80090d0:	9303      	str	r3, [sp, #12]
 80090d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d4:	444b      	add	r3, r9
 80090d6:	9309      	str	r3, [sp, #36]	; 0x24
 80090d8:	e76d      	b.n	8008fb6 <_svfiprintf_r+0x4a>
 80090da:	fb05 3202 	mla	r2, r5, r2, r3
 80090de:	2001      	movs	r0, #1
 80090e0:	460f      	mov	r7, r1
 80090e2:	e7a6      	b.n	8009032 <_svfiprintf_r+0xc6>
 80090e4:	2300      	movs	r3, #0
 80090e6:	3701      	adds	r7, #1
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	4619      	mov	r1, r3
 80090ec:	250a      	movs	r5, #10
 80090ee:	4638      	mov	r0, r7
 80090f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f4:	3a30      	subs	r2, #48	; 0x30
 80090f6:	2a09      	cmp	r2, #9
 80090f8:	d903      	bls.n	8009102 <_svfiprintf_r+0x196>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0c8      	beq.n	8009090 <_svfiprintf_r+0x124>
 80090fe:	9105      	str	r1, [sp, #20]
 8009100:	e7c6      	b.n	8009090 <_svfiprintf_r+0x124>
 8009102:	fb05 2101 	mla	r1, r5, r1, r2
 8009106:	2301      	movs	r3, #1
 8009108:	4607      	mov	r7, r0
 800910a:	e7f0      	b.n	80090ee <_svfiprintf_r+0x182>
 800910c:	ab03      	add	r3, sp, #12
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	4622      	mov	r2, r4
 8009112:	4b11      	ldr	r3, [pc, #68]	; (8009158 <_svfiprintf_r+0x1ec>)
 8009114:	a904      	add	r1, sp, #16
 8009116:	4640      	mov	r0, r8
 8009118:	f3af 8000 	nop.w
 800911c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009120:	4681      	mov	r9, r0
 8009122:	d1d6      	bne.n	80090d2 <_svfiprintf_r+0x166>
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	065b      	lsls	r3, r3, #25
 8009128:	f53f af35 	bmi.w	8008f96 <_svfiprintf_r+0x2a>
 800912c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800912e:	b01d      	add	sp, #116	; 0x74
 8009130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009134:	ab03      	add	r3, sp, #12
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	4622      	mov	r2, r4
 800913a:	4b07      	ldr	r3, [pc, #28]	; (8009158 <_svfiprintf_r+0x1ec>)
 800913c:	a904      	add	r1, sp, #16
 800913e:	4640      	mov	r0, r8
 8009140:	f000 f882 	bl	8009248 <_printf_i>
 8009144:	e7ea      	b.n	800911c <_svfiprintf_r+0x1b0>
 8009146:	bf00      	nop
 8009148:	08009c50 	.word	0x08009c50
 800914c:	08009c56 	.word	0x08009c56
 8009150:	08009c5a 	.word	0x08009c5a
 8009154:	00000000 	.word	0x00000000
 8009158:	08008eb9 	.word	0x08008eb9

0800915c <_printf_common>:
 800915c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009160:	4691      	mov	r9, r2
 8009162:	461f      	mov	r7, r3
 8009164:	688a      	ldr	r2, [r1, #8]
 8009166:	690b      	ldr	r3, [r1, #16]
 8009168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800916c:	4293      	cmp	r3, r2
 800916e:	bfb8      	it	lt
 8009170:	4613      	movlt	r3, r2
 8009172:	f8c9 3000 	str.w	r3, [r9]
 8009176:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800917a:	4606      	mov	r6, r0
 800917c:	460c      	mov	r4, r1
 800917e:	b112      	cbz	r2, 8009186 <_printf_common+0x2a>
 8009180:	3301      	adds	r3, #1
 8009182:	f8c9 3000 	str.w	r3, [r9]
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	0699      	lsls	r1, r3, #26
 800918a:	bf42      	ittt	mi
 800918c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009190:	3302      	addmi	r3, #2
 8009192:	f8c9 3000 	strmi.w	r3, [r9]
 8009196:	6825      	ldr	r5, [r4, #0]
 8009198:	f015 0506 	ands.w	r5, r5, #6
 800919c:	d107      	bne.n	80091ae <_printf_common+0x52>
 800919e:	f104 0a19 	add.w	sl, r4, #25
 80091a2:	68e3      	ldr	r3, [r4, #12]
 80091a4:	f8d9 2000 	ldr.w	r2, [r9]
 80091a8:	1a9b      	subs	r3, r3, r2
 80091aa:	42ab      	cmp	r3, r5
 80091ac:	dc28      	bgt.n	8009200 <_printf_common+0xa4>
 80091ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80091b2:	6822      	ldr	r2, [r4, #0]
 80091b4:	3300      	adds	r3, #0
 80091b6:	bf18      	it	ne
 80091b8:	2301      	movne	r3, #1
 80091ba:	0692      	lsls	r2, r2, #26
 80091bc:	d42d      	bmi.n	800921a <_printf_common+0xbe>
 80091be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091c2:	4639      	mov	r1, r7
 80091c4:	4630      	mov	r0, r6
 80091c6:	47c0      	blx	r8
 80091c8:	3001      	adds	r0, #1
 80091ca:	d020      	beq.n	800920e <_printf_common+0xb2>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	68e5      	ldr	r5, [r4, #12]
 80091d0:	f8d9 2000 	ldr.w	r2, [r9]
 80091d4:	f003 0306 	and.w	r3, r3, #6
 80091d8:	2b04      	cmp	r3, #4
 80091da:	bf08      	it	eq
 80091dc:	1aad      	subeq	r5, r5, r2
 80091de:	68a3      	ldr	r3, [r4, #8]
 80091e0:	6922      	ldr	r2, [r4, #16]
 80091e2:	bf0c      	ite	eq
 80091e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091e8:	2500      	movne	r5, #0
 80091ea:	4293      	cmp	r3, r2
 80091ec:	bfc4      	itt	gt
 80091ee:	1a9b      	subgt	r3, r3, r2
 80091f0:	18ed      	addgt	r5, r5, r3
 80091f2:	f04f 0900 	mov.w	r9, #0
 80091f6:	341a      	adds	r4, #26
 80091f8:	454d      	cmp	r5, r9
 80091fa:	d11a      	bne.n	8009232 <_printf_common+0xd6>
 80091fc:	2000      	movs	r0, #0
 80091fe:	e008      	b.n	8009212 <_printf_common+0xb6>
 8009200:	2301      	movs	r3, #1
 8009202:	4652      	mov	r2, sl
 8009204:	4639      	mov	r1, r7
 8009206:	4630      	mov	r0, r6
 8009208:	47c0      	blx	r8
 800920a:	3001      	adds	r0, #1
 800920c:	d103      	bne.n	8009216 <_printf_common+0xba>
 800920e:	f04f 30ff 	mov.w	r0, #4294967295
 8009212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009216:	3501      	adds	r5, #1
 8009218:	e7c3      	b.n	80091a2 <_printf_common+0x46>
 800921a:	18e1      	adds	r1, r4, r3
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	2030      	movs	r0, #48	; 0x30
 8009220:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009224:	4422      	add	r2, r4
 8009226:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800922a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800922e:	3302      	adds	r3, #2
 8009230:	e7c5      	b.n	80091be <_printf_common+0x62>
 8009232:	2301      	movs	r3, #1
 8009234:	4622      	mov	r2, r4
 8009236:	4639      	mov	r1, r7
 8009238:	4630      	mov	r0, r6
 800923a:	47c0      	blx	r8
 800923c:	3001      	adds	r0, #1
 800923e:	d0e6      	beq.n	800920e <_printf_common+0xb2>
 8009240:	f109 0901 	add.w	r9, r9, #1
 8009244:	e7d8      	b.n	80091f8 <_printf_common+0x9c>
	...

08009248 <_printf_i>:
 8009248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800924c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009250:	460c      	mov	r4, r1
 8009252:	7e09      	ldrb	r1, [r1, #24]
 8009254:	b085      	sub	sp, #20
 8009256:	296e      	cmp	r1, #110	; 0x6e
 8009258:	4617      	mov	r7, r2
 800925a:	4606      	mov	r6, r0
 800925c:	4698      	mov	r8, r3
 800925e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009260:	f000 80b3 	beq.w	80093ca <_printf_i+0x182>
 8009264:	d822      	bhi.n	80092ac <_printf_i+0x64>
 8009266:	2963      	cmp	r1, #99	; 0x63
 8009268:	d036      	beq.n	80092d8 <_printf_i+0x90>
 800926a:	d80a      	bhi.n	8009282 <_printf_i+0x3a>
 800926c:	2900      	cmp	r1, #0
 800926e:	f000 80b9 	beq.w	80093e4 <_printf_i+0x19c>
 8009272:	2958      	cmp	r1, #88	; 0x58
 8009274:	f000 8083 	beq.w	800937e <_printf_i+0x136>
 8009278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800927c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009280:	e032      	b.n	80092e8 <_printf_i+0xa0>
 8009282:	2964      	cmp	r1, #100	; 0x64
 8009284:	d001      	beq.n	800928a <_printf_i+0x42>
 8009286:	2969      	cmp	r1, #105	; 0x69
 8009288:	d1f6      	bne.n	8009278 <_printf_i+0x30>
 800928a:	6820      	ldr	r0, [r4, #0]
 800928c:	6813      	ldr	r3, [r2, #0]
 800928e:	0605      	lsls	r5, r0, #24
 8009290:	f103 0104 	add.w	r1, r3, #4
 8009294:	d52a      	bpl.n	80092ec <_printf_i+0xa4>
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6011      	str	r1, [r2, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	da03      	bge.n	80092a6 <_printf_i+0x5e>
 800929e:	222d      	movs	r2, #45	; 0x2d
 80092a0:	425b      	negs	r3, r3
 80092a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80092a6:	486f      	ldr	r0, [pc, #444]	; (8009464 <_printf_i+0x21c>)
 80092a8:	220a      	movs	r2, #10
 80092aa:	e039      	b.n	8009320 <_printf_i+0xd8>
 80092ac:	2973      	cmp	r1, #115	; 0x73
 80092ae:	f000 809d 	beq.w	80093ec <_printf_i+0x1a4>
 80092b2:	d808      	bhi.n	80092c6 <_printf_i+0x7e>
 80092b4:	296f      	cmp	r1, #111	; 0x6f
 80092b6:	d020      	beq.n	80092fa <_printf_i+0xb2>
 80092b8:	2970      	cmp	r1, #112	; 0x70
 80092ba:	d1dd      	bne.n	8009278 <_printf_i+0x30>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	f043 0320 	orr.w	r3, r3, #32
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	e003      	b.n	80092ce <_printf_i+0x86>
 80092c6:	2975      	cmp	r1, #117	; 0x75
 80092c8:	d017      	beq.n	80092fa <_printf_i+0xb2>
 80092ca:	2978      	cmp	r1, #120	; 0x78
 80092cc:	d1d4      	bne.n	8009278 <_printf_i+0x30>
 80092ce:	2378      	movs	r3, #120	; 0x78
 80092d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092d4:	4864      	ldr	r0, [pc, #400]	; (8009468 <_printf_i+0x220>)
 80092d6:	e055      	b.n	8009384 <_printf_i+0x13c>
 80092d8:	6813      	ldr	r3, [r2, #0]
 80092da:	1d19      	adds	r1, r3, #4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6011      	str	r1, [r2, #0]
 80092e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092e8:	2301      	movs	r3, #1
 80092ea:	e08c      	b.n	8009406 <_printf_i+0x1be>
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6011      	str	r1, [r2, #0]
 80092f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092f4:	bf18      	it	ne
 80092f6:	b21b      	sxthne	r3, r3
 80092f8:	e7cf      	b.n	800929a <_printf_i+0x52>
 80092fa:	6813      	ldr	r3, [r2, #0]
 80092fc:	6825      	ldr	r5, [r4, #0]
 80092fe:	1d18      	adds	r0, r3, #4
 8009300:	6010      	str	r0, [r2, #0]
 8009302:	0628      	lsls	r0, r5, #24
 8009304:	d501      	bpl.n	800930a <_printf_i+0xc2>
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	e002      	b.n	8009310 <_printf_i+0xc8>
 800930a:	0668      	lsls	r0, r5, #25
 800930c:	d5fb      	bpl.n	8009306 <_printf_i+0xbe>
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	4854      	ldr	r0, [pc, #336]	; (8009464 <_printf_i+0x21c>)
 8009312:	296f      	cmp	r1, #111	; 0x6f
 8009314:	bf14      	ite	ne
 8009316:	220a      	movne	r2, #10
 8009318:	2208      	moveq	r2, #8
 800931a:	2100      	movs	r1, #0
 800931c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009320:	6865      	ldr	r5, [r4, #4]
 8009322:	60a5      	str	r5, [r4, #8]
 8009324:	2d00      	cmp	r5, #0
 8009326:	f2c0 8095 	blt.w	8009454 <_printf_i+0x20c>
 800932a:	6821      	ldr	r1, [r4, #0]
 800932c:	f021 0104 	bic.w	r1, r1, #4
 8009330:	6021      	str	r1, [r4, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d13d      	bne.n	80093b2 <_printf_i+0x16a>
 8009336:	2d00      	cmp	r5, #0
 8009338:	f040 808e 	bne.w	8009458 <_printf_i+0x210>
 800933c:	4665      	mov	r5, ip
 800933e:	2a08      	cmp	r2, #8
 8009340:	d10b      	bne.n	800935a <_printf_i+0x112>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	07db      	lsls	r3, r3, #31
 8009346:	d508      	bpl.n	800935a <_printf_i+0x112>
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	6862      	ldr	r2, [r4, #4]
 800934c:	429a      	cmp	r2, r3
 800934e:	bfde      	ittt	le
 8009350:	2330      	movle	r3, #48	; 0x30
 8009352:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009356:	f105 35ff 	addle.w	r5, r5, #4294967295
 800935a:	ebac 0305 	sub.w	r3, ip, r5
 800935e:	6123      	str	r3, [r4, #16]
 8009360:	f8cd 8000 	str.w	r8, [sp]
 8009364:	463b      	mov	r3, r7
 8009366:	aa03      	add	r2, sp, #12
 8009368:	4621      	mov	r1, r4
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff fef6 	bl	800915c <_printf_common>
 8009370:	3001      	adds	r0, #1
 8009372:	d14d      	bne.n	8009410 <_printf_i+0x1c8>
 8009374:	f04f 30ff 	mov.w	r0, #4294967295
 8009378:	b005      	add	sp, #20
 800937a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800937e:	4839      	ldr	r0, [pc, #228]	; (8009464 <_printf_i+0x21c>)
 8009380:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009384:	6813      	ldr	r3, [r2, #0]
 8009386:	6821      	ldr	r1, [r4, #0]
 8009388:	1d1d      	adds	r5, r3, #4
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6015      	str	r5, [r2, #0]
 800938e:	060a      	lsls	r2, r1, #24
 8009390:	d50b      	bpl.n	80093aa <_printf_i+0x162>
 8009392:	07ca      	lsls	r2, r1, #31
 8009394:	bf44      	itt	mi
 8009396:	f041 0120 	orrmi.w	r1, r1, #32
 800939a:	6021      	strmi	r1, [r4, #0]
 800939c:	b91b      	cbnz	r3, 80093a6 <_printf_i+0x15e>
 800939e:	6822      	ldr	r2, [r4, #0]
 80093a0:	f022 0220 	bic.w	r2, r2, #32
 80093a4:	6022      	str	r2, [r4, #0]
 80093a6:	2210      	movs	r2, #16
 80093a8:	e7b7      	b.n	800931a <_printf_i+0xd2>
 80093aa:	064d      	lsls	r5, r1, #25
 80093ac:	bf48      	it	mi
 80093ae:	b29b      	uxthmi	r3, r3
 80093b0:	e7ef      	b.n	8009392 <_printf_i+0x14a>
 80093b2:	4665      	mov	r5, ip
 80093b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80093b8:	fb02 3311 	mls	r3, r2, r1, r3
 80093bc:	5cc3      	ldrb	r3, [r0, r3]
 80093be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80093c2:	460b      	mov	r3, r1
 80093c4:	2900      	cmp	r1, #0
 80093c6:	d1f5      	bne.n	80093b4 <_printf_i+0x16c>
 80093c8:	e7b9      	b.n	800933e <_printf_i+0xf6>
 80093ca:	6813      	ldr	r3, [r2, #0]
 80093cc:	6825      	ldr	r5, [r4, #0]
 80093ce:	6961      	ldr	r1, [r4, #20]
 80093d0:	1d18      	adds	r0, r3, #4
 80093d2:	6010      	str	r0, [r2, #0]
 80093d4:	0628      	lsls	r0, r5, #24
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	d501      	bpl.n	80093de <_printf_i+0x196>
 80093da:	6019      	str	r1, [r3, #0]
 80093dc:	e002      	b.n	80093e4 <_printf_i+0x19c>
 80093de:	066a      	lsls	r2, r5, #25
 80093e0:	d5fb      	bpl.n	80093da <_printf_i+0x192>
 80093e2:	8019      	strh	r1, [r3, #0]
 80093e4:	2300      	movs	r3, #0
 80093e6:	6123      	str	r3, [r4, #16]
 80093e8:	4665      	mov	r5, ip
 80093ea:	e7b9      	b.n	8009360 <_printf_i+0x118>
 80093ec:	6813      	ldr	r3, [r2, #0]
 80093ee:	1d19      	adds	r1, r3, #4
 80093f0:	6011      	str	r1, [r2, #0]
 80093f2:	681d      	ldr	r5, [r3, #0]
 80093f4:	6862      	ldr	r2, [r4, #4]
 80093f6:	2100      	movs	r1, #0
 80093f8:	4628      	mov	r0, r5
 80093fa:	f7f6 fef9 	bl	80001f0 <memchr>
 80093fe:	b108      	cbz	r0, 8009404 <_printf_i+0x1bc>
 8009400:	1b40      	subs	r0, r0, r5
 8009402:	6060      	str	r0, [r4, #4]
 8009404:	6863      	ldr	r3, [r4, #4]
 8009406:	6123      	str	r3, [r4, #16]
 8009408:	2300      	movs	r3, #0
 800940a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800940e:	e7a7      	b.n	8009360 <_printf_i+0x118>
 8009410:	6923      	ldr	r3, [r4, #16]
 8009412:	462a      	mov	r2, r5
 8009414:	4639      	mov	r1, r7
 8009416:	4630      	mov	r0, r6
 8009418:	47c0      	blx	r8
 800941a:	3001      	adds	r0, #1
 800941c:	d0aa      	beq.n	8009374 <_printf_i+0x12c>
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	079b      	lsls	r3, r3, #30
 8009422:	d413      	bmi.n	800944c <_printf_i+0x204>
 8009424:	68e0      	ldr	r0, [r4, #12]
 8009426:	9b03      	ldr	r3, [sp, #12]
 8009428:	4298      	cmp	r0, r3
 800942a:	bfb8      	it	lt
 800942c:	4618      	movlt	r0, r3
 800942e:	e7a3      	b.n	8009378 <_printf_i+0x130>
 8009430:	2301      	movs	r3, #1
 8009432:	464a      	mov	r2, r9
 8009434:	4639      	mov	r1, r7
 8009436:	4630      	mov	r0, r6
 8009438:	47c0      	blx	r8
 800943a:	3001      	adds	r0, #1
 800943c:	d09a      	beq.n	8009374 <_printf_i+0x12c>
 800943e:	3501      	adds	r5, #1
 8009440:	68e3      	ldr	r3, [r4, #12]
 8009442:	9a03      	ldr	r2, [sp, #12]
 8009444:	1a9b      	subs	r3, r3, r2
 8009446:	42ab      	cmp	r3, r5
 8009448:	dcf2      	bgt.n	8009430 <_printf_i+0x1e8>
 800944a:	e7eb      	b.n	8009424 <_printf_i+0x1dc>
 800944c:	2500      	movs	r5, #0
 800944e:	f104 0919 	add.w	r9, r4, #25
 8009452:	e7f5      	b.n	8009440 <_printf_i+0x1f8>
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1ac      	bne.n	80093b2 <_printf_i+0x16a>
 8009458:	7803      	ldrb	r3, [r0, #0]
 800945a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800945e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009462:	e76c      	b.n	800933e <_printf_i+0xf6>
 8009464:	08009c61 	.word	0x08009c61
 8009468:	08009c72 	.word	0x08009c72

0800946c <memmove>:
 800946c:	4288      	cmp	r0, r1
 800946e:	b510      	push	{r4, lr}
 8009470:	eb01 0302 	add.w	r3, r1, r2
 8009474:	d807      	bhi.n	8009486 <memmove+0x1a>
 8009476:	1e42      	subs	r2, r0, #1
 8009478:	4299      	cmp	r1, r3
 800947a:	d00a      	beq.n	8009492 <memmove+0x26>
 800947c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009480:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009484:	e7f8      	b.n	8009478 <memmove+0xc>
 8009486:	4283      	cmp	r3, r0
 8009488:	d9f5      	bls.n	8009476 <memmove+0xa>
 800948a:	1881      	adds	r1, r0, r2
 800948c:	1ad2      	subs	r2, r2, r3
 800948e:	42d3      	cmn	r3, r2
 8009490:	d100      	bne.n	8009494 <memmove+0x28>
 8009492:	bd10      	pop	{r4, pc}
 8009494:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009498:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800949c:	e7f7      	b.n	800948e <memmove+0x22>

0800949e <_realloc_r>:
 800949e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a0:	4607      	mov	r7, r0
 80094a2:	4614      	mov	r4, r2
 80094a4:	460e      	mov	r6, r1
 80094a6:	b921      	cbnz	r1, 80094b2 <_realloc_r+0x14>
 80094a8:	4611      	mov	r1, r2
 80094aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094ae:	f7ff bc77 	b.w	8008da0 <_malloc_r>
 80094b2:	b922      	cbnz	r2, 80094be <_realloc_r+0x20>
 80094b4:	f7ff fc26 	bl	8008d04 <_free_r>
 80094b8:	4625      	mov	r5, r4
 80094ba:	4628      	mov	r0, r5
 80094bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094be:	f000 f814 	bl	80094ea <_malloc_usable_size_r>
 80094c2:	42a0      	cmp	r0, r4
 80094c4:	d20f      	bcs.n	80094e6 <_realloc_r+0x48>
 80094c6:	4621      	mov	r1, r4
 80094c8:	4638      	mov	r0, r7
 80094ca:	f7ff fc69 	bl	8008da0 <_malloc_r>
 80094ce:	4605      	mov	r5, r0
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d0f2      	beq.n	80094ba <_realloc_r+0x1c>
 80094d4:	4631      	mov	r1, r6
 80094d6:	4622      	mov	r2, r4
 80094d8:	f7ff fc00 	bl	8008cdc <memcpy>
 80094dc:	4631      	mov	r1, r6
 80094de:	4638      	mov	r0, r7
 80094e0:	f7ff fc10 	bl	8008d04 <_free_r>
 80094e4:	e7e9      	b.n	80094ba <_realloc_r+0x1c>
 80094e6:	4635      	mov	r5, r6
 80094e8:	e7e7      	b.n	80094ba <_realloc_r+0x1c>

080094ea <_malloc_usable_size_r>:
 80094ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ee:	1f18      	subs	r0, r3, #4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	bfbc      	itt	lt
 80094f4:	580b      	ldrlt	r3, [r1, r0]
 80094f6:	18c0      	addlt	r0, r0, r3
 80094f8:	4770      	bx	lr
	...

080094fc <_init>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr

08009508 <_fini>:
 8009508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950a:	bf00      	nop
 800950c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950e:	bc08      	pop	{r3}
 8009510:	469e      	mov	lr, r3
 8009512:	4770      	bx	lr
